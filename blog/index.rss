<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog]]></title><description><![CDATA[strugee.net blog]]></description><link>https://strugee.net/blog/</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Sun, 24 Sep 2017 22:30:51 GMT</lastBuildDate><atom:link href="https://strugee.net/blog//index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[Â© Copyright 2012-2017 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Zero-downtime restarts have landed]]></title><description><![CDATA[<p>I'm thrilled to announce that zero-downtime restarts, which I've been hacking on for the past week or two, <a href="https://github.com/pump-io/pump.io/pull/1406">have just landed</a> in pump.io master!</p>
<p>Zero-downtime restarts require at least two cluster workers and MongoDB as a Databank driver (we'll eventually relax the latter requirement as we continue to test the feature). Here's how it works:</p>
<ol>
<li>An administrator sends SIGUSR2 to the master pump.io process (note that SIGUSR1 is <a href="https://nodejs.org/api/process.html#process_signal_events">reserved by Node.js</a>)</li>
<li>The master process builds a queue of worker processes that need to be restarted</li>
<li>The master process picks a random worker from the queue and sends it a signal asking it to gracefully shut down</li>
<li>The worker process shuts down its HTTP server, which causes it to stop accepting new connections - it will do the same for the bounce server, if applicable</li>
<li>The worker shuts down its database connection once the HTTP server is completely shut down, meaning that it's done servicing in-flight requests</li>
<li>The worker closes its connection with the master process and Node.js automatically terminates due to there being no listeners on the event loop</li>
<li>The master recognizes the death of the worker process, replaces it, waits for the new worker to signal that it's listening for connections, and repeats from step 3 until the queue is empty</li>
</ol>
<p>This works because only one worker is shut down at a time, allowing the other workers to continue servicing requests while the one worker is restarted. We wait until the new worker actually signals it's ready to process requests before beginning the process for another worker.</p>
<p>Such a feature requires careful error handling, so there are a lot of built-in checks to prevent administrators from shooting themselves in the foot:</p>
<ul>
<li>If there's a restart already in progress, SIGUSR2 is ignored</li>
<li>If there's only 1 cluster worker, the restart request is refused (because there would be downtime and you should just restart the master)</li>
<li>
<p>The master process will load a magic number from the <em>new</em> code and compare it with the <em>old</em> magic number loaded when the master process started - if they don't match, SIGUSR2 will be refused. This number will be incremented for things that would make zero-downtime restarts cause problems, for example:</p>
<ul>
<li>The logic in the master process itself changing</li>
<li>Cross-process logic changing, such that a new worker communicating with old workers would cause problems</li>
<li>Database changes</li>
</ul>
</li>
<li>If a worker process doesn't shut itself down within 30 seconds, it will be killed</li>
<li>
<p>If a zero-downtime restart fails for any reason, the master process will refuse SIGUSR2 and will not respawn any more cluster workers, even if they crash - this is because something must have gone <em>seriously</em> wrong, either with the master, the workers, or the new code, and it's better to just restart everything. Currently this condition occurs when:</p>
<ul>
<li>A new worker died directly after being spawned (e.g. from invalid JSON in <code>pump.io.json</code>)</li>
<li>A new worker signaled that it couldn't bind to the appropriate ports</li>
</ul>
</li>
</ul>
<p>While these checks do a lot to catch problems, they're not a silver bullet, and we strongly recommend that administrators watch their logs as they trigger restarts. However, this is still a <em>huge</em> win for the admin experience - the most exciting part of this for me is that it's the first step we need to take towards having fully automatic updates, which has been a dream of mine for a long while now.</p>
<p>Admins running from git master can start experimenting with this feature today, and it will be released during the <em>next</em> release cycle - i.e. with the 5.1 beta and stable, <em>not</em> the current 5.0 beta. Since this is highly experimental, we want this to have as much time for testing as possible. You can also check out the <a href="https://pumpio.readthedocs.io/en/latest/administration/zero-downtime-restarts.html">official documentation</a> on this feature.</p>
<p>I hope people enjoy this! And as always, feel free to <a href="https://github.com/pump-io/pump.io/issues/new">report any bugs</a>.</p>
]]></description><link>https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed</link><guid isPermaLink="true">https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed</guid><category><![CDATA[pump.io]]></category><category><![CDATA[blaggregator]]></category><pubDate>Fri, 18 Aug 2017 09:01:16 GMT</pubDate></item><item><title><![CDATA[pump.io 5.0 beta released]]></title><description><![CDATA[<p>I'm excited to announce that pump.io 5.0.0 is now officially in beta!</p>
<p>This is another big release and makes a wide variety of improvements. Here are some highlights from <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#500-beta-0---2017-08-07">the changelog</a>:</p>
<ul>
<li>More complete documentation</li>
<li>Small improvements to the administrator experience</li>
<li>A better web UI, including some user experience polishing as well as an upgrade to more performant and better-licensed libraries</li>
<li>A fix for crashes related to "login with remote account" (although this one was backported in 4.1.1)</li>
<li>Significant security improvements in the <a href="https://pumpio.readthedocs.io/en/latest/administration/upstream-systemd-unit.html">systemd service</a> shipped with the package</li>
<li>Lots of internal refactoring and simplification made possible by dropping Node 0.10/0.12 support</li>
</ul>
<p>Many of these changes - particularly the systemd changes and the fact that (<a href="http://pump.io/blog/2017/07/pump.io-4.1-is-out">as previously announced</a>) Node 0.10 and 0.12 are no longer supported - will require administrator intervention. Be sure to read our <a href="https://pumpio.readthedocs.io/en/latest/upgrades/4.x-to-5.x.html">upgrade guide</a> for details on how to deal with these changes.</p>
<p>All of these features add up to make pump.io 5.0 beta the most stable and secure release yet. As always, it will go through our beta period for about a month before being released as a fully stable version. If you try it out, the <a href="https://github.com/pump-io/pump.io/wiki/Community">community</a> would love to hear about it - and be sure to <a href="https://github.com/pump-io/pump.io/issues">report any bugs</a> you encounter!</p>
]]></description><link>https://strugee.net/blog/2017/08/pump.io-5.0-beta-released</link><guid isPermaLink="true">https://strugee.net/blog/2017/08/pump.io-5.0-beta-released</guid><category><![CDATA[pump.io]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 07 Aug 2017 18:51:12 GMT</pubDate></item><item><title><![CDATA[Going to IndieWeb Summit 2017]]></title><description><![CDATA[<p>I'll be <data class="p-rsvp" value="yes">attending</data> the <a href="https://2017.indieweb.org/" class="u-in-reply-to">IndieWeb Summit</a> this year (well, the first day). Hopefully I'll write a way to actually post notes and RSVPs properly on this site, instead of sketchily writing the HTML by hand, which is what I did for this RSVP.</p>
]]></description><link>https://strugee.net/blog/2017/06/going-to-indieweb-summit-2017</link><guid isPermaLink="true">https://strugee.net/blog/2017/06/going-to-indieweb-summit-2017</guid><category><![CDATA[personal]]></category><pubDate>Tue, 13 Jun 2017 09:09:13 GMT</pubDate></item><item><title><![CDATA[Graduation 2017: reflections on 365 days of gap yearing]]></title><description><![CDATA[<p>Tonight marks the end of the high school careers for everyone in Seattle Academy's Class of 2017. Congratulations to everyone who graduated tonight - you deserve it, seriously. To my friends in particular, I'm so proud of you guys! You're completely amazing, you've done such incredible things and I love you very much.</p>
<p>Attending the Class of 2017's graduation was <em>super</em> strange for me too, honestly, because I'm such a radically different person than back when I was on that stage.</p>
<p>This year I put out <a href="https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available">several</a> <a href="https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available">major</a> <a href="https://strugee.net/blog/2017/04/pump.io-4.0-in-beta">releases</a> (and a couple minor ones too) of <a href="http://pump.io">pump.io</a>, the decentralized social networking software I maintain; I <a href="https://strugee.net/blog/2017/05/pump.io-accident">became an Invited Expert</a> at the World Wide Web Consortium and I wrote the software that powers this blog - <a href="https://github.com/straticjs">Stratic</a> - from scratch. I spoke at some major technical conferences on <a href="https://media.libreplanet.org/u/libreplanet/m/pump-io-the-federated-extensible-social-network/">pump.io</a> and <a href="https://www.youtube.com/watch?v=a9l-FmSgyt8">Stratic</a>, too. But mostly what I was thinking about tonight was all the personal development I went through. As some who are close to me in real life know (particularly those who were there), a year ago I was relatively seriously depressed. There were actually a <em>lot</em> of reasons for this, but one of the most important was the trouble I had dealing with change - the biggest change, of course, being leaving high school: somewhere familiar, somewhere with friends.</p>
<p>I vividly remember sitting in the seats just under the stage in McCaw Hall the day of graduation as the SAAS people running the show showed us where to walk and what to do. I leaned over to my friend and said, "I don't think I'll understand what's happening here for a very long time," to which she said, "what, like where we walk and stuff?" I chuckled and said nevermind, because what I was really referring to was what was happening in a grander sense - what this event really meant and was for, on the scale of years and decades (I couldn't find words for this at the time).</p>
<p>I don't really know what it felt like to walk out on stage for other people (both this year and last year) but for me, it seemed almost trivial, like a non-event. It didn't feel nearly as momentous as it seemed like it should. Based on my description my therapist would later refer to it as a foregone conclusion, a description that stuck with me given how accurately it seemed to verbalize what I was feeling. It just didn't feel big, but I <em>knew</em> that it <em>was</em>. In the grand sense, I just really didn't understand what was happening.</p>
<p>Tonight, watching the Class of 2017, I think I started to get it. The crux of my personal development was being at the <a href="https://recurse.com">Recurse Center</a>. In fact, applying to and attending the Recurse Center was without a shadow of a doubt the highlight of not just my year but my entire <em>life</em>. I love my friends and teachers at SAAS very deeply, and I still think going to SAAS was a great choice. But at the Recurse Center, I felt at home, like I belonged, in a way I just never felt in high school. Plus, it felt pretty great to live on my own in New York City, feeling like I knew my way around the subway system[1], how to get food for myself (whether at the supermarket to cook or from nearby restaurants), and just what it <em>felt</em> like to live in such an amazing place.</p>
<p>There was a moment in senior year, in Jason's English class, when I was thinking about my then-sophomore friends and wondering if I'd see them in ten or even twenty years. After all, they'd probably have separate class reunions. And right as I started to wonder what we'd all even <em>be</em> like then, it hit me that the idea of "growing up" is bullshit. No one is ever truly "grown up"; people just slide along a scale from toddler to wise elder. Every human always will be and always has been a work in progress - always growing, always changing. I am incredibly proud of all the technical work I did this year. I am unbelievably grateful and happy to have made so many amazing friends at the Recurse Center, and I feel very lucky to have such good mental health - mentally I'm probably in the best place I've ever been in my whole life. But even with all that, I know I'm still young. I still have lots of room to grow and there are more exciting opportunities ahead of me than ever.</p>
<p>When everyone's in the middle of something, I think they get lost in the moment. In my senior year, my whole life was structured around being in senior year; at the Recurse Center, my whole life revolved around the Recurse Center. Essentially, I'm describing the act of putting your head down and concentrating on something. So maybe what graduation (and important events like it) is really about is a chance to suspend time; to not be lost in the moment. A chance to, just for a second, not have your life revolve around anything in particular and instead, look at yourself and the way you've changed and continue to change over your lifetime. Like a character arc. It really is amazing, and in a way, isn't that implicitly what graduation's saying anyway? Graduation is an event designed to celebrate everything that the people on stage have accomplished - and in order to celebrate something, you have to sit back and look at it.</p>
<p>It was honestly <em>wild</em> to watch the people on stage talk about each other and their lives for the past four years, recalling both the time when I felt the <em>exact same way</em> they do now as well as just how much I, and my perspective, have changed. To the Class of 2017, as someone who was in your shoes a year ago - I know I sound stupid and clichÃ©d, but your world is about to become so much bigger than you can imagine. SAAS, which once seemed like such a monumental, immovable part of your life, will instead become small (though still important). At least, that's what happened to me. I hope it does for you, too. And I'm really excited for you guys.</p>
<p>Congratulations once again. You guys freaking did it.</p>
<p>Footnotes:</p>
<p> [1]: the operative word being "feeling", because I almost certainly didn't know my way around <em>nearly</em> as well as I felt I did</p>
]]></description><link>https://strugee.net/blog/2017/06/graduation-2017-reflections-on-365-days-of-gap-yearing</link><guid isPermaLink="true">https://strugee.net/blog/2017/06/graduation-2017-reflections-on-365-days-of-gap-yearing</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 07 Jun 2017 07:46:29 GMT</pubDate></item><item><title><![CDATA[How I accidentally started maintaining a social network with thousands of users]]></title><description><![CDATA[<p>As some of my readers (particularly Recursers) know, a couple of weeks ago I became an Invited Expert at the <a href="https://www.w3.org/wiki/Socialwg">Social Working Group</a> at the <a href="https://www.w3.org/">W3C</a> (World Wide Web Consortium). The W3C is a standards body. That means it's responsible for defining things like how things work on the web, such as how web pages are styled using CSS and how web developers can protect their apps from security vulnerabilities using <a href="https://www.w3.org/TR/CSP3/">Content Security Policy</a>.</p>
<p>My first thought when I got the email that my application had been accepted was, "<em><strong>WHOOOOOOOOO!</strong></em>" It was probably one of the most thrilling moments of my whole life. My second thought was, "how in the <em>world</em> did I get here!?" The truth is, it was almost an accident.</p>
<p>It started when I got involved in the <a href="http://pump.io">pump.io</a> project. pump.io, for those who haven't heard me talk about this endlessly (e.g. at RC), is a decentralized social network. That means that there can be multiple servers run by different people that are part of the social network, but the users on those servers can interact with each other in just the same way they could if it was just one big centralized server[1]. I first got involved in the pump.io project in August 2015. I was experimenting with different social networking software and decided to <a href="https://pump.strugee.net/">deploy</a> pump.io on my server. When I did I realized that pump... well, it didn't work very well. The web UI was kinda basic[2], everything was pretty buggy, and there were a lot of problems with the overall user experience. In fact, I know the exact day I set up pump.io (August 12th) because all throughout the experience <a href="https://github.com/pump-io/pump.io/issues/1093">I</a> <a href="https://github.com/pump-io/pump.io/issues/1094">was</a> <a href="https://github.com/pump-io/pump.io/issues/1095">filing</a> <a href="https://github.com/pump-io/pump.io/issues/1096">bugs</a> on things needing improvement. It was a shame, I thought, because this software seemed really neat. I thought it had a lot of potential.</p>
<p>After about two weeks it became clear that there was no activity in the upstream pump.io project. So after some deliberation, I ended up forking it (briefly). You can watch <a href="https://media.libreplanet.org/u/libreplanet/m/pump-io-the-federated-extensible-social-network/">this talk</a> around 16:00 to hear me talk about this a bit, though to be honest it's kind of just a footnote in the project's history. In the end Evan Prodromou, pump.io's author, ended up handing off some commit rights to community members.</p>
<p>Well, I thought, that was the end of that. Everything's smooth sailing from here on out! There were some big problems, though: the people who now had commit rights all were involved in other things and, more importantly, none of them knew JavaScript or Node.js! This makes me chuckle to this day, honestly.</p>
<p>So I started triaging issues. When people sent Pull Requests, I'd review them since it seemed like no one else was going to do it. <a href="https://github.com/pump-io/pump.io/pull/1114">#1114</a> was, as far as I can tell (or remember), the very first of these "unofficial" PR reviews. I kept going; I even reviewed Menno Vossen's <a href="https://github.com/pump-io/pump.io/pull/1136">epic PR which fixed all the tests</a> (fixing the tests being a feat which, having tried to start that work myself, I am to this day in awe of and <em>incredibly</em> thankful for). For that last one in particular, you'll note that <em>I</em> merged it, not Chris Webber. At some point in January(?), he asked me in <code>#pump.io</code> on IRC if I'd like write access to the repository, to which I said (paraphrased) "heck yes!" So he made it happen.</p>
<p>I never really intended for that to happen. However, I <em>was</em> the one doing almost all of the work. After a while it just made sense. This is what, among other things, I find so incredible about freedom-respecting software: you can just <em>do</em> things. I didn't ask anyone for permission to do those reviews. I just saw the need for a reviewer, and decided I'd help out.</p>
<p>Fast-forward to today, and I'm now an owner of the pump.io organization on GitHub. I make technical decisions about what to prioritize and what should go into pump.io core. I do a lot of the day-to-day work running the project, too, and setting up technical and policy infrastructure (with a lot of help from the community, of course, plus input from Evan). That, too, just made sense, as did my becoming an Invited Expert - I was pretty deeply engaged with the SocialWG's <a href="https://www.w3.org/TR/activitypub/">ActivityPub</a> specification already since it's based on the pump.io protocol, and I was really excited about said protocol being standardized. So I was participating pretty heavily and I think it just made sense to people in the Working Group for me to join. In fact, that also kinda happened by accident. I couldn't get edit access to the W3C wiki so we were speculating in <code>#social</code> on the W3C IRC server that it might be because I wasn't a "W3C member" or something. So some people at W3C were pinging the sysops team, etc., trying to mark me as a "trusted" user when someone - <a href="https://www.w3.org/People/Sandro/">Sandro Hawke</a>, I believe - said, "the other option is for you to just join the Working Group." To which I said, "well, but I'd have to join as an Invited Expert, and I don't think I qualify as an expert." Chris Webber's response? "You're just as much of an expert as me when I joined!"</p>
<p>tl;dr how in the world did I get here? I tried some software and got annoyed at it, so I just kind of <em>"did some stuff"</em> that led to me doing code reviews. That led to me getting involved in the decentralized social web which led to me <em>"doing some more stuff"</em> that got me involved in standards. Then because of that, I tried to edit a wiki and ended up being invited to apply as a W3C Invited Expert.</p>
<p>I mean, what the hell? Honestly. I can't emphasize enough that I didn't plan ANY of this. It just sort of... happened. And that, I think, is what's so cool about the free software community. It isn't about who you are, where you come from, or what your goals are. It's only about, do you show up? Do you show up and do awesome stuff?</p>
<p>I showed up, kind of by accident, and I now run a decentralized social network with thousands of users called pump.io.</p>
<p>What will happen if <em>you</em> show up?</p>
<p><em>Thanks so much to <a href="https://github.com/anjakefala">Anja</a> and <a href="http://jvns.ca/">Julia</a> for providing feedback on a draft version of this post.</em></p>
<p>[1]: I really hope this explanation makes sense and if it doesn't, I apologize - I use diagrams to explain this in real life.</p>
<p> [2]: Still is, but that should improve now that the technical debt work I've been focusing on for the past year is now <a href="https://strugee.net/blog/2017/03/express-4.x-in-pump.io-core">basically done</a>!</p>
]]></description><link>https://strugee.net/blog/2017/05/pump.io-accident</link><guid isPermaLink="true">https://strugee.net/blog/2017/05/pump.io-accident</guid><category><![CDATA[development]]></category><category><![CDATA[personal]]></category><category><![CDATA[pump.io]]></category><pubDate>Sat, 13 May 2017 03:51:53 GMT</pubDate></item><item><title><![CDATA[pump.io 4.0 in beta]]></title><description><![CDATA[<p>pump.io 4.0.0 is officially in beta! Whooo!</p>
<h1>Highlights</h1>
<p>This is a positively <em>huge</em> release, and I'm so excited to share it with the community. Some highlights:</p>
<ul>
<li>Express 4.x - I wrote about the significance of this change <a href="http://pump.io/blog/2017/03/express-4.x-in-pump.io-core">here</a>, but suffice to say that this significantly improves security, performance, and future maintainability</li>
<li>Performance and correctness improvements to the web UI's JavaScript</li>
<li>Better administrative experience, including the ability to specify configuration via environment variables</li>
<li>Better interoperability with the <a href="https://indieweb.org">IndieWeb</a></li>
</ul>
<h1>Upgrading</h1>
<p>The upgrade to Express 4.x and the improvements to configuration loading have the potential to break <em>some</em> existing pump.io installations, although 95% of installs should be completely unaffected. If you want to help test this beta, please set aside extra time as necessary to perform this upgrade - full documentation can be found on <a href="https://pumpio.readthedocs.io/en/latest/upgrades/3.x-to-4.x.html">ReadTheDocs</a>.</p>
<p>As always, this release will follow our normal <a href="https://github.com/pump-io/pump.io/wiki/Release-cycle">release cycle</a>, which means that the stable 4.0.0 release will go out in about a month.</p>
<h1>Test days</h1>
<p>Due to the complexity of this upgrade, we've decided to have some test days during the beta where we upgrade prominent nodes for a day, then downgrade them again. This will help expose problems earlier and make the upgrade smoother for everyone. So far Jason Self, who runs <a href="https://datamost.com/">Datamost</a>, has volunteered for this - if you're interested in joining him, please <a href="https://github.com/pump-io/pump.io/wiki/Community">get in touch</a>!</p>
<p>Happy hacking!</p>
]]></description><link>https://strugee.net/blog/2017/04/pump.io-4.0-in-beta</link><guid isPermaLink="true">https://strugee.net/blog/2017/04/pump.io-4.0-in-beta</guid><category><![CDATA[pump.io]]></category><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 03 Apr 2017 21:03:10 GMT</pubDate></item><item><title><![CDATA[Getting on board with configuration management]]></title><description><![CDATA[<p>For a long while I've really disliked configuration management. This mostly stemmed from my experience <a href="https://github.com/strugee/steevie/blob/3069f53ee82c6b1709f22285b71ccdc0e5e0bced/apache-config/apache-config.pp">managing Apache via Puppet</a>, which I found indirect and unnecessary - the only reason I did this was basically to get version control. In fact, I even started a project called <a href="https://github.com/strugee/bindslash">bindslash</a> which I literally described as "not configuration management".</p>
<p>However, last Thursday, steevie (my primary server) crashed <em>again</em>. So I went into a fallback DigitalOcean VM I'd set up the last time this had happened and updated stuff. I presented my <a href="https://strugee.net/presentation-pumpio/libreplanet/">LibrePlanet slides</a> from that. And eventually I bit the bullet and set up a secondary email server which, to my great surprise, has not received a flood of spam yet (though I'm sure it will at some point).</p>
<p>The whole ordeal really made me understand the benefit of configuration management. I would've spent less time and been less stressed if I could just plug in a config management system to get a useful failover system. So as of today, I'm on board with configuration management, and bindslash is dead.</p>
<p>I still kinda hate Puppet, so I think I'll try out Ansible and <em>maybe</em> Chef. Ansible's agentless model in particular probably makes a lot of sense for my needs. It also makes me sad to kill bindslash, since I still think it would be a useful project and there's definitely a place for it in the world. But I no longer have any reason to work on it, so I'm just going to stop pretending I'll ever finish it. If anyone is interested in that approach, talk to me and I'll happily give you the name, the repo, my thoughts on its design, etc.</p>
<p>Anyway. Now to set up outbound mail on the failover VM.</p>
<p>*big sigh*</p>
]]></description><link>https://strugee.net/blog/2017/03/getting-on-board-with-configuration-management</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/getting-on-board-with-configuration-management</guid><category><![CDATA[development]]></category><category><![CDATA[sysadmin]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 28 Mar 2017 20:59:56 GMT</pubDate></item><item><title><![CDATA[RC week 11]]></title><description><![CDATA[<p>This is week 11 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 7</h2>
<p>Arrived ~13:30, departed ~22:45, total time at RC 9h15m.</p>
<p>Brought in cookies and spent a lot of time discussing things on Zulip, honestly. Also figured out when I'm teaching things for Web Dev 101. Spent most of the day, however, writing about <a href="https://strugee.net/blog/2017/03/default-secure-systems">default-secure systems</a>.</p>
<h2>Day 8</h2>
<p>Arrived ~16:15, departed ~21:00, total time at RC 4h45m.</p>
<p>Arrived super late today because I woke up in the morning, saw the blizzard outside my window, and said "hell no." When I <em>did</em> go in, the blizzard was still going, so I put on snow pants, snow boots, a thick sweater and my winter jacket, and my hat and gloves. Which took a while.</p>
<p>Spent some time discussing 10 different reasons not to put arsenic in the milk with <a href="https://jmeggesto.github.io/">Jackie</a> and <a href="https://github.com/andrewrk">Andrew</a>, which she later wrote a blog post about <a href="https://jmeggesto.github.io/blog/2017/03/poisonmilk">here</a>. Spent the rest of the day doing <a href="https://github.com/straticjs/RFCs/issues/2">maintenance</a> on some Stratic modules. Also spent a little time on the phone with my dad diagnosing my server's disk problems. I had him reseat the SATA cables, with no effect, unfortunately.</p>
<h2>Day 9</h2>
<p>Arrived ~12:15, departed ~23:25, total time at RC 11h10m.</p>
<p>Didn't do a lot of new stuff, but took care of some miscellaneous business. In particular I did some work on polishing <a href="https://github.com/hubot-scripts/hubot-seen">hubot-seen</a>, including putting out a 1.0.0 release (and then a 1.0.1 release when that turned out to have broken the world). In the evening, <em>finally</em> found the bug preventing us from upgrading pump.io to Express 4.x, which was unbelievably satisfying. Turned out that the bug was in some test code, not the application itself, and so I had been misreading the stack trace for <em>months</em>. (The top item was a test file, but I incorrectly assumed that that was just some test code invoking a bunch of internal stuff. Nope.) Also has a meeting with some of the other Winter 1s about feelings and the end of the batch and stuff.</p>
<p>Last but not least, caught up on weekly blogging. (I've been really bad for a while now...)</p>
<h2>Day 10</h2>
<p>Arrived ~11:45, departed ~00:00, total time at RC 12h15m.</p>
<p>Did a ton of pump.io work. I merged the Express 4.x branch, then went in and did a bunch of other more minor dependency upgrades. Also went to a soldering workshop run by <a href="https://github.com/eeclaire">Claire</a> immediately before presenting HTTPS Part 2 in the afternoon.</p>
<p>In the evening, went to presentations and then game night, where I spent the entire time playing poker. I put in $3 and got back $7.95 (read: $8). Sick.</p>
<h2>Friday</h2>
<p>Arrived ~13:30, departed ~21:45, total time at RC 8h15m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Did some work on improving pump.io's dependency situation. The result is a system that is very, very close to being 100% up-to-date, which I'm <em>super</em> proud of to be honest. That also let me turn on dependency security monitoring through <a href="https://nodesecurity.io/orgs/pumpio/projects/32213bb8-f9a6-4dd0-8fc6-5caa8ea5f8fc">Node Security Platform</a>, with plans to enable <a href="https://greenkeeper.io">Greenkeeper</a> as well. Had the monthly meeting in the middle of all that which went really well and was very productive.</p>
<p>In the evening, went to Bottle Share, then put pump.io on the Linux Foundation's <a href="https://bestpractices.coreinfrastructure.org">best practices badge app</a>, the result of which you can find <a href="https://bestpractices.coreinfrastructure.org/projects/804">here</a>.</p>
<h2>Executive summary</h2>
<p>Well, I got a lot done on pump.io (and Stratic) this week. So it was relatively productive. But I did basically nothing that was personally productive (i.e. that pushed me forward as a programmer). Hopefully next week will go better.</p>
<p>Total time at RC 45 hours 40 minutes; cumulative time 510 hours 30 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-11</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-11</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 21 Mar 2017 02:49:25 GMT</pubDate></item><item><title><![CDATA[Express 4.x in pump.io core]]></title><description><![CDATA[<p>So I thought I'd take a moment to announce that the upgrade from Express 2.x to Express 4.x is <a href="https://github.com/pump-io/pump.io/pull/1208">finally complete</a>! I fixed up the last couple test failures last Wednesday, and the branch got merged on Thursday.</p>
<h1>A long time coming</h1>
<p>Believe it or not, the work to do this upgrade started almost an entire <em>year</em> ago. Express 2.x has been outdated and unmaintained for a long time now, so upgrading has been a high priority. However, it wasn't as simple as adjusting a version number - there were a staggering number of changes that needed to be made due to Express deprecating, removing, and changing things around. One of the most significant problems was the fact that the old template system that we used, utml, was not compatible with Express 3.x and above. That meant that we had to rewrite every single template into a modern language - an effort that resulted in <a href="https://github.com/pump-io/pump.io/pull/1170">over a thousand lines changed</a>!</p>
<p>However, the time for Express 4.x has finally arrived. With that and some other trivial version bumps, I'm proud to announce that pump.io is fully up-to-date in terms of dependencies with only three, non-critical exceptions. Whooooo!</p>
<h1>Immediate benefits</h1>
<p>There are a lot of reasons this is immediately awesome:</p>
<ol>
<li>Express 4.x fixes significant performance problems that existed in Express 3.x</li>
<li>Relatedly, Express 4.x fixes some security problems present in 3.x</li>
<li>The fact that our dependencies are <em>finally</em> up-to-date means that we can (and do!) now make use of <a href="https://greenkeeper.io/">Greenkeeper</a> and the <a href="https://nodesecurity.io/orgs/pumpio/projects/32213bb8-f9a6-4dd0-8fc6-5caa8ea5f8fc">Node Security Platform</a> to automatically track dependencies to make sure they're up-to-date and not introducing security vulnerabilities</li>
</ol>
<p>That last one is particularly significant. Greenkeeper and NSP will continuously monitor the project's dependencies and automate away a lot of the pain that's associated with keeping pump.io up-to-date. Everyone will get a more secure and stable codebase because of this setup.</p>
<h1>Looking forward</h1>
<p>The Express 4.x upgrade is a big change, and it's definitely possible that stuff has broken. We want to make sure that breakage doesn't make it into production. This change went into pump.io 4.0, which will go through our normal <a href="https://github.com/pump-io/pump.io/wiki/Release-cycle">release cycle</a>. That means it'll be in beta for a month before being released. As a part of that, <a href="https://jxself.org/">Jason Self</a> - who's kind enough to administer <a href="https://datamost.com/">Datamost</a> - has agreed to have a test day where Datamost upgrades to the beta for a day, then downgrade it again. This test day will give us much wider exposure than we would've gotten otherwise, which will be incredibly valuable feedback in the effort to identify and fix regressions. We haven't set a date yet, but if you'd like to join Jason in helping us find bugs, please get in touch with <a href="https://github.com/pump-io/pump.io/wiki/Community">the community</a>. We'd love your help.</p>
<p>Beyond the immediate release, though, there's still things to look forward to. Express 4.x gives us a better way to structure routing code, and a refactor to use this structure <a href="https://github.com/pump-io/pump.io/issues/1232">is planned</a>. There's a lot of room for improvement. But really, the most important benefit is this: technical debt is a far less pressing issue than before. That means that we can shift focus and spend more time fixing user-facing bugs, adding useful features, and generally improving the experience for our users. I couldn't be more excited.</p>
]]></description><link>https://strugee.net/blog/2017/03/express-4.x-in-pump.io-core</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/express-4.x-in-pump.io-core</guid><category><![CDATA[pump.io]]></category><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 20 Mar 2017 20:22:27 GMT</pubDate></item><item><title><![CDATA[RC week 10]]></title><description><![CDATA[<p>This is week 10 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 35</h2>
<p>Arrived ~13:00, departed ~21:30, total time at RC 8h30m.</p>
<p>Decided (in the morning) to sleep in because honestly, I was just really behind on sleep.</p>
<p>Didn't do a whole lot today. Took care of the monthly pump.io release, but spent most of the day writing <a href="https://strugee.net/blog/2017/03/driftless-at-1000-mph">Driftless at 1,000 mph</a>. In the evening (i.e. after the Iron Blogger meeting) I spent some time fixing ejabberd's configuration to use the new access control syntax (I'd rewritten the config a while back, but hadn't deployed it yet because it broke logins).</p>
<h2>Day 36</h2>
<p>Arrived ~10:40, departed ~23:40, total time at RC 13h0m.</p>
<p>Spent basically all day working on <a href="https://github.com/strugee/realtime.recurse.com">realtime.recurse.com</a>. I (mostly) finished up the bits that watch the filesystem and dispatch events (including the "periodic" submission logic), then started in on an automatic update mechanism. I'm pretty pleased with how it's turning out - I think it's pretty elegant. And, it's secure - updates are required to be cryptographically signed by yours truly. Went out to Black Burger with a <em>bunch</em> of people before going to Fat Cat in the evening. Then came back, worked on the updater a little more, and went home.</p>
<h2>Day 37</h2>
<p>Arrived ~14:40, departed ~23:20, total time at RC 8h40m.</p>
<p>Overslept by accident this morning. Spent a bit of time in the afternoon dealing with email, then focused on realtime.recurse.com - basically I was just working on the autoupater I started yesterday. My Python is <em>definitely</em> improving!</p>
<p>I'm actually really pleased with the updater. It's pretty elegant, I think. Basically whenever the server sees a request coming from the client, it checks the <code>User-Agent</code> header to see if the client's out of date and, if so, sends back an <code>X-Requires-Upgrade</code> header. Upon receiving this header the client will go fetch version information, which it'll use to download and verify an update bundle cryptographically signed by me. Yay for secure updates, and yay for simplicity! (Note that this design basically just reuses the connections the client is already making to the server, so it doesn't have to poll for updates all the time.)</p>
<p>I also spent a couple hours talking with Mikhail, discussing a lot of things - ranging from how Node.js's event loop works to the <code>is</code> keyword in Python to static site generator architecture compared to dynamic site architecture.</p>
<h2>Day 38</h2>
<p>Arrived ~9:50, departed ~23:00, total time at RC 13h10m.</p>
<p>Woke up, completely naturally, around 7 AM despite going to sleep at 3 AM. This was so surprising - and this is a true story - that I thought I had woken up at 7 PM and missed the entire day, including Security Club, Abstract Salad Factory, and Thursday night presentations. I was <em>really</em> mad, honestly. But then I looked at my watch and realized that I was on 24-hour time but it didn't say "19:00" and also my alarms were in the future and my phone was in 24-hour time too and also Anja on Zulip said "?" when I said I'd slept through Security Club. Despite the overwhelming evidence in the end, though, I still had a weird feeling that it was 7 PM. So that's the story of how, for a good 5 or 10 minutes, I genuinely believed I'd slept through the entire day.</p>
<p>Once I got to RC, I spent the morning finally(!) merging in a bunch of upstream <code>ejabberd.yml</code> config changes to steevie's ejabberd configuration, which got me closer to fixing the awful spam problem I have. Then I went to Abstract Salad Factory, followed by Security Club. Then in the afternoon (and after presentations) I started reading <a href="https://www.freebsd.org/">FreeBSD</a> documentation since that's what I'm running my new Tor relay on - as I discovered a couple days ago, my old one apparently got hung during boot and was consuming 100% CPU due to the kernel image being corrupted or something. I chose FreeBSD because a) it's a rock-solid system, b) it's a good opportunity to gain experience with administrating a BSD, and c) it increases the diversity of the Tor network. Also, had a conference call in the afternoon with the <a href="https://www.eff.org/">EFF</a> and Paul from <a href="https://ta3mseattle.org/index.php/Main_Page">TA3M Seattle</a> about TA3M Seattle joining the EFF's <a href="https://www.eff.org/electronic-frontier-alliance">Electronic Frontier Alliance</a>, which was exciting for everyone.</p>
<h2>Friday</h2>
<p>Arrived ~13:00, departed ~22:30, total time at RC 9h30m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Didn't do a whole lot of coding. Spent a while helping <a href="https://jxself.org/">Jason</a> debug <a href="https://datamost.com/">Datamost</a>'s 3.0.0 upgrade (which apparently broke uploads). Attended presentations for the RC Game Jam, then fixed the documentation that caused Jason's problems. Spent a little bit of time polishing the website and README, too.</p>
<p>In the evening, fixed people being banned from ejabberd MUCs, then proceeded to fix my spam problem. Whoooooo! Then I kept working on my Tor relay.</p>
<h2>Executive summary</h2>
<p>Like any week, this had moments where I wasn't very productive. But overall I think it was pretty good - I made a lot of progress on realtime.recurse.com (and improved my Python in the process), and I made a lot of progress on setting up my Tor relay again (and learned a bunch about FreeBSD in the process). Also, I fixed my ejabberd spam problem. I learned nothing from that, but thank <em>god</em> I did it because the spam problem was honestly <em>awful</em>. The one issue was that I just didn't do a very good job getting up and making it to checkins.</p>
<p>Total time at RC 52 hours 50 minutes; cumulative time 464 hours 50 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-10</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-10</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 15 Mar 2017 23:42:40 GMT</pubDate></item><item><title><![CDATA[Default-secure systems]]></title><description><![CDATA[<p>So recently I presented on <a href="https://strugee.net/presentation-operational-security/">operational security</a> and then started in on the nightmare that is <a href="https://strugee.net/presentation-https-deployment/">HTTPS deployment</a>. And like I did with <a href="https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers">language-level security</a> (I <em>still</em> need to write part 2 of that post), I thought to myself, this is so difficult. Why isn't there something that will do this for me? That's what my latest project is.</p>
<p>Here's the tl;dr:</p>
<pre><code>type(app)
=&gt; Django/Express.js/etc. app
secure_system(app)
=&gt; Docker image
</code></pre>
<p>Or in other words, you'll be able to take an existing web app that you've written, run it through this system, and it will spit out a complete, reasonably-secure system image.</p>
<p>Let's step back.</p>
<h1>The status quo</h1>
<p>Currently, when a developer wants to run a web app, they can either use something like Heroku, which is fully manged, or a VM from DigitalOcean or Amazon EC2 or something. There are a variety of reasons you might not want to use Heroku, but the only other option is a VM - and with a VM, you get a bare system where you have to set up everything from scratch. Lots of developers just don't have the operational experience to do this properly or securely, but it's not like they can go and get an operations team to do it for them. So they end up with systems that may have active security problems as well as little to no defense-in-depth mitigations for when security inevitably fails. Security is just another operational concern the developer has no time and no expertise to deal with, so it just doesn't happen. The developer spins up a VM, gets it to where it "works" and then moves on. <strong>This is not good enough.</strong></p>
<p>I don't want to create a false dichotomy, though: this is not the developer's fault. Everyone has conflicting priorities and it's unreasonable to expect the developer to spend lots of time learning to administrate systems so that they can then spend even more time, you know, administering systems. The problem is that there just isn't enough options available - we have to provide something better.</p>
<h1>A middle ground</h1>
<p>This is what my project is about: creating a middle ground between fully-managed deployment platforms and barebones, setup-from-scratch VMs.</p>
<p>This project rests on the idea that operational security (at least, in a single-server, single-admin context) flows from consistency, least privilege, and proactive, defense-in-depth security measures. Here are a couple core design goals:</p>
<ol>
<li>Meet developers where they are. Configuration management like Puppet is a great way to enforce consistency, but it adds a level of indirection and is just another thing that people running hobbyist projects don't have time to learn.</li>
<li>Tight integration with apps - this excludes more obscure types of web applications, but gives us a better footing to set up a solid deployment environment. It also may let us integrate more tightly with things like Content Security Policy in the future.</li>
<li>Support virtual hosting. The ability to run multiple apps while paying for a single VM is a compelling reason people go with VMs over e.g. Heroku - we won't be helping anyone if we leave this out.</li>
<li>Upgrades are optional. Any system image created by this project will present a system that is organized and can be maintained and modified by hand without breaking everything.</li>
<li>Upgrades are possible. Tight app framework integration will aid with putting data into well-known places that can be backed up and migrated to a new image generated by a newer version of this system.</li>
<li>Not designed for "real" production environments. Any project that has a dedicated operations person should not be using this; they should be rolling their own custom environments with something like Puppet. Accordingly, there won't be compromises in security in favor of flexibility - it's designed to cover 75% of cases "pretty well", which is still better than the status quo for smaller projects (almost 100% of cases don't have any security at all).</li>
</ol>
<p>I'd also like to highlight one really important decision: the output is complete system images. Probably at first this will mean Docker containers but this could easily be turned into VM images. This is a critical part of the design because it allows us to make broad, sweeping changes - for example, preferring system components written in memory-safe languages, replacing OpenSSL with LibreSSL, or creating systemd unit files that lock down service runtime environments to reduce the impact of a compromise. These improvements aren't possible unless we control the whole system. And because upgrades are optional but possible, the developer can get security improvements by "just" upgrading a component that they use, in the same way that they'd upgrade a library or something, as opposed to security being a continuous process they have to worry about. Again, obviously not perfect - but much better than the status quo.</p>
<p>I hope to have a MVP out Real Soon Nowâ¢. But in the meantime, if you have thoughts, feel free to reach out.</p>
]]></description><link>https://strugee.net/blog/2017/03/default-secure-systems</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/default-secure-systems</guid><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 13 Mar 2017 20:59:17 GMT</pubDate></item><item><title><![CDATA[RC week 9]]></title><description><![CDATA[<p>This is week 9 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 31</h2>
<p>Arrived ~10:30, departed ~15:15, arrived ~17:30, departed ~1:30, total time at RC 8h45m.</p>
<p>There were only two people in my checkin group this morning, and one of them was me. We thought about joining another checkin group, but it was confusing so we did it with just us.</p>
<p>Didn't really do a whole lot for the rest of the day. I fixed up a couple minor problems on strugee.net. Also I finally(!) fully caught up on blogging and went out to lunch with a bunch of people, including <a href="https://www.recurse.com/residents#Nelson-Elhage">Nelson</a>, the new resident. He's awesome. We had some seriously interesting discussions about the recent CloudFlare incident, as well as the work he did while at Ksplice.</p>
<p>Left early to do laundry, then came back for Nelson's talk.</p>
<p>Spent a lot of time in the evening cleaning up the <a href="https://strugee.net/blog/">pump.io homepage</a> - I removed a bunch of duplicated content, reordered the remaining text to put the important stuff first, and imported all the pump.io-related posts on my personal blog into <a href="http://pump.io/blog/">http://pump.io/blog/</a>.</p>
<h2>Day 32</h2>
<p>Arrived ~11:30, departed ~21:40, total time at RC 10h10m.</p>
<p>Missed my checkin by a wide margin because a) after I realized I just couldn't make it by 10:30 I gave up and had a nice relaxed breakfast and b) I looked at checkins.recurse.com and realized that I was the only one in my checkins group.</p>
<p>Went out to Taim for lunch relatively soon after that. Didn't do a whole lot for the rest of the day, honestly - although I did go for a walk to a park with some folks. Also, tested out the Signal videocalling beta with <a href="https://matthewkelsey.com/">Matt</a>, which worked pretty damn well, I gotta say.</p>
<h2>Day 33</h2>
<p>Arrived ~10:40, departed ~1:45, total time at RC 15h5m.</p>
<p>I kinda tried to make it in for checkins this morning, but not really because I still hadn't fixed the "I'm the only one in my checkin group" problem. Didn't really do much today, honestly.</p>
<p>Went out to lunch with <a href="https://github.com/ant6n">Ant6n</a> and <a href="https://github.com/andrewrk">Andrew</a> and had a lot of interesting discussions with them, ranging all the way from <a href="http://ziglang.org/">Zig</a> to x86 hardware - did you know that internally x86 is actually essentially a VM implementation?</p>
<p>Spent a lot of time keeping Eliana company in Hopper late in the evening.</p>
<h2>Day 34</h2>
<p>Arrived ~11:05, departed ~17:55, total time at RC 6h50m.</p>
<p>Went to Nelson's "my first kernel module" talk immediately upon arriving at RC, which was <em>awesome</em>. I had some interesting conversations with him afterward, too, where I confirmed a theory I had about some weird btrfs-related behavior I'd seen a long time ago (where I <code>kill -9</code>'d an obviously hung <code>btrfs</code> process, which refused to die anyway). We also spent some time trying to figure out why <a href="http://unix.stackexchange.com/q/345285/29146">benchmarking loopback network performance</a> gave some weird results, which was quite informative.</p>
<p>Didn't do a whole lot after lunch. Left halfway through presentations to go to a play with Ant6n which unfortunately (due to a water incident with the subway system) I didn't quite make it to.</p>
<h2>Friday</h2>
<p>Arrived ~15:10, departed ~23:10, total time at RC 8h0m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Woke up at a decent time but didn't really bother to get up or do anything, so I arrived relatively late to RC. Spent some time reading TOTP in preparation for the RFC reading group meeting (which ended up not happening) and then went to the RC Game Jam kickoff. Spent most of the rest of the day discussing game design with my team before getting dinner and hanging out in Babbage for Bottle Share Friday, even though there weren't that many of us (particularly since James was doing stuff in Babbage) and we didn't have any bottles to share. Oh well - it was still fun.</p>
<p>Talked with <a href="https://github.com/ebb-tide">Deniz</a> and <a href="http://www.aberke.com/">Alex</a> and some other folks (I've forgotten who, to be honest) before heading home.</p>
<h2>Executive summary</h2>
<p>Most of the "interesting" stuff that happened this week had to do with the resident. Got a little done codewise, but not that much. I'd say this week was 50/50 in terms of productivity.</p>
<p>Total time at RC 48 hours 50 minutes; cumulative time 412 hours 0 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-9</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-9</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 06 Mar 2017 23:39:34 GMT</pubDate></item><item><title><![CDATA[Driftless at 1,000 mph]]></title><description><![CDATA[<p>Last week I published <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a>. This post is, in some ways, the antithesis of that, and it will be very emotional and messy. Here be dragons.</p>
<hr>
<p>Throughout my time at RC I've noticed only one thing is consistently difficult for me: focusing on hard things. Intellectually I love the idea of challenging myself. And I find that when I start to work on things that are new and not easy, it feels good and I tend to keep working on those things, because they're interesting. But starting is something that I just don't do frequently enough, and so I find that I haven't progressed as a programmer nearly as much as I would like to have.</p>
<p>What is productivity?</p>
<p>Merriam-Webster defines it like this:</p>
<blockquote>
<ol>
<li>
<p>the quality or state of being productive</p>
</li>
<li>
<p>the rate per unit area or per unit volume at which biomass consumable as food by other organisms is made by producers</p>
</li>
</ol>
</blockquote>
<p>And "productive" is defined like so:</p>
<blockquote>
<ol>
<li>
<p>having the quality or power of producing, especially in abundance</p>
</li>
<li>
<p>effective in bringing about</p>
</li>
<li>
<p>a) yielding results, benefits, or profits; b) yielding or devoted to the satisfaction of wants or the creation of utilities</p>
</li>
<li>
<p>continuing to be used in the formation of new words or constructions</p>
</li>
<li>
<p>raising mucus or sputum (as from the bronchi)</p>
</li>
</ol>
</blockquote>
<p>By definitions 1-3 I certainly seem to have been productive; I've written a lot of code, much of which is useful. But useful to <em>whom</em>, and for what purpose?</p>
<p>I sometimes feel as if I'm just generating more and more code without any guiding process, as though I'm wasting my time even though concretely I'm getting a <em>lot</em> of things done - driftless even though I'm churning out work at an extremely high rate. Is this <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">imposter syndrome</a>? Or are my worries legitimate?</p>
<p>Maybe a better way to frame this question is to split it in two - am I being productive for myself, and am I being productive for the community - the two things that are currently important to me personally.</p>
<p>I think I am failing at being productive for myself, in some really important ways. I'm also succeeding in some - for example, I used to wish I had an engine to run my blog, and now I have <a href="https://github.com/straticjs">such an engine</a>. But in others I am failing.</p>
<p>What is the purpose of RC? Why am I here?</p>
<hr>
<p>recurse.com <a href="https://www.recurse.com/about#who-comes-to-the-recurse-center">says this</a> about people who come to RC:</p>
<blockquote>
<p>The Recurse Center is for people who want to become better programmers. We are not startup school nor are we a bootcamp: Our focus is helping people become better programmers, not building prototypes, and we're not a training program for web developers.</p>
<p>Because there is no certification or grading, the only reason to come to the Recurse Center is to become a better programmer. As such, you will find kindred spirits and tremendous energy. We look for smart, friendly, self-directed, intellectually curious people who enjoy programming and want to get dramatically better.</p>
</blockquote>
<p>More directly, <a href="https://www.recurse.com/manual">the manual</a> has this to say:</p>
<blockquote>
<p>You should be here primarily because you want to become a better programmer and spend the majority of your time here programming and doing things directly related to programming.</p>
<p>Well, we could ask you to be respectful of speakers and keep conversations on-topic in the Recurse Center space during the day (i.e. if you want to take a break and chat about your weekend, go grab a coffee).</p>
</blockquote>
<p>However, as <a href="https://haroldtreen.com">Harold</a> points out, that <a href="https://haroldtreen.com/tech/recurse/2017/01/27/recurse-center-return-statement/">isn't necessarily an accurate picture</a> of what RC is about. I think a lot of what it's really about is the people who are in the space with you. I've sure had a wonderful time with the people. Does that mean I'm "succeeding"?</p>
<p>Then there's the teaching.</p>
<hr>
<p><img src="/images/anja-teaching.jpg" alt="Screenshot of a Zulip message where Anja says &quot;thank you AJ for teaching us so many things. :)&quot;"></p>
<p>This is referring to the fact that I teach at Security Club every week, plus my volunteering to run a workshop or two for Beginner's Club and Web Dev 101.</p>
<p>Practically speaking, I get very, very little out of teaching at RC. Sometimes it helps solidify (or just plain remind me of) the concepts I teach, but this is the exception, not the norm. So in that sense by spending time teaching, I'm "failing" at being productive for myself. But it seems clear to me that people get a lot out of the time I spend, so I seem to be very productive for the community.</p>
<p>Equally importantly I <em>love</em> teaching. I qualified the previous paragraph with "practically speaking" because emotionally teaching is something that's very beneficial to me. Does that mean I'm "succeeding"? Does it mean I'm "failing" and "succeeding" at the same time?</p>
<p>I honestly don't know.</p>
]]></description><link>https://strugee.net/blog/2017/03/driftless-at-1000-mph</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/driftless-at-1000-mph</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 06 Mar 2017 21:27:20 GMT</pubDate></item><item><title><![CDATA[RC week 8]]></title><description><![CDATA[<p>This is week 8 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 27</h2>
<p>Arrived ~10:35, departed ~0:30, total time at RC 13h55m.</p>
<p>Had a nice discussion about Stratic in my checkin group this morning. After that I went to the Capture The Flag introduction workshop, then spent essentially the entire rest of the day finishing up <a href="https://strugee.net/blog/2017/02/from-static-to-stratic-part-1">static to Stratic</a> (which included, in a truly horrifying fashion, me rewriting and force-pushing the demo repository's history a good four times or so) so I'd have a post up for the iron bloggers meeting. Also spent some time fixing some bugs in <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> and published the beta 2 release with those fixes. Closed out the evening by digging into a remark problem where <code>&lt;script&gt;</code> tags would be stripped from posts. Ended up just asking on Gitter.</p>
<h2>Day 28</h2>
<p>Arrived ~10:30, departed ~20:40, total time at RC 10h10m.</p>
<p>Continued to investigate the remark problem based on replies received overnight - turns out it was a bug in remark fixed in a release that had gone out the door literally the same day I asked. After that I spent the day upgrading <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> (which, remember, was originally scaffolded <a href="https://strugee.net/blog/2014/12/new-blog-new-site">years ago</a>) to newer and newer releases of <code>yeoman-generator</code> until it used <code>yeoman-generator@latest</code>. Then I spent time adding some basic tests - they're kind of just smoketests for now (are the correct files generated, does <code>gulp serve</code> work) but I <a href="https://github.com/straticjs/generator-stratic/issues/11">intend</a> to expand them. Also moved over some issues to the new <a href="https://github.com/straticjs/RFCs">straticjs/RFCs</a> repository and attended Casual Presentations.</p>
<h2>Day 29</h2>
<p>Arrived ~10:50, departed ~20:35, total time at RC 9h45m.</p>
<p>Didn't do a whole lot codewise today. However, I did teach Unix fundamentals for Beginner Club, which went pretty well - I just spent the entire time in the commandline, demonstrating different commands. We spent a little time talking about shell scripting, but not much. I forgot to cover conditionals, which was dumb since they're pretty weird in shell scripting. Spent some time in the afternoon starting a draft of <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a></p>
<p>Watched Kiki's Delivery Service in the evening.</p>
<h2>Day 30</h2>
<p>Arrived ~10:35, departed ~00:05, total time at RC 13h30m.</p>
<p>Finished and published <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a>. Presented <a href="https://strugee.net/presentation-cryptography-basics">cryptography basics</a> at Security Club, then spent a lot of time fixing miscellaneous items on steevie. In particular ejabberd was apparently configured to use a standalone certificate bundle (instead of symlinking to something in <code>/etc/letsencrypt/live</code>) - this was because ejabberd requires the private key and the full chain to be in the same file. TLS certificate renewal didn't properly update this bundle, so XMPP client connections weren't working. ZNC was broken in the same way, so I fixed both of those. I also spent some time setting up a system to publish everything custom in <code>/usr/local</code> <a href="https://github.com/strugee/steevie-usr-local">on GitHub</a> so that it's public and version-controlled. So that's nice.</p>
<h2>Friday</h2>
<p>Arrived ~15:50, departed ~1:00, total time at RC 9h10m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Came in super late (though I woke up earlier). Almost immediately after that I attended an initial meeting about starting an RFC reading group (an idea I floated on Zulip a couple days ago). Spent most of the day poking at IETF things as well as responding to <a href="https://github.com/hubot-scripts/hubot-seen">hubot-seen</a> PR comments. I just got write access! \o/</p>
<p>Closed out the evening by attending Bottle Share Friday, where I had a long discussion with <a href="http://www.aberke.com/">Alex</a> about running my own email server (which spun off into a discussion of how completely terrible and busted email is), followed by a long discussion about whether Apple's release schedule for Safari and attitude towards new web features and third-party iOS rendering engines is justifiable.</p>
<h2>Saturday</h2>
<p>Arrived ~11:15, departed ~23:30, total time at RC 12h15m. Saturday doesn't count as a day because RC is not in session.</p>
<p>Marathoned Lord of the Rings today. The showing was small and people drifted in and out but most of the time there were a couple people watching, which was fun. The original plan was to watch the director's cut versions, watching The Return of the King on Sunday, but we ended up watching the regular versions because you can't rent the director's cuts off Amazon, and I wasn't about to pay $30 for movies that I <em>already own</em> on DVD back home. We probably would've still watched on Sunday, except that I went out to get pizza for dinnr and found out that it was pouring rain (with thunder/lightning and everything). So I decided we'd watch The Return of the King and wait for the rain to let up, which worked beautifully.</p>
<p><a href="https://github.com/Husseinfarah93">Hussein</a> came in just as I was about to leave and stated that he almost had a heart attack because he sprinted literally from his apartment to Duane Reade, which truthfully was absolutely <em>hilarious</em>. We had some fun wandering around Duane Reade trying to find soap (which I needed to buy) before we both headed home.</p>
<p>(As a side note, my favorite brand of mac 'n' cheese by far is Annie's, which my local supermarket does not carry. But apparently Duane Reade does!? Wat???)</p>
<h2>Executive summary</h2>
<p>This week was weirdly divided - some parts were hyper-productive and some parts were pretty terrible. I certainly got a lot of work done on Stratic, and I taught a lot. But I didn't really do a good job of working on stuff that pushed my programming abilities forward.</p>
<p>Total time at RC 68 hours 45 minutes; cumulative time 363 hours 10 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-8</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-8</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 01 Mar 2017 19:11:19 GMT</pubDate></item><item><title><![CDATA[RC week 7]]></title><description><![CDATA[<p>This is week 7 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 23</h2>
<p>Arrived ~10:00, departed ~21:45, total time at RC 11h45m.</p>
<p>Didn't get a whole lot done today, mostly because we were all welcoming the Spring 1s - I went out to lunch with some of them and participated in Code Dojo in the afternoon (<a href="https://github.com/adityavkk">Aditya</a> and I solved the challenge in <code>bash</code>, which was pretty interesting an also hilarious[1]). However, I did do some maintenance on <a href="https://gplenforced.org">gplenforced.org</a>. I did, however, start a project to display activity in 455 Broadway in realtime which I'm pretty exited about.</p>
<p> [1]: Aditya asked me "so can you just cast a string to an integer in <code>bash</code> or...?" and when I said no he looked at me and asked how in the world we could complete this task - not realizing that the correct question is, of course, "does <code>bash</code> have a type system?" The answer to which is no, no it does not.</p>
<h2>Day 24</h2>
<p>Arrived ~14:30, departed ~1:10, total time at RC 10h40m.</p>
<p>Spent most of today working on realtime.recurse.com - I got the basic API working, so you can POST to the server and it'll handle expiry properly. Also spent a lot of time blogging for the Iron Blogger meeting (in which I got sentenced to use <code>vim</code> for the week instead of Emacs for not writing a post a couple weeks ago).</p>
<h2>Day 25</h2>
<p>Arrived ~10:30, departed ~19:10, total time at RC 8h40m.</p>
<p>Spent the day catching up on various things, notably putting out a new pump.io beta that backported some regression fixes. In the evening I spent most of my time finishing up a mid-year college application form before videocalling with a friend in college.</p>
<h2>Day 26</h2>
<p>Arrived ~10:35, departed ~1:05, total time at RC 14h30m.</p>
<p>Spent some time working on server stuff today. Other than that though I didn't do much of anything.</p>
<h2>Friday</h2>
<p>Arrived ~16:20, departed ~1:45, total time at RC 9h25m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Worked on <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> today. I fixed some bugs and disabled some functionality that wasn't complete (and was non-trivial to complete). Published a beta 0 in the evening.</p>
<h2>Executive summary</h2>
<p>This week was... <em>okay</em> in terms of productivity. It started off relatively good, slipped a fair amount in the middle, and then somewhat came back at the end of the week. I did, however, check off some semi-longstanding issues on my todo list. So that's nice.</p>
<p>Total time at RC 55 hours 0 minutes; cumulative time 294 hours 25 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-7</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-7</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 27 Feb 2017 20:14:03 GMT</pubDate></item><item><title><![CDATA[How I passed 2k GitHub contributions]]></title><description><![CDATA[<p>So the other day I logged into GitHub and saw something crazy:</p>
<p><img src="/images/github-2k-contributions.jpg" alt="Screenshot of my GitHub contribution graph showing 2,054 contributions over the past year"></p>
<p>How in the hell did I end up with that many contributions? Well, I think I know why - it happened because of a couple related, small habits I have. I thought I'd share them with everyone else as a sort of trivia - maybe you can adopt these habits too! (Although hopefully because you think they're good ideas, not because you just want to make yourself look cool on GitHub.)</p>
<h2>Fix typos</h2>
<p>If projects are freedom-respecting, that means that anyone is welcome to contribute if they're able to offer something valuable. How many times have you seen a typo in some docs? GitHub makes it super, super easy to fix these (just click the pencil icon in the upper-right of GitHub file views), and they're a fantastic way to contribute a little back to projects. Even if you aren't reading docs on GitHub, it often doesn't take that much time to find where they're hosted (which is frequently GitHub anyway). Really good docs will even have a link to their source right on the generated page.</p>
<p>So whenever I see a typo, I send a Pull Request. It's become an automatic response to seeing something that needs fixing, and is pretty routine for me nowadays.</p>
<p>Oftentimes there are changes that aren't as easy as a typo, but are still super easy to fix. Take <a href="https://github.com/Homebrew/brew/pull/1634">this Homebrew PR</a> - I authored it on a tablet and it took me under 3 minutes to make the suggested change[1]. That's not a lot of effort, and it'll help lots of people looking for the Homebrew change log. The next time you find yourself thinking "it kinda sucks that..." ask yourself - can I fix this myself? And if you can, go for it! Even if you screw up, I promise most projects will want to help you out instead of making fun of you[2] - as someone who runs several freedom-respecting projects, I know that getting new contributors is very, very valuable and because of that I'll do a lot to make contributing a good experience. I would encourage everyone to, as Mike McQuaid puts it in that Homebrew PR, "be the change you want to see in the world."</p>
<p> [1]: of course, that's partly because I'm pretty good at git and grok things like <code>rebase -i</code>. But even if that's not you and it would take you longer, it sounds like a great opportunity to improve your git skills to me!</p>
<p> [2]: I feel obligated to point out that not every project is like this - there are some projects that have a terrible culture (*coughcough*Linuxkernel*cough*). Screw them. They're not that common in my experience and it's their loss, anyway. Don't let them deter you from trying to improve things outside of their bubble of suck.</p>
<h2>File issues</h2>
<p>I just talked about making small changes whenever you see something you can improve with a couple minutes' time. But what if you're in a hurry, or it would take longer?</p>
<p>Filing issues is a super easy way to solve this. Get into the habit of filing issues for everything that irks you[3] - you're not allowed to say "such-and-such a project sucks because it's buggy!" when you haven't told the developers about the bug you're experiencing!</p>
<p>Filing issues also takes very little time and is super helpful to the developer. Probably a lot of the people who read this blog are software developers, so I'm betting you can understand how great it is to receive an issue that gives you lots of details that you can then use to fix a bug or a design problem. So why not give the gift of issues? Just make sure to search for duplicates! (This accounts for a significant amount of those 2,000 contributions on my GitHub profile. Over the course of my time on GitHub, I've filed 619 issues, 438 of which were on other people's projects. Of course, that's just on GitHub - I also do this frequently <em>outside</em> of GitHub.)</p>
<p>Again, every time you find yourself saying, "why doesn't it..." or "I wish it..." or "it's so annoying when...", let the developer know! You'll help them make their project better.</p>
<p>  [3]: this is not to suggest that you file ridiculous issues that don't really say anything or just complain. But a focused bug report describing something concrete that's problematic is awesome.</p>
<h2>Publish by default</h2>
<p>This is the last and biggest habit I have that I think led to those 2k contributions: I publish everything by default, no matter what. It doesn't matter how bad or hacky or ugly I think a software project is, I just publish it. Because honestly, why not?</p>
<p>Keeping projects public doesn't get in anyone's way. It's not like someone will look at your GitHub and be <em>annoyed</em> that you give so much software to the world. And there's even a chance that your hacky script may actually be <em>useful</em> to someone. Even if I think a project is "bad" I'll still publish it because the reality is that no one is going to go around GitHub specifically trying to find people to make fun of.</p>
<p>Publishing projects also gives me incentive to clean them up - write a README, write tests, and keep a change log (if relevant). My standards are higher because I know all my work is all in the open - not because I'm afraid of other people telling me I'm doing it wrong, but because I want to create high quality code that has a better chance of being useful to the wider community.</p>
<h2>In summary</h2>
<p>All of these habits are related. The tl;dr is this: engage by default. Get used to being involved instead of shrugging off a problem and moving on. Put your work out there for other people to see. The open source/freedom-respcting software community belongs to everyone - and that means we can all contribute to improving it. We just have to start.</p>
]]></description><link>https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions</guid><category><![CDATA[personal]]></category><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Thu, 23 Feb 2017 17:46:19 GMT</pubDate></item><item><title><![CDATA[From static to Stratic - part 1]]></title><description><![CDATA[<p>So a couple days ago I published <code>generator-stratic@1.0.0-beta.1</code> to npm. Since Stratic is now officially in beta, I thought I'd write up a guide to converting a regular, static site to a Stratic-powered blog.</p>
<p>Each step in this blog post (part 1 of 2[?]) will take you closer to having a fully-functional blog, but because of Stratic's decoupled design, you can work through them at your own pace. Each step will leave you with a functional environment (i.e. nothing will be "broken" such that you can't work on your website anymore).</p>
<p>You can see the steps in this post in action at <a href="https://github.com/straticjs/static-to-stratic">straticjs/static-to-stratic</a>. Each commit corresponds to a step in this post.</p>
<p>Let's get started!</p>
<h2>Initial setup</h2>
<p>The site we'll be converting is currently pretty simple. It has an <code>index.html</code> and a <code>projects.html</code>. Each of these includes <code>/css/main.css</code> and <code>/js/main.js</code>. Also, they both have a navigation section and a footer that are duplicated across each page. Each time Alyssa P. Hacker - the website's owner - makes a change to these (for example to fix the copyright year in the footer), she has to change both HTML files. The best way for her to add a new page will be to copy an existing HTML file and then change it. This is a little unideal.</p>
<p>Alyssa tracks her website on GitHub (in the example repository mentioned above). Here are links for the <a href="https://github.com/straticjs/static-to-stratic/blob/18a7a7da03a2f84f525f0b699a43005067428199/index.html"><code>index.html</code></a> and the <a href="https://github.com/straticjs/static-to-stratic/blob/18a7a7da03a2f84f525f0b699a43005067428199/projects.html"><code>projects.html</code></a> we'll be working with.</p>
<p>Here's a visual of the project layout:</p>
<pre><code>% tree .
.
âââ css
â&nbsp;&nbsp; âââ main.css
âââ index.html
âââ js
â&nbsp;&nbsp; âââ main.js
âââ projects.html

2 directories, 4 files
</code></pre>
<p>When Alyssa needs to preview her website, she manually runs <code>http-server .</code>.</p>
<p>Since Alyssa uses GitHub she publishes her website on GitHub Pages, so her website is in the <code>master</code> branch of her git repository. (Here we're assuming that the repository is called <code>aphacker.github.io</code> or something, instead of <code>static-to-stratic</code>.)</p>
<p>In addition to adding blog support, we'll improve Alyssa's website by reducing duplication while still allowing her to publish to GitHub Pages.</p>
<h2>Step 1 - adding gulp</h2>
<p>Before we do anything else, we need to add a build system. Stratic is designed to work with <a href="https://strugee.net/blog/">gulpjs</a>, so that's the one we'll be using.</p>
<p>Adding gulp is super easy. First, we need to create a <code>package.json</code>, so we do <code>npm init</code>:</p>
<pre><code>% npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &lt;pkg&gt; --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (static-to-stratic)
version: (1.0.0)
description: Personal website of Alyssa P. Hacker
entry point: (index.js)
test command:
git repository: (https://github.com/straticjs/static-to-stratic.git)
keywords:
author: Alyssa P. Hacker &lt;alyssaphacker@example.net&gt;
license: (ISC) AGPL-3.0+
About to write to /Users/alex/Development/static-to-stratic/package.json:

{
  "name": "static-to-stratic",
  "version": "1.0.0",
  "description": "Personal website of Alyssa P. Hacker",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/straticjs/static-to-stratic.git"
  },
  "author": "Alyssa P. Hacker &lt;alyssaphacker@example.net&gt;",
  "license": "AGPL-3.0+",
  "bugs": {
    "url": "https://github.com/straticjs/static-to-stratic/issues"
  },
  "homepage": "https://github.com/straticjs/static-to-stratic#readme"
}


Is this ok? (yes) yes
</code></pre>
<p>A couple things to note here: in general, the defaults are fine to accept. We've provided a description and an author, but these are optional since this isn't actually going to be published on the npm registry. They're just kind of nice to have.</p>
<p>The same goes for the license, which in this case is the <a href="https://www.gnu.org/licenses/agpl-3.0.en.html">Affero GPL 3.0 or above</a> - however, as the copyright holder you are of course free to <a href="https://choosealicense.com/">choose whatever license</a> you want. (Or no license, although I'd discourage you from doing that.)</p>
<p>Once we have a <code>package.json</code>, we can go ahead and install gulp and another module we'll need, <code>ecstatic</code>:</p>
<pre><code>% npm install --save-dev gulp ecstatic
</code></pre>
<p>If you haven't used gulp previously, you'll also need to install <code>gulp-cli</code>:</p>
<pre><code>% npm install -g gulp-cli
</code></pre>
<p>At this point, we'll need to move some files around. Now that we have a build system, we can organize our repository however we want instead of putting stuff exactly where we want it in production.</p>
<p>You can do this however you want. The organization that you'll find most projects using, though, is to put stuff in a <code>src</code> directory. Let's make that right now.</p>
<pre><code>% mkdir src
% git mv *.html src
% git mv css src/styles
% git mv js src/scripts
</code></pre>
<p>Finally, create a file named <code>gulpfile.js</code> and put the following in it:</p>
<pre><code>var gulp = require('gulp'),
    http = require('http'),
    ecstatic = require('ecstatic');

gulp.task('build:html', function() {
    gulp.src('src/*.html')
        .pipe(gulp.dest('dist'));
});

gulp.task('build:css', function() {
    gulp.src('src/styles/*')
        .pipe(gulp.dest('dist/css'));
});

gulp.task('build:js', function() {
    gulp.src('src/scripts/*')
        .pipe(gulp.dest('dist/js'));
});

gulp.task('watch', ['build'], function() {
    gulp.watch('src/*.html', ['build:html']);
    gulp.watch('src/styles/*', ['build:css']);
    gulp.watch('src/scripts/*', ['build:js']);
});

gulp.task('serve', ['watch'], function() {
        http.createServer(
                ecstatic({ root: __dirname + '/dist' })
        ).listen(8080);
});

gulp.task('build', ['build:html', 'build:css', 'build:js']);

gulp.task('default', ['serve']);
</code></pre>
<p>This gives us a pretty good starting point. This gulpfile defines a couple tasks that simply copy source files into <code>dist</code>. The <code>watch</code> task watches for changes and rebuilds when they occur, and the <code>serve</code> task starts up a server, replacing Alyssa's usage of <code>http-server</code>. This provides exactly the same workflow as before: Alyssa runs one command and then she can look at her site on <code>localhost:8080</code>. You can use different task names if you want (for example, <code>html</code> instead of <code>build:html</code>, etc.), but these are what <code>generator-stratic</code> gives you.</p>
<p>However, there's one problem: Alyssa can't deploy her site anymore. If she pushed like this, visitors would have to visit e.g. <code>https://aphacker.github.io/src/projects</code> instead of <code>https://aphacker.github.io/projects</code>! That's no good.</p>
<p>In order to rectify this, we'll create a new git branch, <code>src</code>. <code>src</code> will contain the source files, and we'll put the final, built site in <code>master</code>, which is what's served by GitHub Pages. So:</p>
<pre><code>% git checkout -b src
% git push --set-upstream origin src
</code></pre>
<p>Great. Now, we need to add something to put the built files (i.e. the contents of <code>dist</code>) in <code>master</code>. We'll use the <code>gh-pages</code> module for this. First install it and a dependency we'll need:</p>
<pre><code>% npm install --save-dev gh-pages gulp-util
</code></pre>
<p>Next, make it available in the gulpfile by adding a line at the end of <code>require()</code> statements:</p>
<pre><code>var gulp = require('gulp'),
    http = require('http'),
    ecstatic = require('ecstatic');
</code></pre>
<p>And finally, add a <code>deploy</code> task somewhere in the gulpfile:</p>
<pre><code>gulp.task('deploy', ['build'], function(done) {
    ghpages.publish(path.join(__dirname, 'dist'), { logger: gutil.log, branch: 'master' }, done);
});
</code></pre>
<p>Now whenever Alyssa wants to deploy a new version of her website, she just runs <code>gulp deploy</code> and it'll be taken care of for her. (ProTipâ¢: change the default branch to <code>src</code> on GitHub. That way visitors and new clones see the source files, not the build files generated by a program.)</p>
<p>The very last thing we need to do is add a <code>.gitignore</code> file since we're installing Node modules and have a build directory now. We'll just use GitHub's, adding a line for <code>dist/</code> at the end:</p>
<pre><code>% curl https://raw.githubusercontent.com/github/gitignore/master/Node.gitignore &gt; .gitignore
% echo "\ndist/\n" &gt;&gt; .gitignore
</code></pre>
<p>Now we've got a functionally equivalent development setup based on gulp. Success!</p>
<h2>Step 2: converting HTML to Pug</h2>
<p>The next step is to convert the HTML to <a href="https://pugjs.org">Pug</a>. Pug (formerly known as Jade) is a language that compiles to HTML. It lets you do useful things like inherit from a common layout as well as looping over JavaScript variables. If you're not familiar with Pug, you should go take a look at its syntax now.</p>
<p>The easiest way to do this conversion is to get a program to do it for you. <a href="http://html2jade.aaron-powell.com/">Here's the one I used</a> way back when; you may be able to find a better one. The generated Pug will be valid but not the prettiest - you may want to wait to clean it up since we're going to do some work to reduce the duplication soon.</p>
<p>Once you've got the converted Pug, you should rename the relevant HTML file to have a <code>.pug</code> extention, then replace the contents with the Pug. Do this for each HTML file.</p>
<p>The last step here is to make gulp build the Pug. Install <code>gulp-pug</code>:</p>
<pre><code>% npm install --save-dev gulp-pug
</code></pre>
<p>Then add <code>pug = require('gulp-pug')</code> to the end of the <code>var</code> declaration at the top of your gulpfile. Finally, change your <code>html</code> task to look like this:</p>
<pre><code>gulp.task('build:html', function() {
    gulp.src('src/*.pug')
        .pipe(pug({pretty: true}))
        .pipe(gulp.dest('dist'));
});
</code></pre>
<p>We'll also need to fix the <code>watch</code> task so it has:</p>
<pre><code>gulp.watch('src/*.pug', ['build:html']);
</code></pre>
<p>which will watch Pug files instead of HTML files.</p>
<p>That's it! Alyssa's site is now building with Pug instead of HTML.</p>
<h2>Step 3: splitting out the layout</h2>
<p>Pug's looping and flow control constructs will be very useful to us later on, but we can get some immediate productivity wins by splitting out the site layout so it's not duplicated across every Pug file.</p>
<p>There's one tricky thing about this: the navigation is mostly the same between pages, but not quite - the page the user is currently on shouldn't be a link. We'll solve this by using a <code>block</code> directive for each link. That way, we can override just what needs to be changed, while introducing no duplication.</p>
<p>You'll have to figure out exactly what parts of your personal layout make sense to be split out. In Alyssa's case, there are three main things that are mostly or fully duplicated across pages:</p>
<ol>
<li>The navigation bar</li>
<li>The footer</li>
<li>Invisible metadata and script/style includes</li>
</ol>
<p>These are what we'll split out. First, we'll make a copy of <code>index.pug</code> and put it in <code>src/includes/layout.pug</code>. (Again, you can organize your files however you want - but in projects generated by <code>generator-stratic</code>, utility Pug files go in <code>src/includes</code>.) Next, edit out the page-specific content and replace them with <code>block</code> directives. Finally, edit each navigation bar item so it has its own <code>block</code> directive, leaving the old code as the default for the <code>block</code> directive.</p>
<p>Here's what this looks like when we do this to Alyssa's site:</p>
<pre><code>doctype html
html
  head
    meta(charset='UTF-8')
    link(href='/css/main.css', rel='stylesheet', type='text/css')
    block head
  body
    block heading
    nav
      ul
        block nav-homepage
          li
            a(href='/') Homepage
        block nav-projects
          li
            a(href='/projects') Projects

    block body

    footer
      p &amp;copy; Copyright 2016 Alyssa P. Hacker.
    script(src='/js/main.js', type='text/javascript')
</code></pre>
<p>Note how I've replaced the <code>h1</code> element (the contents of which vary per-page) with <code>block heading</code>, I've added a <code>block head</code> directive so we can specify the title per-page, I've made a <code>block</code> for each navigation link so we can override them if we want to individually (otherwise they'll have the default of being a link), and I've added <code>block body</code> for the main content. I've also cleaned out a bunch of the cruft the automatic converter put in there.</p>
<p>Now, we can edit <code>index.pug</code> so that it inherits from <code>layout.pug</code> - we'll use the <code>extends</code> keyword for this. Then we just fill in the content we want using block. Here's what this looks like after we're finished with Alyssa's site:</p>
<pre><code>extends includes/layout.pug

block head
  title Alyssa P. Hacker's homepage

block heading
  h1 Alyssa P. Hacker's homepage

block nav-homepage
  li Homepage

block body
  p This is the homepage of Alyssa P. Hacker. You can check out the projects I've worked on #[a(href='/projects') here].
</code></pre>
<p>You'll note that I've cleaned out some cruft here, too. We have one last thing to fix: if we change the layout, nothing will get rebuilt. We can fix this by changing the <code>watch</code> task again so that the line for watching Pug files reads:</p>
<pre><code>gulp.watch(['src/*.pug', 'src/includes/*.pug'], ['build:html']);
</code></pre>
<p>Sweet! <code>index.pug</code> is way shorter than what we had before and includes <em>just</em> the content now. We can do the same thing to <code>projects.pug</code>. Then Alyssa can, for example, correct the copyright year in <code>layout.pug</code> - i.e., once - and that change will go into both <code>index.html</code> <em>and</em> <code>projects.html</code>. I've gone ahead and made the change for her.</p>
<p>To give a high-level overview, here's what Alyssa's site looks like now:</p>
<pre><code>% tree -I node_modules .
.
âââ dist
â&nbsp;&nbsp; âââ css
â&nbsp;&nbsp; â&nbsp;&nbsp; âââ main.css
â&nbsp;&nbsp; âââ index.html
â&nbsp;&nbsp; âââ js
â&nbsp;&nbsp; â&nbsp;&nbsp; âââ main.js
â&nbsp;&nbsp; âââ projects.html
âââ gulpfile.js
âââ package.json
âââ src
    âââ includes
    â&nbsp;&nbsp; âââ layout.pug
    âââ index.pug
    âââ projects.pug
    âââ scripts
    â&nbsp;&nbsp; âââ main.js
    âââ styles
        âââ main.css

7 directories, 11 files
</code></pre>
<h2>Next time...</h2>
<p>This post is long enough already, so I'll stop here. We've converted Alyssa's site to have a really solid base, so next time we'll build on top of this work to add superpowered blog features, powered by Stratic.</p>
<p>Now go apply this to your own site!</p>
]]></description><link>https://strugee.net/blog/2017/02/from-static-to-stratic-part-1</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/from-static-to-stratic-part-1</guid><category><![CDATA[development]]></category><category><![CDATA[stratic]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 20 Feb 2017 19:58:53 GMT</pubDate></item><item><title><![CDATA[RC week 6]]></title><description><![CDATA[<p>This is week 6 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<p>(I feel obligated to point out that this is being published a week later than it's supposed to be because I got behind. I am, however, very confident that the following is accurate. I used GitHub history and location data to help me remember the parts that were fuzzy.)</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 19</h2>
<p>Not at RC. Total time at RC 0h0m.</p>
<p>Traveled back from <a href="https://fosdem.org/2017/">FOSDEM</a>.</p>
<h2>Day 20</h2>
<p>Arrived ~16:45, departed ~22:10, total time at RC 5h25m.</p>
<p>Somewhat unproductive day. Spent most of it just trawling the web. I was completely exhausted since I got back to my apartment from the airport at 3 in the morning. (My flight got in late, I waited at the airport for a while to see my sister, and at 12:30 I got on my train away from the AirTrain station except that it was in the wrong direction. Also, fun fact, subways and trains run <em>really</em> infrequently at 1 AM. Who knew!?)</p>
<p>I did, however, write the slides for the next day's Security Club presentation on the basics of cryptography. Started them pretty late, though, and mostly finished them at home, which was unfortunate since I was up real late again.</p>
<h2>Day 21</h2>
<p>Arrived ~13:00, departed ~22:00, total time at RC 9h0m.</p>
<p>Arrived with a little time to spare before teaching Cryptography Basics for Security Club. Didn't do much in the afternoon before leaving to walk down to the waterfront with 15 people or so, which took an hour and was really, really lovely, honestly. Especially since the Winter 1 batch is ending so soon.</p>
<h2>Day 22</h2>
<p>Arrived ~12:00, departed ~5:00, total time at RC 17h00m.</p>
<p>Spent the morning and early afternoon pairing with <a href="https://github.com/Jmeggesto">Jackie</a> on <a href="https://github.com/strugee/icalc">icalc</a>. We fixed a maddeningly weird bug where, when the user input an incorrect value, the operation type prompt would be displayed twice. You can see the fix <a href="https://github.com/strugee/icalc/commit/fb20487c5385cb0ae6192cd6540c98fbd82ff2d0#diff-2045016cb90d1e65d71c2407a2570927">here</a> - the problem was that <code>getchar()</code> was retrieving the newline used to "submit" the operation type when the function was called again (recursively). In other words, the stdin stream had <em>two</em> characters on it - the incorrect character, and the newline. The solution was to just use a different function from libc that did this correctly. The entire process was pretty educational, since it required delving into C strings, the libc manpages, etc. After fixing that, Jackie and I paired on <a href="https://github.com/Jmeggesto/bank-prettify">a JavaScript project</a> that will display Bank of America account balances on the commandline (a non-trivial problem, since Bank of America requires JavaScript).</p>
<p>In the late afternoon, switched gears a bit to review a PRISM Break PR.</p>
<p>In the evening, I gave a presentation at Thursday night presentations entitled "Mercurial for Git folks". I put zero effort into slides and instead simply opened up a bunch of tabs and terminal windows with content I wanted to point to while I was talking. Then I got up there and just... talked about why Mercurial is neat. At the beginning I asked who used Git (most hands, including mine, went up) and who hated Git (a fair number of hands, including mine, went up). So that was pretty amusing. I talked about how the design was pretty similar to Git, how Mercurial has extensions (because it's written in Python), how that plays into its "disable confusing/dangerous stuff like the staging area and rebase by default" philosophy, and how I've been learning it by just using <a href="https://hg-git.github.io/">hg-git</a> with GitHub. I thought it went pretty badly, because I didn't feel like it was very coherent. But the people I asked about it said it was actually pretty good, so that feels nice.</p>
<p>After that, we had the end-of-batch/goodbye Rose party. :'(</p>
<p>I spent a lot of time discussing politics and education with <a href="https://github.com/steph-rage">Stephanie</a>, which was lovely, and had some other long and interesting conversations that I wish I remember but don't, truthfully. Spent quite a bit of time with <a href="https://github.com/inytar">Pieter</a>, <a href="https://github.com/heatherbooker">Heather</a>, and David L messing around on top of the desk chairs, which completely filled Hopper. Eventually ended up sitting in Babbage with Rose, James, Heather, and some other folks (can't remember, honestly) just hanging out. We jacked the space heater way up so it felt like a sauna (aka reeeeeeal nice) and just talked about stuff. Around the 2-3 AM mark Heather and I got bundled up and went out to go to the pharmacy (which turned out to actually be literally right next door) and buy chocolate and nail polish. And then I spent somewhere between 1.5 to 2 hours painting my nails a fabulously sparkly red color called "Devil's Stare" from a brand called "Sinful Colors" - a combination which strikes me as being nothing short of <em>wild</em>.</p>
<p>At around 5 AM, everyone decided to go to sleep. I was the only person to go home, and honestly the only reason I did so was because I knew I'd want a shower in the morning. So I spent about 15 minutes trying to find the stupid switch to turn off the kitchen lights, finally gave up and went home, and fell asleep a short while after the sun rose.</p>
<h2>Friday</h2>
<p>Arrived ~18:00, departed ~1:15, total time at RC 7h15m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Arrived exceedingly late since I woke up around, you know, 5. Got to RC and did very little before noticing a very large party leaving for dinner, which I joined and ate with (despite saying before I left that I'd had breakfast recently, so I "wasn't going to get anything"). We went out to get Chinese food, then went to a place that served Asian dessert of some kind (I've forgotten). It was beyond lovely, honestly.</p>
<p>(I also mentioned at dinner that I'd missed a week of blogging, so during a discussion with <a href="https://github.com/chirs">Chris</a> about it I posted to a Zulip topic named "shame AJ" soliciting ideas for a punishment as well as moving the regular Iron Blogger meeting to Tuesday due to the Spring 1 introduction day.)</p>
<h2>Executive summary</h2>
<p>This week was particularly unproductive. I only did a little bit of work on icalc, my C project, and other than that the only really RC-related project I did was my security club presentation on cryptography basics. This was mostly because my sleep schedule was super messed up from Brussels, and then got messed up again (just as it was getting back to normal) on Thursday.</p>
<p>This week was also very emotional, since it was the Winter 1s' last week. To all my Winter 1 friends: you made my time at RC amazing and welcoming and exciting and wonderful and I loved being around you all. And I will miss you for a very long time. &lt;3</p>
<p>(*<em>starts crying a lil bit</em>*)</p>
<p>Total time at RC 38 hours 40 minutes; cumulative time 239 hours 25 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-6</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-6</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Sun, 19 Feb 2017 07:42:52 GMT</pubDate></item><item><title><![CDATA[Gender representation at RC]]></title><description><![CDATA[<p>So I want to talk (real quick) about gender representation in tech. Specifically, the fact that it's abysmal. Women[1] usually account for, at most, <a href="https://www.cnet.com/news/women-in-tech-the-numbers-dont-add-up/">30% of the employees in a company</a> and that number is often much lower. Even at the companies where it's 30%, that number is misleading because it doesn't adress management positions which are often much lower. (For reference, women accounted for about 59% of the overall workforce as of 2015, when the article I pulled those numbers from was published.) <a href="http://fortune.com/2014/10/02/women-leave-tech-culture/">Here's an article</a> that says that on average, women leave the industry within 7 years of being in it. Let me repeat that, because I didn't say they leave their jobs, or take a break. They completely leave the <em>entire technology industry</em>. And unfortunately it makes sense, since incidents of sexism in tech are <a href="http://geekfeminism.wikia.com/wiki/Category:Incidents">rampant</a>.</p>
<p>Unlike (most of) the rest of the tech world, the <a href="https://recurse.com">Recurse Center</a> is mostly (completely?) gender-balanced. I want to point out that while for years I've believed in diversity, it didn't become clear to me how much <a href="https://www.opensocietyfoundations.org/voices/implicit-bias-and-social-justice">implicit bias</a> I held until I joined RC. I find that, having previously spent significant amounts of time in environments that were predominantly white, cis and male, <strong>I find myself needing to self-correct discriminatory and gender-based unconscious assumptions significantly less frequently at RC</strong>. In other words, my subconscious is making less incorrect, gender-based suggestions about what people are like that I then have to consciously reject. I would attribute this almost 100% to the fact that at RC I'm surrounded by lots of people who are a) super talented and know their shit and b) aren't male.</p>
<p>If I have a point to this blog post (and I'm not sure that I do), it'd be to underscore what many have said before me: representation and role models are important. Advocating for gender equality is good and important, but in the end what really matters is what's actually in people's heads. That's mostly influenced by what they see in their immediate lives, and that's why representation is so important - believing in equality is great, but presenting actual evidence to your subconscious that its biases are incorrect is a much more powerful way to improve the way you perceive the world.</p>
<p>If folks have any comments or different perspectives, I'd love to hear them <a href="https://strugee.net/contact">privately</a> or via <a href="https://webmention.net/">WebMention</a>.</p>
<p> [1]: I'm focusing on women here because I'm not aware of any statistics about non-binary people in tech. But it's worth noting that it's a huge problem for them, too.</p>
<p><strong>Update February 22nd:</strong> the lovely <a href="https://twitter.com/rhonorv">Rachel Vincent</a> from RC faculty says this about RC's gender-balancing:</p>
<blockquote>
<p>Of the folks who are currently in-batch (Winter 2's and Spring 1's), ~36% identify as women. It's roughly the same for the community as a whole (~33%), though we don't have super accurate numbers because we don't update information on folks' gender. The most gender balanced batches were a little over 40% women. We're always pushing for 50/50, though. ð Our overall strategy is to try to get an applicant pool that is as gender balanced as possible, and we don't do any kind of balancing during the admissions process itself.</p>
</blockquote>
]]></description><link>https://strugee.net/blog/2017/02/gender-representation-at-rc</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/gender-representation-at-rc</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 14 Feb 2017 22:01:19 GMT</pubDate></item><item><title><![CDATA[RC week 5]]></title><description><![CDATA[<p>This is week 5 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 15</h2>
<p>Arrived ~10:20, departed ~16:30, arrived ~20:00, departed ~23:30, total time at RC 9h40m.</p>
<p>Somehow managed to get up early and arrive at my checkin early, despite being dead-tired (I couldn't get to sleep so I was running on ~5 hours of sleep). Spent most of today working on my HTTPS presentation, but took 30 minutes to an hour or so off to make a couple small improvements to my website - mostly just trimming the projects page and adding information to the contact page about how to communicate securely with me. Left for a while to have dinner with a friend and returned via the subway[1] to work on my HTTPS presentation some more.</p>
<p>(Note 1/31: I felt quite productive today, but in hindsight really didn't get a whole lot done since I was just so tired.)</p>
<p> [1]: which truthfully made me feel unreasonably accomplished since my phone died right as I looked up directions, but I got on the right subway and figured out I could transfer and take a closer line halfway through and eventually made it back anyway</p>
<h2>Day 16</h2>
<p>Arrived ~10:20, departed ~23:10, total time at RC 12h50m.</p>
<p>Spent - no joke - basically all of today working on my HTTPS presentation, which in addition to actually writing the content entailed reminding myself of how things like e.g. TLS False Start actually work. Reminding and/or properly learning (for False Start in particular I had a vague idea of how it worked before, but didn't really understand it).</p>
<p>Took about an hour off in the evening to help repaint a large stretch of wall in the space as part of the cleaning party. Then went back to HTTPS. Highly productive day.</p>
<h2>Day 17</h2>
<p>Arrived ~11:30, departed ~17:40, total time at RC 6h10m.</p>
<p>Caught up with some GitHub stuff in the morning before teaching HTTPS. We went for an hour and a half and <em>still</em> skipped the entire section on TLS performance because HTTPS is complicated and hacky and also <em>really</em> terrible. (As <a href="https://github.com/eeclaire">Claire</a> put it, "I'm now terrified of browsing the web." Me too, Claire. Me too.) I think it went really well, even though it was a little overwhelming for everyone at times.</p>
<p>Spent a bit of time watching YouTube videos on how Diffie-Hellmann works and how Elliptic-Curve Diffie-Hellman (ECDHE) works - we'd touched on both of these during the presentation and I needed to put them in Zulip. The one on plain Diffie-Hellmann was just a refresher, but the one on ECDHE was something I'd previously tried to watch <em>several</em> times and had always been too confused. But, this time I got it! Whooo! So that felt awesome.</p>
<p>Left early to go home and sqeeze in some laundry before closing out the evening by going to an RC-organized talk on <a href="https://crystal-lang.org/">Crystal</a>.</p>
<h2>Day 18</h2>
<p>Arrived ~10:30, departed ~14:30, total time at RC 4h0m.</p>
<p>Did just a smidge of work on pump.io before going to Abstract Salad Factory, then heading home to catch my flight to Brussels.</p>
<h2>Friday</h2>
<p>Not at RC. Total time at RC 0h0m.</p>
<p>In Brussels for <a href="https://fosdem.org/2017/">FOSDEM</a>.</p>
<h2>Executive summary</h2>
<p>This week had its ups and downs. I was really productive on the HTTPS stuff, but other than that I didn't reeeally get a lot done.</p>
<p>Total time at RC 32 hours 40 minutes; cumulative time 230 hours 45 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-5</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-5</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 13 Feb 2017 07:23:28 GMT</pubDate></item><item><title><![CDATA[RC week 4]]></title><description><![CDATA[<p>This is week 4 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 11</h2>
<p>Arrived ~10:50, departed ~23:20, total time at RC 12h30m.</p>
<p>Arrived 20 minutes late for my checkin, but checked in with <a href="https://stanzheng.com/">Stanley</a> and <a href="https://github.com/heatherbooker">Heather</a> anyway. Started <a href="https://pump.strugee.net/alex/note/q1vco7XwRk6JsYteqTQqPA">an experiment</a> where I turned on <a href="https://www.eff.org/https-everywhere">HTTPS Everywhere</a>'s "block all unencrypted requests" option, which has been, uh, <em>interesting</em> so far. Spent most of the day working on blog-related things - finishing up and publishing <a href="https://strugee.net/blog/2017/01/rc-week-3">RC week 3</a> (which I just straight up forgot to publish on Saturday) along with <a href="https://strugee.net/blog/2017/01/surveillance-priorities">Surveillance priorities</a> which I finished exactly two minutes before[1] the start of this week's Iron Blogger challenge meeting. Other than that, poked a little at implementing <a href="https://github.com/processone/ejabberd/issues/1364">OCSP stapling support</a> in <a href="https://www.ejabberd.im/">ejabberd</a>, which is something I want to do for a number of reasons:</p>
<ol>
<li>It'll give me a chance to look at some Erlang, which will be a really interesting experience</li>
<li>It'll give me a chance to try doing something with the OpenSSL API, which is a complete horror show but nonetheless something I would like (some) experience in</li>
<li>I run ejabberd in production and, you know, really want stapling support</li>
</ol>
<p>Ended the night by going to Fat Cat.</p>
<p> [1]: I actually already had a longer post mostly written, but I realized as I was going to finish it that the experiment that I was proposing had a) been done before and b) mostly failed. So I ended up writing "Surveillance priorities" from scratch in a hurry instead.</p>
<h2>Day 12</h2>
<p>Arrived ~10:50, departed ~17:50, total time at RC 7h0m.</p>
<p>Arrived late again, despite leaving a good <em>15 to 20 minutes earlier</em>. Freaking subway. ANYWAY. Checked in on Zulip instead of in person. The day was semi-productive - I worked a little on my operational security presentation for tomorrow, but a lot of my time was spent talking with Rose, discussing the programming language I'm planning to work on/invent. Left early to do laundry at home and then closed out the evening by finishing my presentation as well as finding and reporting a (common and uninteresting) security vulnerability in a web application[2] - unnamed for obvious reasons.</p>
<p>As a side note, as Stanley put it, <a href="https://www.recurse.com/blog/112-how-rc-uses-zulip">I'm RC famous</a>! Kind of, I guess. \o/</p>
<p> [2]: I actually thought I found the same problem in another project, except it turned out that I totally missed something and so instead of being cool I ended up embarrassing myself on GitHub instead. Sadface :(</p>
<h2>Day 13</h2>
<p>Arrived ~10:35, departed ~00:10, total time at RC 13h35m.</p>
<p>Arrived in the middle of my checkin. Spent the morning taking care of some general maintenance tasks, including getting ready to present on operational security, which I did in the afternoon. Spent most of the rest of the day thinking about the design of my programming language and putting it together into a blog post. In the evening, started trying to fix <a href="https://github.com/sandstorm-io/sandcats/issues/153">a bug in Sandstorm</a> which was breaking my production install. Also, had my Princeton interview via Skype, which I think went extremely well. Yay! My interviewer was awesome and we had a really interesting conversation.</p>
<p>As a side note, I got to wear my new libuv shirt today, and it is seriously <a href="https://pump.strugee.net/alex/image/zAFejrr9RY6pLFHpSlXBbQ">the coolest shirt I've ever seen</a>.</p>
<h2>Day 14</h2>
<p>Arrived ~10:35, departed ~1:40, total time at RC 15h5m.</p>
<p>Arrived in the middle of my checkin again (still better than earlier in the week, though). It wasn't anything groundbreaking, but it did give me the opportunity to get more hands-on Mercurial experience (and learn a lot about Mercurial's different branching styles). Working in an unfamiliar codebase was also a good experience, as was dealing with Sandstorm's custom UDP protocol. It wasn't really what I meant to do with the day, but also not a total wash.</p>
<p>Attended Thursday presentations followed by Game Night in the evening which was <em>very</em> fun - I played some poker, then lost at chess a bunch of times to Hussein (even when we played Blitz Chess, which he said he was bad at). Then we switched to Go for a while. Finished out the evening by just hanging out with <a href="http://another.workingagenda.com">Fenimore</a>, <a href="https://github.com/Husseinfarah93">Hussein</a>, and <a href="http://kacyjam.es/">James</a>, which was a lot of fun.</p>
<h2>Friday</h2>
<p>Arrived ~15:10, departed ~23:50, total time at RC 8h40m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Slept in pretty late today. Attended the monthly pump.io meeting immediately upon arrival (sadly Evan wasn't there). Spent the rest of the day responding to PRs - which took a lot of time but didn't actually result in a lot of code - then authoring a Huginn PR to <a href="https://strugee.net/blog/">add titles</a> to all pages.</p>
<h2>Executive summary</h2>
<p>In a shocking turn of events, this week was relatively productive, but could've been better. I challenged myself a little bit, but I think I can and should do more.</p>
<p>Checkins really helped. Even when I missed the checkin it provided motivation to get up and get moving. 10:30 may be a little too early for me though, so I'm not sure if I'll continue doing it next week.</p>
<p>Total time at RC 56 hours 50 minutes; cumulative time 198 hours 5 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-4</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-4</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 30 Jan 2017 18:16:31 GMT</pubDate></item><item><title><![CDATA[New programming language part I: Handlers]]></title><description><![CDATA[<p>So my latest project at the <a href="https://recurse.com">Recurse Center</a> is a new programming language, as yet unnamed. Basically this was inspired by my <a href="https://strugee.net/presentation-security-design">security design</a> presentation in which I laid out a couple ways you can improve programs' security designs, like process separation. And it occurred to me: why is this so difficult? Something should be doing this for me. Enter... whatever the hell I end up calling my language.</p>
<p>One of the most important building blocks of the language is something that I'm currently calling a "Handler". A Handler is basically a segregated piece of application code that handles some task or problem domain. For example, a Handler for outgoing DNS requests (syntax subject to change, obviously):</p>
<pre><code>Handler DNS {
    function getAddressFromHostname(hostname) {
        // Very much pseudocode - all function calls here are example OS calls

        sendDnsQuery(hostname);
        while (!haveDnsResult()) {
            sleep(1);
        }
        
        return getDnsResult();
    }
}
</code></pre>
<p>This Handler has one simple method, <code>getAddressFromHostname()</code>. It sends a DNS query, blocks until it has a result, and then returns the result.</p>
<p>What's cool about this Handler is that it will be run in its own process - in other words, each Handler is automatically transformed into a privilege-separated process. However, <code>getAddressFromHostname()</code> can still be called from other, high-level Handlers! The language will do all the data marshalling for you, so from a language perspective it looks like a regular function call even though in practice it's going cross-process.</p>
<p>Now, let's improve our Handler a little bit. It's pretty unfortunate that we can only make one DNS request at a time (since it's blocking), so let's use an event loop.</p>
<pre><code>Handler DNS is eventLoop {
    function getAddressFromHostname(hostname) {
        // Still pseudocode

        return sendDnsQuery(hostname, function(address) {
            return address;
        });
    }
}
</code></pre>
<p>We specified that the <code>DNS</code> Handler is an event loop, so the language automatically set up a Node-style event loop - we never actually called anything to enter an event loop, it just sort of happened as a construct of the language. Note also the nice async-aware return syntax - the result of <code>sendDnsQuery()</code> is returned to <code>getAddressFromHostname()</code>'s caller, and the result of <code>sendDnsQuery()</code> is specified by the return value of the anonymous function callback.</p>
<p>We can improve correctness even more by specifying that the Handler is not allowed to make syncronous I/O calls at all:</p>
<pre><code>Handler DNS is eventLoop, async {
    // ...
}
</code></pre>
<p>Handlers let you pick and choose different elements and design choices for different parts of your application. For example, if you had a Handler responsible for processing data, it might make sense to restrict it to being entirely functional:</p>
<pre><code>Handler incomingData is functional {
    // ...
}
</code></pre>
<p>In such a Handler, any functions with side effects wouldn't be callable, enforced at compile-time (possibly parse-time, depending on whether I can make it compiled or not given the type system). Perhaps you want to spawn a new sandbox process for each piece of incoming data (OpenSSH does this, for example, when first receiving authentication data from untrusted users):</p>
<pre><code>// The `ephemeral` keyword will probably be something better, but for now...
Handler incomingData is functional, ephemeral {
    // ...
}
</code></pre>
<p>If your application requires root - for example, if you were writing an NTP daemon that needed to call <code>setTimeOfDay()</code> - that's also specified at the Handler level:</p>
<pre><code>Handler incomingData is root {
    // ...
}
</code></pre>
<p>This should give you some idea of why Handlers are really interesting, even beyond the process separation concept that underlies them. (It's also worth noting that while I've focused mostly on daemons, this can also be used to securely implement e.g. <code>file</code>.) I'm really excited to get these ideas out there so I'll stop for now, but pretty soon I'll write another blog post talking about the type system.</p>
]]></description><link>https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Thu, 26 Jan 2017 15:59:20 GMT</pubDate></item><item><title><![CDATA[Surveillance priorities]]></title><description><![CDATA[<p>For several years now I've been really interested in technology policy - things like security, privacy and censorship, and especially how those things relate to both mass surveillance and freedom-respecting software. That's why I follow organizations like Fight for the Future and the EFF, and why I e.g. participated in the movement to stop SOPA and PIPA, the internet censorship bills.</p>
<p>But a week or so ago I had a realization: I'm not interested in surveillance law anymore.</p>
<p>It's clear to me that Congress is completely busted. The 113th Congress came <a href="http://www.pewresearch.org/fact-tank/2014/12/29/in-late-spurt-of-activity-congress-avoids-least-productive-title/">very, very close</a> to being the least productive Congress in modern history. Our current Congress isn't particularly good either, although they are (as far as I know) not as bad as the 113th - but they're still not good enough that I'm confident in their ability to actually, you know, pass laws. Even if we <em>could</em> get Congress to pass laws at all, it's unclear whether we could actually get them to pass laws curtailing mass surveillance. Over and over again we see Congress trying to pass misguided laws that weaken encryption, damage the DNS, and do all sorts of other seriously nasty (and hacky!) things - it just doesn't seem very reasonable to me to assume that they'd change their minds and decide to do (what we think is) the right thing[1].</p>
<p>This is why I'm not interested in surveillance law anymore. I find it to be a waste of time. Instead, I've shifted my focus towards systems that are fundamentally designed to resist surveillance and censorship. That's why I advocate for <a href="https://whispersystems.org/">Signal</a> and why I work on <a href="http://pump.ioe">pump.io</a>: because these are both systems designed from the ground up to, among other things, essentially be unaffected by surveillance law. Who cares if Congress passes a law that says they can surveil pump.io users? Congress saying a bunch of words doesn't change the fact that technically speaking, that's quite hard to do. Certainly it's more difficult than surveilling e.g. Facebook.</p>
<p>As Moxie Marlinspike puts it in <a href="https://youtu.be/xIiklPyS8MU?t=33m54s">this talk</a> on PKI's flaws and an alternative system called Convergence:</p>
<blockquote>
<p>And, you know, with this legislation that's been coming up recently like COICA and PROTECT IP and this kind of thing, you know - to me the real lesson here isn't whether this passes or not because there's been, you know, some kind of heroic efforts to prevent this legislation from going through. But I think, you know, the thing to take away from this is that they're <em>trying</em>. To pass regulation that messes with this stuff. And maybe one day they'll succeed.</p>
</blockquote>
<p>Trying to make Congress do the right thing is, I feel, akin to an endless arms race: they don't seem to be getting the message and it's doubtful that they'll stop in the near- or medium-term future.</p>
<p>A much better solution is this: implement secure-by-default, freedom-respecting, encrypted and/or federated systems, and be done. Forever.</p>
<p> [1]: honestly, I think a big problem with this is that a lot of Congress is old white guys. Emphasis on old. The problem of people in the legal sphere not understanding technology, especially technology relating to security, privacy and encryption, has cropped up before. Consider, for example, the judge who <a href="https://nakedsecurity.sophos.com/2016/07/01/judge-decides-we-dont-have-any-right-to-privacy/">ruled</a> that a Tor user had "no reasonable expectation of privacy" because he literally could not wrap his head around how Tor worked and what the FBI did.</p>
]]></description><link>https://strugee.net/blog/2017/01/surveillance-priorities</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/surveillance-priorities</guid><category><![CDATA[politics]]></category><category><![CDATA[privacy]]></category><category><![CDATA[musings]]></category><pubDate>Mon, 23 Jan 2017 21:55:27 GMT</pubDate></item><item><title><![CDATA[RC week 3]]></title><description><![CDATA[<p>This is week 3 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Monday</h2>
<p>Arrived ~12:50, departed ~00:10, total time at RC 11h20m. Not Day 8 because Martin Luther King Day was today, so RC was not technically in session.</p>
<p>Lazy day today. Participated in an interesting discussion in the <a href="https://conversations.im">Conversations</a> MUC about <a href="https://wiki.xmpp.org/web/Easy_Onboarding">Easy XMPP</a> which led to me spending a couple hours working on <a href="https://github.com/ge0rg/easy-xmpp-invitation">this onboarding webpage project</a> (live version <a href="https://yax.im/i/#alex@strugee.net">here</a>). Spent about 5 minutes deploying OCSP Must Staple to <a href="https://nodecompat.com">nodecompat.com</a> and <a href="https://isthefieldcontrolsystemdown.com">isthefieldcontrolsystemdown.com</a> and then about 30 discussing exactly what OCSP Must Staple is with <a href="https://jessewalling.com/">Jesse</a>. Also, submitted a talk on <a href="https://github.com/straticjs/generator-stratic">Stratic</a> to <a href="https://www.linuxfestnorthwest.org/">LinuxFest Northwest</a>.</p>
<p>Truthfully I spent a fair amount of my time in #pump.io on Freenode and in particular, got confirmation that <a href="https://e14n.com/evan">Evan</a> will be able to attend this month's pump.io meeting, which is fantastic. Closed out the evening by finishing my last college app and then spending several hours (i.e. waaay longer than I meant to) looking into parts for building an <a href="https://xkcd.com/413/">xkcd-style robot</a> for the space.</p>
<h2>Day 8</h2>
<p>Arrived ~13:10, departed ~23:00, total time at RC 9h50m.</p>
<p>Truthfully, not really sure where today's time went. The biggest real thing I did was fixing a pretty serious <a href="https://github.com/pump-io/pump.io/issues/1266">regression</a> in pump.io (introduced during the Express 3.x migration) that caused realtime functionality not to work. Plus I wrote the above text (under "Monday") because I didn't have time the previous night. *sigh*</p>
<p>However, I <em>did</em> spend a lot of the evening starting and then finishing my presentation on <a href="https://strugee.net/presentation-webapp-security">webapp security</a> for tomorrow. So that's something.</p>
<h2>Day 9</h2>
<p>Arrived ~13:40, departed ~21:30, total time at RC 7h50m.</p>
<p>Arrived only just in time for my presentation on <a href="https://strugee.net/presentation-webapp-security">webapp security</a> due to a series of unfortunate (mostly subway-related) mishaps. It went really, really well - although we did run for 30 minutes longer than I'd planned, which I was surprised at since last week we only ran a couple minutes over but I had twice as many slides. Covered (mostly SQL) injections, cross-site scripting, password handling, and Cross Site Request Forgery. After that, had an extensive discussion with <a href="https://github.com/ebb-tide">Deniz</a> and <a href="https://github.com/heatherbooker">Heather</a> about security and related subjects (email, selfhosting, the law, and how I think about security systems, mostly) before heading out to Walgreen's to buy some Airbourne, since I think I may be on the verge of getting a bit sick. :(</p>
<p>(Heather and Deniz also suggested I use the word "obviously" less, although it seems like other than that people really like my teaching style. So that feels good.)</p>
<p>The rest of the day was pretty boring: did a <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#211---2017-01-18">patch release</a> for pump.io so that the regression fix that landed yesterday would go out to users. Took care of some system administration maintenance, then did some pump.io issue triaging and some minor fixups in the GitHub repository (notably improvements to the wiki homepage and fixing the Releases page, which was kinda borked).</p>
<p>Finally, since I've been doing a bad (read: <em>terrible</em>) job trying Mercurial so far, I've decided to force myself to use it:</p>
<pre><code>$ cd Development
$ rm -rf icalc
$ # Muck around for a bit because I thought the following would work out-of-the-box, but it didn't
$ hg clone git+ssh://github.com:strugee/icalc.git
</code></pre>
<p>I'll end up using it tomorrow since I'm committing to work on icalc for the entire day. I've been really bad about working on it.</p>
<h2>Day 10</h2>
<p>Arrived ~13:10, departed ~17:45, total time at RC 4h35m.</p>
<p>Arrived riiiight as Abstract Salad Factory was starting. Had a delicious salad and came up with an excellent idea for an RC activity[1] before attending Beginner's Club, which was on testing (and also conveniently in the same room). Spent a little time taking care of business (emails, etc.) before digging into Mercurial by looking at the "Migration from Git" wiki page and just reading links. Feel like I'm on a good track there.</p>
<p>Attended Thursday presentations; came up with a really awesome web standards idea during that that I was <em>extremely</em> excited to propose to the standards community. Looked it up while the jobs fair was getting started - turns out it's <a href="https://w3c.github.io/webappsec-mixed-content/#strict-opt-in">already a thing</a>. So that was disappointing. Left for home pretty soon after that.</p>
<p> [1]: one weekend where we take over the main space and marathon through all three extended director's cut Lord of the Rings movies</p>
<h2>Friday</h2>
<p>Arrived ~1:00, departed ~00:50, total time at RC 11h50m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Spent a lot of time today pairing with <a href="https://github.com/heatherbooker">Heather</a> on improving the <a href="https://github.com/asinghamgoodwin/AbstractSaladFactory">Abstract Salad Factory webapp</a> before devolving into silly shell-related projects like installing <a href="https://github.com/nvbn/thefuck">thefuck</a> and perusing <a href="https://github.com/ayust/underhanded">underhanded</a>, which we actually learned a lot from (because we kept looking up the options and commands the aliases used). Also found out that the version of <a href="https://strugee.net/blog/">sl</a> packaged in Debian is weirdly old. Like 10 years old.</p>
<p>In the evening, went to Bottle Share Friday which really ended up being "have lots of food and play a game of Codenames but mostly just talk" Friday. Very fun.</p>
<p>Wrapped up the evening with a little bit of Just Dance followed by some <a href="https://github.com/pump-io/pump.io/pull/1272">pump.io work</a> and more pairing on the Abstract Salad Factory app, which ended with me and Heather wondering if the  version deployed to Heroku didn't actually match the version on GitHub.</p>
<p>Also, signed up for checkins for next week as an accountability tool.</p>
<h2>Executive summary</h2>
<p>Week started out similar to the past week or two - I wasn't terribly good about sticking to RC stuff. However, I brought it back in the end! So I think I'm back on track.</p>
<p>Total time at RC 45 hours 25 minutes; cumulative time 141 hours 15 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-3</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-3</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 23 Jan 2017 19:38:24 GMT</pubDate></item><item><title><![CDATA[RC week 2]]></title><description><![CDATA[<p>This is week 2 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async="" defer="" src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 4</h2>
<p>Arrived ~12:30; departed ~23:45; total time at RC 11h15m.</p>
<p>Today is day four because last week only had three days - Monday was off because of New Years.</p>
<p>Spent most of today working on Stratic. Paired with <a href="https://github.com/atungare">Ajay</a> to fix a really nasty bug in stratic-paginate-indexes caused by some <a href="https://github.com/gulpjs/vinyl/issues/125">incorrect Vinyl documentation</a>, during which he showed me how <code>Array.prototype.map</code> is a nice taste of functional programming available in JS, as well as <a href="https://github.com/s-a/iron-node">Iron Node</a> - I had only previously used the built-in <code>node debug</code>. (Spent <em>hours</em> on this bug at home but solved it in ~30 minutes while pairing.) Spent most of the rest of the day getting pagination to function properly on strugee.net, which was surprisingly hard due to there just being a lot of edge cases to handle. (That, plus the fact that it took a while for me to settle on a design I liked.) Spent some more time polishing or updating other parts of strugee.net.</p>
<p>In the evening, spent some time pairing with <a href="https://github.com/Jmeggesto">Jacqueline</a>, teaching them to set up a cronjob using a DigitalOcean VPS.</p>
<h2>Day 5</h2>
<p>Arrived ~10:30; departed ~23:00; total time at RC 12h30m.</p>
<p>Worked on Stratic almost non-stop for literally the entirety of today (again). Started and (almost) finished <a href="https://github.com/strugee/stratic-indexes-to-rss">stratic-indexes-to-rss</a> and used the new feeds available on strugee.net to add myself to <a href="https://blaggregator.recurse.com">Blaggregator</a>. Took a quick poll on Zulip asking what the threshold was for there being so many repositories in a project that it warranted its own GitHub repo; instead of getting any replies, talked to <a href="https://stanzheng.com/">Stanley</a> in person who convinced me when he said, "what are the cons?" and I said, "good question! I dunno." Hence, founded the <a href="https://github.com/straticjs">straticjs</a> GitHub org. From there, did a huge push towards a <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> 1.0.0 release. It's very close - the core is done, but there are a lot of additional options that need to be added. I also can't release it before I fix up some TODOs currently in stratic-indexes-to-rss.</p>
<p>Additionally, took about a half hour break midday to give some ideas to <a href="https://github.com/heatherbooker">Heather</a>, who is teaching a workshop on Git tomorrow, and took another half-hour or so to watch non-technical lighning talks around 17:30(?).</p>
<h2>Day 6</h2>
<p>Arrived ~11:00; departed ~21:50; total time at RC 10h50m.</p>
<p>Spent a significant portion of the morning thinking about Zulip[1] design before and while filing <a href="https://github.com/zulip/zulip/issues/3235">this long bug</a> proposing some improvements to the way unread counts and notifications work. Also reviewed a couple <a href="https://prism-break.org/">PRISM Break</a> Pull Requests - I realize now I should've written about this on here (since it was <em>extrmemely</em> exciting to me!) but I'm now a comaintainer of PRISM Break. Thanks, <a href="https://github.com/nylira">@nylira</a>!</p>
<p>Spent a little time polishing my <a href="https://strugee.net/presentation-security-design">security presentation</a> for tomorrow. At first I spent a lot of time trying to find a style I liked on my own, but eventually I just threw in the towel and used <a href="https://github.com/bespokejs/bespoke-theme-cube">bespoke-theme-cube</a> which is what I had always previously used (since it's what <a href="https://github.com/bespokejs/generator-bespoke">generator-bespoke</a> generates).</p>
<p>Finally, spent some time working on pump.io. Filed a couple bugs on future improvements, notably one proposing that we add code to <a href="https://github.com/pump-io/pump.io/issues/1259">automagically manage Let's Encrypt certificates</a>, which I'm very excited about for several reasons. I also implemented <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">HTTP Strict Transport Security</a> which is a huge win for the network's security. The absence of HSTS was also the last remaining issue preventing me from gaining an A+ on SSL Labs for <code>pump.strugee.net</code> since I stopped using a reverse proxy setup, so that feels good.</p>
<p>Overall, I would say that this day was of average or slightly below average productivity. Also, while I got some useful stuff done, none of it was really related to RC (with the exception of the security presentation, thought that didn't take that much time).</p>
<p> [1]: for non-Recursers, <a href="https://zulip.org/">Zulip</a> is a really excellent realtime chat tool that RC uses for communication.</p>
<h2>Day 7</h2>
<p>Arrived ~12:20, departed ~22:30, total time at RC 10h10m.</p>
<p>Fixed a couple minor issues with my <a href="https://strugee.net/presentation-security-design">security presentation</a> before deploying it to strugee.net in preparation for my presentation. The talk itself went really well; my audience seemed to follow most of what I was presenting and I got some really good questions. As I stated at the beginning of the presentation, security is a <strong>huge</strong> topic, so really I looked at the list of subtopics and basically just picked one that I thought was interesting. There's a huge amount that I didn't cover so (partly) prompted by <a href="https://github.com/heatherbooker">Heather</a>, I'm now planning on doing weekly security presentations. Next week's will be on web application security and is already on the RC calendar.</p>
<p>Presented <a href="https://github.com/straticjs/generator-stratic">Stratic</a> during the weekly Thursday 5-minute presentations. I got up and said, "I'm super nervous about this talk because it's literally <em>all live demos</em>" and the audience laughed. And sure enough, I'd forgotten to add a dependency, so my <code>gulp serve</code> demonstration failed. That was okay though, because I still got to show the really interesting bits, which is the Unixy design in the gulpfile.</p>
<p>Finally, spent a lot of the evening with <a href="https://github.com/heatherbooker">Heather</a> working on this sickass "made at Recurse Center" GitHub README badge:</p>
<!-- TODO: fix this to use the real URL when it's up somewhere -->
<p><img src="https://people.strugee.net/~alex/made_at_RC.svg" alt="&quot;made at Recurse Center&quot; GitHub-style badge"></p>
<p>Whoohoo! \o/</p>
<h2>Friday</h2>
<p>Arrived ~13:15, departed ~22:20, total time at RC 9h5m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Had a very nice time walking to RC this morning which took about an hour because I kept stopping to take pictures - that felt really really good; it's been <em>way</em> too long since I've taken any and I missed it far more than I realized. Spent some time having a very nice discussion (both on Zulip and in real life) about different approaches to managing dotfiles in version control. Also spent some time discussing the design of git (particularly history rewriting, which I've <a href="https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful">previously written about</a>) and resolved that something I should work on at RC is getting experience with <a href="https://www.mercurial-scm.org/">Mercurial</a>. In between both of those I spent some time looking into where to put the badge that <a href="https://github.com/heatherbooker">Heather</a> and I made. Seems like the answer is <a href="https://swag.recurse.com/">swag.recurse.com</a> so I started looking at the project setup and plan to send some more PRs in the future.</p>
<p>Throughout the day I also reported a couple minor <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331117">Zulip</a> <a href="https://github.com/zulip/zulip/issues/3300">issues</a> as well as two Firefox bugs, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331117">one of which</a> got marked as a duplicate and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331121">one of which</a> is still UNCONFIRMED.</p>
<h2>Executive summary</h2>
<p>Pretty productive week but could've been better. In particular I didn't do a good job of working on "RC projects" and instead spent too much time on existing personal projects, primarily Stratic and pump.io.</p>
<p>Total time at RC 53 hours 50 minutes; cumulative time 95 hours 50 minutes (first week estimated).</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-2</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-2</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Sat, 14 Jan 2017 21:39:16 GMT</pubDate></item><item><title><![CDATA[RSS and pagination on strugee.net]]></title><description><![CDATA[<p>RSS and pagination are now enabled on strugee.net's blog, thanks to <a href="https://github.com/strugee/stratic-indexes-to-rss">stratic-indexes-to-rss</a> and <a href="https://github.com/strugee/stratic-paginate-indexes">stratic-paginate-indexes</a> respectively.</p>
<p>The pagination code is already pretty solid although there's always room for <a href="https://github.com/strugee/stratic-paginate-indexes/issues">improvement</a> - thanks to <a href="https://github.com/atungare">Ajay Tungare</a> for pairing with me at the <a href="https://recurse.com">Recurse Center</a> and helping me catch the bug! However, I'm not particularly confident in the RSS code, since RSS is actually somewhat tricky to properly handle. Because of that, I would seriously appreciate it if people tried adding the RSS feeds to their readers and seeing if anything breaks. If so, <a href="https://github.com/strugee/stratic-indexes-to-rss/issues/new">let me know</a>!</p>
<p>Cheers!</p>
]]></description><link>https://strugee.net/blog/2017/01/rss-and-pagination-on-strugee.net</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rss-and-pagination-on-strugee.net</guid><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 10 Jan 2017 18:48:01 GMT</pubDate></item><item><title><![CDATA[New project! thanksmaintainer.com]]></title><description><![CDATA[<p>So I've been thinking about a new project recently. It's called thanksmaintainer.com, and it helps you say, "thanks, maintainer!"</p>
<p>Basically this idea came about from <a href="https://github.com/gulpjs/gulp/issues/1806">this GitHub thread</a> where some user comes and disparages the Gulp project for being "not actively developed" and complains that it's taking a long time to release despite the fact that a) Gulp 4 <em>is</em> being actively developed and b) the Gulp maintainers owe this ungrateful, presumptive person <em>nothing</em>. As @contra <a href="https://github.com/gulpjs/gulp/issues/1806#issuecomment-247416856">says</a>:</p>
<blockquote>
<p>@rbatllet 4.0 is being worked - if you took more than five seconds to look you'd see it in other repos (for example: #1604). This repo has almost no code in it, it's a wrapper around the other modules so the contribution graph should be completely flat except for doc updates and major releases. We've responded to these tickets so many times - we have lives too.</p>
<p>I've had to move across the country 3 times since the tweet you linked - had my business unexpectedly fail (startups!), had relationships fail, deaths, travel, poverty, etc. - where the fuck am I supposed to find time to work on this while I'm trying to pay rent and put food in my stomach? The attitude people have towards open source authors is disgusting - I don't owe you anything, nobody does. Unless you've done something for the open source community (hint: you haven't!) then you aren't entitled to shit. If you want something to happen then help make it happen, otherwise log off.</p>
</blockquote>
<p>I read this comment and thought, <em>that freaking <strong>sucks</strong></em>. I feel like there's a problem in the open source and freedom-respecting software community where consumers demand stuff from project maintainers like the maintainers <em>owe</em> them something or they <em>deserve</em> some feature/bugfix/etc. This is obviously complete and utter bullshit - most maintainers work on their projects in their spare time - and it can start to feel like maintaining a project is a waste of time because all you get from it is a drove of angry entitled haters.</p>
<p>thanksmaintainer.com is designed to solve this problem. Here's how you use it; it's very simple:</p>
<ol>
<li>You visit thanksmaintainer.com</li>
<li>You sign in with GitHub</li>
<li>You find projects that you use and are grateful for</li>
<li>You click the "thanks, maintainer!" button</li>
</ol>
<p>thanksmaintainer.com will keep track of all the good vibes people are sending towards projects. When it reaches a certain threshold, the website will (probably) find a way to contact the maintainers and let them know how many people's lives they've made better. Not sure how this last bit will work yet, or if it'll even work like that at all. But the core idea is there - hopefully it'll be an easy way to give some love back to maintainers who may really need it.</p>
<p>Some design notes: it'll only work with GitHub to begin with, but eventually I hope to expand support to e.g. GitLab. Also, the fact that it's focused on projects and not maintainers is intentional - being thankful for a person instead of a project isn't as meaningful because you're not specifying why you're thankful. In contrast, the project-centric design lets you say, "these <em>particular</em> lines of code impacted my life in a meaningful way." Plus, a lot of projects have more than one maintainer, and it seems foolish to only thank <em>some</em> of the project maintainers, and not others.</p>
<p>I would love to hear feedback on this idea. So, if you have any thoughts, <a href="https://strugee.net/contact">get in touch</a> with me and let me know.</p>
<p>Stay happy &lt;3</p>
]]></description><link>https://strugee.net/blog/2017/01/new-project-thanksmaintainer.com</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/new-project-thanksmaintainer.com</guid><category><![CDATA[development]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 10 Jan 2017 00:55:54 GMT</pubDate></item><item><title><![CDATA[Where we're headed (a.k.a. I'm worried)]]></title><description><![CDATA[<p>(These are some thoughts I've had after reading <a href="http://www.nytimes.com/2016/12/14/nyregion/donald-trump-democrats-lawsuits.html?_r=0">To Combat Trump, Democrats Ready a G.O.P. Tactic: Lawsuits</a> in the New York Times.)</p>
<p>I'm worried.</p>
<p>I'm worried about my country.</p>
<p>Believe it or not, I'm not talking about Trump. Of course he's horrible, and he's something to be seriously worried about, but I think he's really only a symptom of a much deeper issue in America, which is this: we are in an arms race with ourselves. (One might also describe it as civil war.)</p>
<p>I mean, think about it. Republicans (I'll get to Democrats in just a sec) have spent the last 8 years creating and perfecting tools to block legislation from going through. Government is about compromise, and they refuse to compromise. They shut down the government for cheap political points[1], continually and covertly passed <em>almost</em>-but-not-quite-unconstitutional antiabortion laws, and topped it all off with a taxpayer-funded lawsuit againt President Obama - just to name a few malicious maneuvers they've used.</p>
<p>Now that Republicans control both Congress <em>and</em> the White House, Democrats are gearing up to use those exact same tactics against Republicans. It's shameful behavior, and it's unbefitting for a democracy. This country is supposed to be about elected officials finding ways to compromise with each other so that everyone's as happy as possible, but instead it's turned into a situation where everyone is laser-focused on pushing through their full political agenda, no matter how unproductive it is and no matter what the cost.</p>
<p>Here's the big problem: I may think it's shameful behavior, but that doesn't mean I don't support the Dems. I completely support it, because the incoming administration's agenda is completely horrific to me. I support the Democrats' intent to utilize lawsuits because I don't think politics is just a game; it's life-or-death. Somewhere out there, there's a kid who's <em>dying</em> because conversion therapy has pushed them to the brink of suicide. It's a glaring human rights abuse, and Mike Pence wants to <em>fund</em> it.</p>
<p>Republicans may have invented the do-nothing Congress, but now they can't put the genie back in the bottle. The Democrats and the Republicans are now <em>stuck</em> in a legal arms race, and neither of them can turn back because then the other side would <em>destroy</em> them. And that makes me very worried, because if we're in an arms race, that begs the question: what's the breaking point? And what happens when we hit it?</p>
<p>I don't have the answer to these questions. I don't know how to stop us from reaching that breaking point. I dunno, maybe if we were all just... more patient? But sadly, that seems extremely unlikely. Sometimes I wonder if there simply isn't anything to be done - if America is the great experiment in democracy, maybe this is just the inevitable failure of that experiment.</p>
<p>All I really know is that we need to do something, and soon. Because if we don't, we will grind ourselves out of existence.</p>
<p>Footnotes:</p>
<p> [1]: we actually know for a fact - from staff present at an early meeting - that none of those orchestrating the shutdown believed it would accomplish anything. They just wanted to score points with their base. This is <em>fact</em>.</p>
]]></description><link>https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</link><guid isPermaLink="true">https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</guid><category><![CDATA[musings]]></category><category><![CDATA[politics]]></category><pubDate>Fri, 23 Dec 2016 08:43:35 GMT</pubDate></item><item><title><![CDATA[Friendly reminder: protect yourself while protesting]]></title><description><![CDATA[<p>In light of the recent protests against Donald Trump's nomination, I wanted to write up some tips for people going out and protesting on how to protect themselves from retribution, both physical and legal. These guidelines are especially critical given the almost unfettered power the federal government and (through the federal government) local governments have to surveil citizens exercising their constitutional right to free assembly.</p>
<p>This is not a laughing matter: recall that President-elect Trump has repeatedly <a href="https://www.theguardian.com/us-news/video/2015/nov/23/donald-trump-calls-for-surveillance-of-mosques-video">called for greater surveillance of mosques</a>, indicating that he will have no problem expanding and abusing the power of the federal government's mass surveillance network. In <a href="https://www.theguardian.com/world/2016/nov/11/trump-surveillance-network-nsa-privacy">this Guardian article</a>, Thomas Drake (an NSA whistleblower predating Snowden) says it far better than I could:</p>
<blockquote>
<p>The electronic infrastructure is fully in place â and ex post facto legalised by Congress and executive orders â and ripe for further abuse under an autocratic, power-obsessed president. History is just not kind here. Trump leans quite autocratic. The temptations to use secret NSA surveillance powers, some still not fully revealed, will present themselves to him as sirens.</p>
</blockquote>
<p>So, here are some tips on how to protect yourself while engaging in a political protest:</p>
<h2>General guidelines</h2>
<ul>
<li>Don't talk to police</li>
<li>
<p>If possible, leave your phone at home</p>
<ul>
<li>If this isn't possible, leave your phone in Airplane Mode or even better, turn it off. <strong>It is not enough to not post anything; you cannot connect to the cell network <em>at all</em>.</strong> See <a href="https://en.wikipedia.org/wiki/IMSI-catcher">IMSI catchers</a>.</li>
<li>Use a passcode on your phone - this gives you a better position under the 5th Amendment for resisting a search of your phone</li>
<li>If police try to force you to give up the passcode of your phone, they are probably breaking the law</li>
<li><strong>Disable fingerprint unlock</strong>, as <a href="http://time.com/3558936/fingerprint-password-fifth-amendment/">police are legally allowed to force you to unlock the phone via your fingerprint</a> (note: this link is insecure; consider visiting it in <a href="https://www.torproject.org/">Tor Browser</a>)</li>
<li>
<p>Make sure full-disk encryption is enabled on your phone</p>
<ul>
<li>iPhone users: this is already on if you're using iOS 8 or later</li>
<li>Android users: this is often enabled by default, but you should check by going to Settings &gt; Security and looking under "Encryption"</li>
<li>Windows Phone users: not available. Leave your phone at home.</li>
</ul>
</li>
</ul>
</li>
<li>Do not bring laptops or tablets - the 5th Amendment protections above <a href="https://www.cnet.com/news/doj-we-can-force-you-to-decrypt-that-laptop/">do <em>not</em> necessarily apply</a> to these devices, so they can be seized and searched even without a warrant</li>
<li><a href="https://www.youtube.com/watch?v=d-7o9xYp7eE"><strong>Seriously do <em>not</em> talk to the police</strong></a></li>
<li>Use strong encryption for everything you do online</li>
<li><strong>Don't post anything on social media about the protest</strong>, including photos, checkins, and text, either during or after. (Remember: the protest lasts one night, but <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a> lasts forever.)</li>
<li>Under the First Amendment you have the right to film police officers but be <em>extremely</em> careful because some police departments are extremely hostile towards this behavior anyway, to the point of physical violence. See <a href="https://www.aclu.org/know-your-rights/photographers-what-do-if-you-are-stopped-or-detained-taking-photographs">the ACLU's guide</a> for more information.</li>
</ul>
<h2>What do do if you're stopped by the police</h2>
<p>If you're stopped by the police and they start questioning you, be polite but invoke the Fifth Amendment (i.e. refuse to talk to them). Ask if you're under arrest. If not, great! The police officer cannot legally detain you and you're free to go - do so calmly and silently.</p>
<p>If you <em>are</em> under arrest, here are the things you should do right away:</p>
<ul>
<li><strong>Say: "under what grounds am I under arrest?"</strong> The officer is only allowed to arrest you if they believe you are about to commit or are in the act of committing a crime. (Remember, photographing officers is not a crime; if they say something about this, remind them that it's protected under the First Amendment.)</li>
<li><strong>Immediately ask for a laywer.</strong> If you don't have one, the government <a href="https://en.wikipedia.org/wiki/Sixth_Amendment_to_the_United_States_Constitution#Assistance_of_counsel">is required</a> to provide you with one.</li>
</ul>
<p>Then, keep these tips in mind:</p>
<ul>
<li>Stay calm</li>
<li>Be polite</li>
<li>Don't run</li>
<li>Don't lie</li>
<li>Do not resist, argue, or be rude, <em>even if you are innocent</em></li>
<li>No matter what the officer asks you or tells you, <strong>always say: "I invoke my right to remain silent."</strong> Do <em>not</em> answer any questions, no matter how innocuous.</li>
<li>If you <em>do</em> answer questions, you're allowed to stop at any time. But still don't do it in the first place.</li>
<li>Under some states, you can be compelled to give your name (but nothing else). <strong>Before you leave your house, look up whether your state has this policy.</strong></li>
<li>If possible, write down the details of what's happened.</li>
<li>Do not physically resist the officer, <em>even if they're violating your rights</em>. Instead, write down the violation. Then file a written complain later and/or contact a lawyer or your local ACLU.</li>
<li>Useful things to write down in this case: the officer's name, their badge and patrol car numbers, the agency the officer is from, contact information for witnesses</li>
<li>If you're injured, photograph the injuries</li>
<li>You don't have to consent to searches of your person or your car. The officer may pat down your clothes for a weapon, but anything beyond that requires your consent.</li>
</ul>
<p>The ACLU also provides additional information for <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-law-enforcement-additional-information-non-citizens">non-citizens</a>, <a href="https://www.aclu.org/know-your-rights/photographers-what-do-if-you-are-stopped-or-detained-taking-photographs">people taking photos or videos</a>, <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-police-youth">young people</a> (e.g. college students) and <a href="https://www.aclu.org/know-your-rights/deaf-rights-what-do-when-dealing-police">deaf people</a>.</p>
<h2>More resources</h2>
<p>A lot of the above is based on the ACLU's excellent <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-law-enforcement-questioning?redirect=know-your-rights/when-encountering-law-enforcement-questioning">"Know Your Rights" booklet</a>. The ACLU also has a page specifically devoted to <a href="https://www.aclu.org/know-your-rights/what-do-if-your-rights-are-violated-demonstration-or-protest">rights violations at demonstrations and protests</a>.</p>
<p><a href="https://en.wikipedia.org/wiki/Miranda_warning#The_Miranda_warnings">PRISM Break</a> is a good resource for technology that will help you resist mass surveillance. <a href="https://whispersystems.org/">Signal</a> is not on that list, but is also very, very good and extremely easy to use. Keep in mind, however, that following recommendations from PRISM Break is not a substitute for leaving your phone at home.</p>
<p>If you have more resources or tips that should be listed here, <a href="https://strugee.net/contact">contact me</a> (or <a href="https://github.com/strugee/strugee.github.com/blob/src/src/blog/friendly-reminder-protect-yourself-while-protesting.md">edit this on GitHub</a>) and I'll be sure to add them.</p>
]]></description><link>https://strugee.net/blog/2016/11/friendly-reminder-protect-yourself-while-protesting</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/friendly-reminder-protect-yourself-while-protesting</guid><category><![CDATA[politics]]></category><category><![CDATA[privacy]]></category><pubDate>Fri, 18 Nov 2016 01:17:11 GMT</pubDate></item><item><title><![CDATA[Pump.io 2.0.4 is available]]></title><description><![CDATA[<p>Greetings!</p>
<p>After a beta period of just over a week, pump.io 2.0.4 is now available on npm and GitHub. Whoohoo!</p>
<p>(This was originally going to be 2.0.0, but we had to do a couple patch releases due to some outdated documentation and several critical bugs. 2.0.4 is mostly the same thing as 2.0.0.)</p>
<h2>Changes</h2>
<p>Note that this release includes security improvements - namely, a newer Express version and a better TLS configuration - and therefore <strong>admins are encouraged to upgrade ASAP</strong>.</p>
<p>For the full list of changes, see <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#201---2016-11-10">the change log</a>.</p>
<h3>Breaking changes</h3>
<p>(As I said in <a href="https://strugee.net/blog/">the beta announcement</a>:)</p>
<p>Pump.io 2.0.4 is a drop-in replacement for 1.0.0 <strong>unless</strong> you have any plugins configured or you modify the templates.</p>
<p>Plugins are likely to be affected by the upgrade to Express 3.x. The easiest way to migrate is probably to just run pump.io, test out the relevant parts of the app, and see where your plugin crashes. You might also want to look at the <a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">Express 3 change log</a>.</p>
<p>If you modified the templates, you'll be affected by the templates' rewrite from utml into Jade. Migration should be relatively painless but has to be done manually. Your best bet will be to save a copy of the diff you created, undo your changes, upgrade, then use the diff you saved to reintroduce your changes. You'll have to run <code>npm run build</code> after making changes to Jade files.</p>
<h3>Non-breaking changes</h3>
<p>This release is actually relatively minor in terms of non-breaking changes; however, we <em>do</em> have some nice new improvements:</p>
<ul>
<li>A pump(1) manpage is now included</li>
<li>Any internal web UI link with a <code>data-bypass</code> attribute is now ignored by the routing logic (useful for e.g. custom pages added by the admin)</li>
<li>YouTube links in posts are now shown as  embeds by the web UI (<a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">#1158</a>)</li>
<li>TLS connections now use Mozilla's "intermediate" cipher suite and forces server cipher suite preferences (<a href="https://github.com/pump-io/pump.io/issues/1061">#1061</a>)</li>
<li>Various minor fixes and improvements</li>
</ul>
<h2>Upgrading</h2>
<p>Upgrading is dead-simple. If you used our recommended install method, and installed from npm, you can upgrade with:</p>
<pre><code>sudo npm install -g pump.io@2
</code></pre>
<p>If you installed from source, you can upgrade with:</p>
<pre><code>git fetch
# If you modified templates, save the diff at this step
git checkout .
git checkout v2.0.4
npm install
# Restore your template changes
npm run lint:jade # Optional but recommended if you changed templates
npm run build
</code></pre>
<p>Both of these methods will work whether you're running 0.3.0, 1.0.0, or 2.0.0 beta. Make sure to restart pump.io after performing the upgrade.</p>
<h2>Getting help</h2>
<p>If you have any issues with the upgrade, get in touch with <a href="https://github.com/pump-io/pump.io/wiki/Community">the community</a>. You can also email me at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
]]></description><link>https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Sat, 12 Nov 2016 07:49:14 GMT</pubDate></item><item><title><![CDATA['Free software' phrasing considered harmful]]></title><description><![CDATA[<p>For a while now I've been avoiding using the term "free software."</p>
<p>Why? It's just plain confusing to people. I know Richard Stallman will tell you that it means freedom, not gratis. <em>It doesn't matter</em>. It's still ambiguous and needlessly conflates two different concepts.</p>
<p>Instead of "free software," I propose "freedom-respecting software" as a replacement. This phrasing is not only unambigous, it also does a much more effective job of communicating the general meaning of the term without further explanation. (Of course you'll probably still need to explain it, but you'll have to spend a lot less time doing so.) The one problem with this phrasing is that it's longer, but even that doesn't hold water - because of the aformentioned problems with "free software," people actually don't say "free software" all that much; instead, they say "free (as in freedom) software" which is unambiguous, but awkward on multiple levels. Not only is it a less eloquent way of describing the concept, but gramatically speaking it's really terrible as it puts a parenthetical qualifier in-between an adjective and a noun, which just sounds <em>terrible</em> and unnatural. Seriously, say both of them out loud. "Freedom-respecting software" and "free (as in freedom) software" - which one sounds like less of a mouthful?</p>
<p>Hence, I think "free software" as a term should be considered harmful, and replaced with "freedom-respecting software" instead.</p>
<p><em>Edit 0:58 10/10/16:</em></p>
<p>Another advantage of "freedom-respecting software" is that it's still closely related to the old term, allowing for a much easier pivot. Consider "libre software" which AFAICT had the same goals as this proposal but never really took off - in part, I think, because it sounds very different from an already-established term. (Another way of putting this is that it's conceptually an improvement to an existing term instead of being something <em>brand-new</em>, and therefore all existing associations will carry over with far more ease.)</p>
<p>I'd also point out that the problem of ambiguity is more serious than I've said above. First of all, generally speaking I'm suspicious of any proposal or argument that begins or ends with "we just need to educate people more." Education is an important part of the freedom-respecting software movement - remember, that movement is by and for the people - but I think that argument is too frequently simply an excuse for a poor initial design. (Security, I'm looking at you.) Second, such an ambiguity also muddles our search results. When people search for "free software" they <em>do</em> get our stuff (a fact that I was pleasantly surprised by!) but they also get loads and loads of pages for gratis Windows crapware. That's unideal and it is unlikely to change, ever. Even if people <em>were</em> able to readily grasp the distinction between freedom and gratis that we're pitching, we will never, ever have enough influence on the language people use to get them to <em>stop</em> using "free" to mean gratis - which means that Google will continue showing gratis crapware as "free software."</p>
<p>Finally, as <a href="https://github.com/nylira/prism-break/issues/1601">pointed out</a> by some excellent PRISM Break contributors, me writing this blog post and then talking about it occasionally is a <em>far</em> dumber idea than directly contacting the FSF, which I now intend to do Real Soon Nowâ¢.</p>
]]></description><link>https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Wed, 09 Nov 2016 22:18:12 GMT</pubDate></item><item><title><![CDATA[Pump.io 2.0.0 beta is here]]></title><description><![CDATA[<p>Greetings!</p>
<p>As pump.io is gearing up for our 2.0.0 release, I just published a beta to npm. We'd love it if any interested admins could upgrade their nodes and report any bugs you may run in to. (All bug reports are helpful, but just so we're clear, we're likely to only fix regressions from 1.0.0.)</p>
<h2>Changes</h2>
<p>Pump.io 2.0.0 beta is a drop-in replacement for 1.0.0 <strong>unless</strong> you have any plugins configured or you modify the templates.</p>
<p>Plugins are likely to be affected by the upgrade to Express 3.x. The easiest way to migrate is probably to just run pump.io, test out the relevant parts of the app, and see where your plugin crashes. You might also want to look at the <a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">Express 3 change log</a>.</p>
<p>If you modified the templates, you'll be affected by the templates' rewrite from utml into Jade. Migration should be relatively painless but has to be done manually. Your best bet will be to save a copy of the diff you created, undo your changes, upgrade, then use the diff you saved to reintroduce your changes. You'll have to run <code>npm run build</code> after making changes to Jade files.</p>
<p>For the list of non-breaking changes, see <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#200-beta-1---2016-11-02">the change log</a>.</p>
<h2>Upgrading</h2>
<p>Upgrading is very easy. If you used our recommended install method, and installed from npm, you can upgrade to the beta with:</p>
<pre><code>sudo npm install -g pump.io@beta
</code></pre>
<p>If you installed from source, you can upgrade with:</p>
<pre><code>git fetch
# If you modified templates, save the diff at this step
git checkout .
git checkout v2.0.0-beta.1
npm install
# Restore your template changes
npm run lint:jade # Optional but recommended if you changed templates
npm run build
</code></pre>
<p>Make sure to restart pump.io after performing the upgrade.</p>
<h2>Getting help</h2>
<p>If you have any issues upgrading to or running the beta, please don't hesitate to get in touch with <a href="https://github.com/e14n/pump.io/wiki/Community">the community</a>. You can also email me at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
]]></description><link>https://strugee.net/blog/2016/11/pump.io-2.0.0-beta-is-here</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/pump.io-2.0.0-beta-is-here</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Thu, 03 Nov 2016 03:05:59 GMT</pubDate></item><item><title><![CDATA[Webmention test receiver]]></title><description><![CDATA[<p>This post exists only to have a dedicated test URL to send example webmentions to until <a href="https://github.com/aaronpk/webmention.io/issues/77">webmention.io issue 77</a> is fixed (or in other words, I need a URL with a wide variety of webmention data associated with it so I can test the webmention styling you see at the bottom of all individual post pages).</p>
<p>It will be removed eventually, probably.</p>
]]></description><link>https://strugee.net/blog/2016/11/webmention-test</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/webmention-test</guid><category><![CDATA[development]]></category><pubDate>Wed, 02 Nov 2016 06:34:40 GMT</pubDate></item><item><title><![CDATA[GitHub's 'squash and merge' default considered harmful]]></title><description><![CDATA[<p>Recently GitHub launched two new ways to merge Pull Requests: "rebase and merge" and "squash and merge". That means that projects now have three ways to merge PRs:</p>
<ul>
<li>Merge - creates a merge commit merging the branch (even if it's fast-forwardable)</li>
<li>Rebase and merge - rebases on top of the target branch and fast-forwards</li>
<li>Squash and merge - rebases on top of the target branch, squashes all commits into a single commit, and fast-forwards</li>
</ul>
<p>Now, the default is "squash and merge", because apparently that's what people find to be the "prettiest" history. This bothers me for one simple reason: a squash and merge default means a <em>history destruction</em> default[1].</p>
<p>The whole point of commit squashing is to destroy history. Sometimes that's fine - for example, I might squash a typo fix into an earlier commit, because who cares that I typo'd <code>vare</code> instead of <code>var</code>? However, anything less trivial than typo fixes is valuable information about how the project evolved. Even if all of the commits just add stuff, and don't change what's happened earlier in the branch (i.e. even if the direction the implementation's taking doesn't change part-way through) the history contained in the branch is <em>still</em> valuable, because the branch's shortlog will give you a nice overview of exactly what changes happened in the branch. Now, you could of course make the argument that commit squashing shows that same information because by default, in both Git and GitHub, the commit messages being squashed are included in the suggested final commit message. I prefer keeping the individual commits, but that's a valid argument.</p>
<p>However, that doesn't change the fact that in cases where the implementation direction <em>does</em> change part-way through, GitHub's default is actively promoting the irrevocable[2] destruction of valuable history. Lots and lots of people use the GitHub Merge Button, especially those who are new to Git. This default is causing those people to unwittingly destroy valuable information. Sure, it looks nicer in the commit log, and I totally advocate for using squash and merge when it makes sense. But those cases are few and far between - it's basically just a small changes, plus a couple typo fixes or additions. And besides, I think it's far better to have a default of an ugly history rather than a default of an incomplete history. The former may not be the prettiest to look at, but the latter has the potential to actively stop people from doing their jobs[3].</p>
<p>For those curious, here's when I use each mode of the GitHub Merge Button:</p>
<ul>
<li>Merge - when I have a long-running branch that made significant changes and/or diverged significantly from the target branch. In this case, it's valuable to clearly distinguish what's part of the project and what isn't. Rebase and merge is no good because then it's not clear in the history when the branch started and ended. This is particularly evident when looking at <code>git log --graph</code>.</li>
<li>Rebase and merge - what I use most of the time. I use this when there were a couple small commits that were interesting enough to preserve the difference, but the overall change wasn't so huge that it needs to be clearly distinguished in the history. This provides a nice and pretty commit graph.</li>
<li>Squash and merge - I rarely use this. When I do, it's because all of the commits on some branch are <em>so</em> trivial, they really don't matter. Mostly this means that the overall change is tiny, and the only additional commits that are added are small additions to the first.</li>
</ul>
<p>So there you have it. How I use GitHub's Merge Button, and why I think the "squash and merge" default should be considered harmful.</p>
<p>Footnotes:</p>
<p> [1]: I'd like to point out that this is only a problem in Git. Mercurial has (or will have shortly) <a href="https://www.mercurial-scm.org/wiki/ChangesetEvolution">Changeset Evolution</a>, which keeps track of how changesets evolve over time. I.e. when you rewrite history, you're not losing any information.</p>
<p> [2]: I'm sure some of you are about to excitedly tell me about a fantastic tool called the reflog, and I really should read Pro Git because it's a fantastic book and has an entire chapter on data recovery. <em>I know</em>. The reflog is <em>not</em> the right answer for this; not only is it local to (likely) a single developer's machine, but it only stretches back a couple months and only works if the old, dangling commits aren't garbage-collected. By the time someone might be interested in looking at the history that was lost, it's probably far, far too late.</p>
<p> [3]: Another rarely-encountered but very serious problem with both "squash and merge" <em>and</em> "rebase and merge" is when people merge upstream changes in a PR. This is a perfectly legitimate workflow - PRs are great for discussing changes, etc. (although a lot of people think they're the <em>only</em> way to merge things, so they open PRs and then immediately merge them - this, IMHO, is very much <em>not</em> a legitimate workflow) - but if you do anything but merge (which includes both GitHub's "Merge" option and fast-forwarding locally on the CLI), you may have a Very Bad Time the next time you go to merge upstream changes to your fork. Why? Because in Git's view, the changes you merged the first time <em>haven't actually been merged</em>. After all, commit SHAs are nowhere to be found in the tree, since when you rewrote history you changed those IDs! Git has no way of knowing that your rewritten commits and the supposedly "unmerged" commits are basically equivalent. (Mercurial, on the other hand, would've kept track of this information and would have no problem at all.)</p>
]]></description><link>https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Thu, 20 Oct 2016 00:40:18 GMT</pubDate></item><item><title><![CDATA[Android freedom]]></title><description><![CDATA[<p>Recently I backed up and restored both my Android phone and my Android tablet. There were a couple reasons for both of these. The tablet had been borked for quite a long time (any time I tried to upgrade it from the Android 5.0 build it was running, it failed - also the thing just froze randomly). The phone was on the CyanogenMod nightly channel and I wanted to switch to the snapshot channel, plus within the past couple days both WiFi and the cell network data connection straight up stopped working so it was pretty unusable. At first I wanted to switch to <a href="https://copperhead.co/android/">CopperheadOS</a> on both devices. CopperheadOS doesn't support GApps and will probably never support GApps (for very good reasons), and I said, maybe I can make it work. Sadly, I couldn't - I still regrettably need stuff from the Google Play Store. (The tablet ended up back on stock because I want fast upgrades, and the phone ended up on CyanogenMod because they have the fastest upgrades while still offering root.)</p>
<p>The whole experience made me think, though - what would it take to create something that functioned like GApps, but respected your freedom? I'm sure some people reading are already scrambling to link me to their favorite Google Play Services reimplementation, but this isn't the only thing that's in GApps. You gotta think about the user experience, too. Such a system should be able to:</p>
<ul>
<li>Provide the nice APIs that Google Play Services does</li>
<li>Store your photos in the cloud, like Google Photos</li>
<li>Related to the above, automatically backup and restore apps and their data</li>
<li>Transfer from other devices, similar to the above item</li>
<li>Support functionality like Google Now</li>
<li>Ditto for Google Assistant</li>
<li>Integrate into the initial device setup to configure all this stuff</li>
</ul>
<p>I'm sure there are more that I've missed.</p>
<p>Honestly, we're actually quite close to this. The first bullet can be mostly accomplished with something like <a href="https://microg.org/">microG</a>. Automatic backup and photo storage needs a UI, but fundamentally can be accomplished with any generic WebDAV implementation. F-Droid can be used as the app store. Imagine this: you take a bunch of photos and install a bunch of freedom-respecting apps on your phone. Then, you get a new one. When you set it up, the phone prompts you to sign in to your WebDAV account (which could be e.g. ownCloud, or a WebDAV implementation on <a href="https://sandstorm.io/">Sandstorm</a>) and then automatically reinstalls all your apps from F-Droid, as well as retrieving their data from ownCloud. When you open the built-in gallery app, all your photos are already there because they're seamlessly backed up to the cloud. <em>Your</em> cloud. Transfer can be accomplished in a lot of ways, but I can easily see it building on the above.</p>
<p>Supporting something like Google Now is non-trivial, but I've even already proposed <a href="https://github.com/cantino/huginn/issues/1583">a feature for Huginn</a> that would make this possible. Google Assistant would be very, very difficult, but even without that, we'd have come a long way.</p>
<p>This reality is not that far off. What's missing is some UI pieces and a nice ZIP that can be flashed on top of ROMs, similar to how GApps are flashed today. So who's going to put it all together?</p>
<p>(I suppose I've just volunteered myself - oh well... I'll just add it to my endless list of projects.)</p>
]]></description><link>https://strugee.net/blog/2016/10/android-freedom</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/android-freedom</guid><category><![CDATA[musings]]></category><pubDate>Tue, 18 Oct 2016 02:40:43 GMT</pubDate></item><item><title><![CDATA[Pump.io 1.0.0 is now available!]]></title><description><![CDATA[<p><a href="https://github.com/e14n/pump.io/releases/tag/v1.0.0">Pump.io 1.0.0</a> is officially available! Whoooo!</p>
<p>I just wanted to write up an announcement real quick to celebrate. Here's a sample what's gone into this release:</p>
<ul>
<li>Node 4.x support</li>
<li>Lots of security improvements including a better cross-site scripting scrubber and security-related headers that help protect the web UI (most notably, the web UI now declares a Content Security Policy)</li>
<li>Minor improvements to the API to make it (slightly) smarter</li>
<li><a href="https://www.gnu.org/software/librejs/">LibreJS</a> support</li>
<li>Numerous dependency upgrades, most notably Connect</li>
<li>And of course, tons of minor bugfixes and improvements</li>
</ul>
<p>For more details, see the brand-new <a href="https://github.com/e14n/pump.io/blob/master/CHANGELOG.md#100---2016-08-26">change log</a>.</p>
<p>And of course since we're now past 0.x.x releases, we're now officially making a commitment to the community to make only API-compatible changes going forward (or at least, until 2.0.0!).</p>
<p>As this release <em>does</em> improve security and fixes a lot of bugs, node administrators are encouraged to upgrade as soon as possible. If you have a global, npm-based install, you can upgrade with:</p>
<pre><code>sudo npm install -g pump.io
</code></pre>
<p>And with a source-based install:</p>
<pre><code>git pull
git checkout v1.0.0
npm install --production
</code></pre>
<p>If you're upgrading from 0.3.0, everything should Just Work(tm). Don't forget to restart your daemon!</p>
<p>One final note - the rumors are true. While we're not doing so <em>yet</em>, we are, in fact, planning to deprecate running under Node.js 0.10 and 0.12 very soon. Also, if you upgrade to Node.js 4.x early, the new, better XSS scrubber will be enabled - <em>however</em>, be aware that pump.io is far less tested under Node.js 4.x and you are likely to run into more bugs than you would under 0.10 or 0.12. This is an unfortunate situation, but sadly there's really nothing to be done about it. :(</p>
<p>Special thanks to Menno Vossen, Laura Arjona, Evan Prodromou, Jan Kusanagi and all the other volunteers who did so many different things to make this release happen. It truly wouldn't have happened without you.</p>
<p>Enjoy the release!</p>
<p>With &lt;3,</p>
<p>AJ</p>
]]></description><link>https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Sat, 27 Aug 2016 06:37:54 GMT</pubDate></item><item><title><![CDATA[Pump.io: call for testers, call for feedback]]></title><description><![CDATA[<p>So in my <a href="https://strugee.net/blog/2016/08/new-stuff-in-pump.io">last post</a>, I mentioned that I'd left a couple things for a second blog post. This is that post, and instead of being about all the cool stuff going on in the pumpiverse, it's about stuff that you - yes, <em>you</em>! - can do! It's super easy too.</p>
<h2>Call for testers</h2>
<p>So as I mentioned, the <code>utml-to-jade</code> branch is basically finished (see <a href="https://github.com/e14n/pump.io/pull/1170">PR #1170</a>). Since switching templating languages is a huge, huge change, by definition touching every single part of the Web UI, we want to make sure it's well-tested. This is especially critical given the fact that the Web UI unfortunately has <a href="https://github.com/e14n/pump.io/issues/147">very little test coverage</a>.</p>
<p>That's where pump.io system administrators come in. If you're a sysadmin and you're willing to test this change on your node, we'd very much appreciate it. There's very little risk, since I <em>think</em> I've squashed all the regressions that happened, but you should be willing to <a href="https://github.com/e14n/pump.io/issues">report bugs</a> if you <em>do</em> run into them. In particular, you should look out for:</p>
<ol>
<li>Links that seem to encompass too much text</li>
<li>Missing spaces - e.g. <code>Alex Jordanat [date]</code> instead of <code>Alex Jordan at [date]</code></li>
<li>HTML code showing up on the page - e.g. <code>Test note&lt;br /&gt;</code> instead of <code>Test note</code> followed by a line break</li>
</ol>
<p>Note that the <code>utml-to-jade</code> branch incorporates all changes in the <code>master</code> branch, so you may want to check out the advice in <a href="https://github.com/e14n/pump.io/wiki/Running-from-git-master">Running from Git master</a>.</p>
<p>Sound interesting? Want to take part in the development of pump.io? Installing is super easy:</p>
<pre><code>$ [sudo] npm install -g e14n/pump.io#utml-to-jade
</code></pre>
<p>This will work even if you already have a (non-source) install of pump.io - just make sure to restart the server afterwards.</p>
<p>Note that this command has some semi-terrible logic to build Jade templates on install (this is a workaround for a deficiency in npm). If you get a scary warning message from npm, please <a href="https://github.com/e14n/pump.io/issues">file an issue</a>, making sure to include the full log.</p>
<h2>Call for design feedback</h2>
<p>The other big thing that's happening is the pump.io 1.0.0 tshirt we're designing! I've spent quite a bit of time working on a variety of candidate designs which can be viewed in <a href="https://cloud.strugee.net/index.php/s/Ymw2RAdxyFZuuwu">this ownCloud share</a>. Obviously we want the coolest tshirt possible, so we're looking for any design feedback that people have. Anyone with some spare time can glance through the designs, and we'd be thrilled to get everyone's opinions.</p>
<p>If this sounds interesting, I'd welcome you to check out <a href="https://cloud.strugee.net/index.php/s/Ymw2RAdxyFZuuwu">the drafts</a>. As always, get in touch with the community through <a href="https://github.com/e14n/pump.io/wiki/Community#community-accounts-communication">our chatroom</a> or if you'd prefer, you can email me directly at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
<p>Thanks so much! :)</p>
]]></description><link>https://strugee.net/blog/2016/08/pump.io-call-for-testers-call-for-feedback</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/pump.io-call-for-testers-call-for-feedback</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Wed, 10 Aug 2016 17:35:36 GMT</pubDate></item><item><title><![CDATA[New stuff in pump.io]]></title><description><![CDATA[<p>So I promised <a href="https://strugee.net/blog/2016/05/stratic-part-one">a (long) while ago</a> that I'd blog about all the stuff going on in <a href="http://pump.io">pump.io</a>. And there is a <em>lot</em> going on. Where to even begin?</p>
<h2>LFNW talk</h2>
<p>I think the first thing I should mention is <a href="https://linuxfestnorthwest.org/2016/sessions/pumpio-community">the talk</a> I gave at LinuxFest Northwest this year. It went really, really well (even though I finished half the slides the night before), and people seemed to be really engaged, especially during questions. It starts off by covering the history behind pump.io: that includes the relevant protocols, like OStatus and <a href="http://activitystrea.ms">ActivityStreams</a>, but also the motivation behind abandoning StatusNet (aka current GNU Social) in favor of a brand-new network. Next I move on to the way that pump.io itself works, namely, its function as a generic ActivityStreams distribution engine. To put this another way, I explain why this quote from <a href="https://github.com/e14n/pump.io/blob/master/README.md">the README</a>:</p>
<blockquote>
<p>I post something and my followers see it. That's the rough idea behind the pump.</p>
</blockquote>
<p>is a pretty accurate way of describing what pump.io actually does. (I quote that quite a few times in the slides themselves.) I end with a discussion of the recent developments in the community, which are of course wonderful, and a short call-to-action for people to contribute - either directly to the software, or by joining the network and spreading pump.io.</p>
<p>Oh, and by the way - the talk was recorded! So you can watch it <a href="https://www.youtube.com/watch?v=uQ6RVTFdYNc">on YouTube</a> or, even better, <a href="https://media.strugee.net/u/alex/m/linuxfest-northwest-2016-pump-io-the-community/">on my personal MediaGoblin</a>. Fitting, since (as I mention in the talk) MediaGoblin federation will soon be released, and it's based on (and fully interoperable with) the pump.io protocol!</p>
<h2>Conservancy application</h2>
<p>Pump.io is applying to the <a href="https://sfconservancy.org/">Software Freedom Conservancy</a>! This is super fantastic for us for a number of reasons. One of the biggest advantages is the fact that inside Conservancy (assuming our application is accepted), we'll be able to take donations much, much easier. This is primarily important because nodes in the pump.io network are volunteer-run, but they still require funds to operate. We're thinking about models wherein people will be able to donate to "pump.io", and then some (most?) of those funds will be used to pay for the network. (In particular, they'll be used to pay for the existing E14N nodes that Evan currently runs, which will become extremely useful once we transition those nodes to community owners). Conservancy also provides useful miscellaneous services, like owning our logo and making sure that if we encounter license violations, the license is properly enforced. But perhaps most importantly, becoming part of Conservancy cements pump.io even more in the community - both the group of people working on the software &amp; network, but also the larger free software world.</p>
<h2>ReadTheDocs</h2>
<p>We've started a <a href="http://pumpio.readthedocs.io/en/latest/">dedicated space</a> for project documentation, hosted on ReadTheDocs. We're plannning to move a bunch of content from the GitHub wiki into this project, and hopefully it'll become a thorough and central place for pump.io documentation - both for users and for deployers.</p>
<h2>Triage</h2>
<p>We've spent quite a bit of time going through open issues and prioritizing them. A lot of issues have a release target now, and it feels really nice to feel like our issue tracker is a bit more organized.</p>
<p>Special thanks to <a href="https://identi.ca/larjona">Laura Arjona</a> for driving this work.</p>
<h2>Various minor code improvements</h2>
<p>There have been a <em>bunch</em> of small bugfixes and improvements that have gone into the <code>master</code> branch - some of them user-facing, and some of them making the development experience better. Notable changes include:</p>
<ul>
<li>Migrating from Connect 1.x to Connect 2.x (this is just a start - Connect 2.x is still deprecated, but it gets us closer than we were to relying on a fully non-deprecated stack)</li>
<li>JSHint is now automatically run against <code>bin/</code> and <code>routes/</code> when <code>npm test</code> is run. This makes it super obvious when there are regressions in code quality, especially in Pull Requests (since Travis CI will fail if JSHint doesn't succeed.)</li>
<li>JSCS is now used to enforce code style. It's automatically run against the entire codebase (whoo!) when you run <code>npm test</code>, and it's awesome for the same reason - much of the style-related feedback that would've previously ended up in a Pull Request can now be dealt with directly on a local development machine, reducing PR review time for both the reviewer <em>and</em> the contributor.</li>
<li>LibreJS is now <a href="https://github.com/e14n/pump.io/pull/1058">supported</a></li>
<li>Tests now pass! Whooooooooo! (Thanks to Menno Vossen for sending <a href="https://github.com/e14n/pump.io/pull/1136">the enormous Pull Request</a> that made this happen.)</li>
</ul>
<p>Those are just the bigger ones, of course - there are a bunch of even smaller problems that got squashed as well. I'd also like to point out that quite a few of these were long-standing PRs which <em>finally</em> made it into core, which is awesome for everyone.</p>
<h2>Express 3.x migration</h2>
<p>I've been putting in a lot of work to migrate pump.io to Express 3.x. It's a huge amount of work, but when complete, it will bring us very, very close to being able to migrate onto Express 4.x, which is modern and fully-supported by upstream. Basically what I've been doing is just running the app, seeing where it crashes, going to the exception site, and fixing the problem. Rinse, repeat. You can check out this work on the <a href="https://github.com/e14n/pump.io/tree/express-3.x"><code>express-3.x</code></a> branch - currently, this branch can successfully start up the app, but will crash pretty soon after you try to do almost anything else.</p>
<p>This work, unfortunately, is on hold while another important project is completed: converting all the templates from utml to Jade.</p>
<h2>utml to Jade transition</h2>
<p>This is basically what it sounds like. Previously, the templates in pump.io were based on <a href="https://github.com/mikefrey/utml">utml</a>, which is essentially a thin wrapper around <a href="http://underscorejs.org/#template">Underscore.js's <code>_.template()</code></a> function. However, utml doesn't work with Express 3.x (and it's not really worth <em>making</em> it work), plus it's not the prettiest to work with. <a href="http://jade-lang.com/">Jade</a> is an extremely popular templating language in Node-land nowadays, so a couple months ago I spent somewhere between 14 and 18 hours going through and rewriting all the utml in Jade, which was absolutely brutal - but necessary. Then, of course, I had to fix the client-side templating logic to handle Jade instead of Underscore templates, which took quite a while, along with the fact that I made a very large number of minor (largely cosmetic) errors in my conversions.</p>
<p>As I said above, this was kind of awful work (<em>especially</em> the beginning), but it's necessary and great, as it paves the way for Express 3.x <em>and</em> massively improves the contributor experience.</p>
<p>You can check out the gory details of this work in <a href="https://github.com/e14n/pump.io/pull/1170">PR #1170</a>, and the original reasoning behind why we're doing this in <a href="https://github.com/e14n/pump.io/issues/1167">issue #1167</a>. This work is actually done, but I'm going to write a separate blog post about it, calling for testers.</p>
<h2>Upcoming 1.0.0 release</h2>
<p>Last but <strong>certainly</strong> not least, we're gearing up for our 1.0.0 release! From a codebase standpoint, this is really just a small bugfix release (although it will make a lot of things less broken and - if I recall correctly - fix the actual installation process), but more importantly, it means that we're now committing to <a href="http://semver.org/">semantic versioning</a>, which is a win for everyone (but especially administrators). The main thing that needs to be fixed before this goes out the door is the behavior of the XSS scrubber, which was accidentally made a little too aggressive. This is being tracked in <a href="https://github.com/e14n/pump.io/issues/1169">issue #1169</a>.</p>
<p>As a bonus, I'm also designing a t-shirt that (if there's sufficient interest) we may print as a celebration of this release - but more on this in my next post.</p>
]]></description><link>https://strugee.net/blog/2016/08/new-stuff-in-pump.io</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/new-stuff-in-pump.io</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Mon, 08 Aug 2016 05:26:32 GMT</pubDate></item><item><title><![CDATA[Work on strugee.net]]></title><description><![CDATA[<p>I realized I forgot to blog about all the work I've done on the <code>strugee.net</code> build code recently! I want to get back to working on Stratic part two (aka pretty indexes), but I thought I'd really quickly take the time to point out what's been done.</p>
<p>First of all, even though I rewrote the code in <a href="http://jade-lang.com">Jade</a> about <a href="https://strugee.net/blog/2014/12/new-blog-new-site">a year and a half ago</a>, there was still a huge amount of boilerplate code in each Jade file. Why? Because essentially the way I did that was by running each HTML file through an <a href="http://html2jade.aaron-powell.com/">HTML to Jade</a> converter, then manually fixing up the result to be, you know, less ugly. That meant that common stuff, like the navbar, footer, includes, etc. were all duplicated across all Jade files. And that sucks, because <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">Don't Repeat Yourself</a> is a thing.</p>
<p>Luckily, refactoring is a thing too! So a few weeks ago, I went and split out the common site layout into <a href="https://github.com/strugee/strugee.github.com/blob/c5ec1634a6b038eec25adb5abcd2b578a60ec4fd/src/includes/layout.jade">its own Jade file</a>, then made all the individual pages inherit from that common layout. The most difficult part of this was undoubtedly the navigation bar - I was pretty sure I'd have to just deal with the fact that the navbar was duplicated across pages (because each page has to have a different link deactivated), but then inspiration struck, and I ended up witht the solution I have now. Instead of treating the entire navigation as one block, I treat each <em>link</em> as a block that is overridable via Jade's <code>block</code> directive. And, since Jade <code>block</code>s can have defaults, each page only overrides exactly what it needs to, and the rest of the links are automatically there and properly clickable.</p>
<p>This has a couple nice side effects. The first is that the codebase that generates <code>strugee.net</code> is now <em>extremely</em> easy for me to change, regardless of what part of the site I touch (whereas before, individual pages were pretty easy but changing e.g. the navbar require editing each and every individual page). The second (and clearly the most important) is that Night Mode, which I implemented in a 45-minute class <em>over two years ago</em> now (back when I was still in high school - what a crazy thing to think about not being in high school anymore!) now works on every page across all of <code>strugee.net</code>. Whooo! Silly hacks are at the core of the web, right? Might as well make them work well.</p>
<p>Finally, I'd be remiss if I didn't mention that I now have a proper <a href="https://github.com/strugee/strugee.github.com/blob/c5ec1634a6b038eec25adb5abcd2b578a60ec4fd/gulpfile.js#L128"><code>deploy</code> task</a>, so I can abandon the sketchy and genuinely terrible deploy process that I used before. (For those curious: <code>gulp build &amp;&amp; git checkout master &amp;&amp; mv dist/*.html . &amp;&amp; git commit -m "Some bad commit message" &amp;&amp; git push &amp;&amp; git checkout src</code> - not shown here are the several attempts where I made some typo or possibly didn't think of some files in <code>dist/</code> that changed and so should have been <code>mv</code>'d, but weren't.) And, I now use root-relative includes now, e.g. <code>/js/main.js</code> instead of <code>js/main.js</code>, which is another win for DRY because now I don't have to maintain different header contents for subpages (which used to be the exact same, just with <code>../</code> prepended to all paths).</p>
<p>In conclusion: yay for progress! And yay for the fact that my codebase actually looks like someone competent wrote it! \o/</p>
<p>(Final note: I haven't forgotten my promise to blog about stuff happening in pump.io-land. But, not now.)</p>
]]></description><link>https://strugee.net/blog/2016/06/work-on-strugee-net</link><guid isPermaLink="true">https://strugee.net/blog/2016/06/work-on-strugee-net</guid><category><![CDATA[development]]></category><pubDate>Tue, 14 Jun 2016 04:30:14 GMT</pubDate></item><item><title><![CDATA[Stratic part one is done!]]></title><description><![CDATA[<p>Whooooooooooo!</p>
<p>I am so, so, <em>so</em> thrilled to announce that the first part of <a href="https://github.com/strugee/generator-stratic">Stratic</a> is complete! And you can see the result right here on strugee.net, since this blog post was generated with Stratic!</p>
<p><strong>tl;dr</strong>:</p>
<pre><code>var rename = require('gulp-rename');
var markdown = require('gulp-markdown');
var parse = require('stratic-parse-header');
var straticToJson = require('stratic-post-to-json-data');
var jadeTemplate = require('gulp-jade-template');
var dateInPath = require('stratic-date-in-path');

gulp.task('posts', function() {
    return gulp.src('src/blog/*.md')
               .pipe(parse())
               .pipe(markdown())
               .pipe(dateInPath())
               .pipe(straticToJson())
               .pipe(jadeTemplate('src/blog/post.jade'))
               .pipe(rename({ extname: '.html' }))
               .pipe(gulp.dest('dist/blog'));
});
</code></pre>
<p>How <em>gorgeous</em> is that?? Let me explain how it works. (I'll assume the reader is familiar with <a href="https://github.com/gulpjs/gulp">Gulp</a> and <a href="https://nodejs.org/en/">Node.js</a>.)</p>
<p>So the <code>gulp.src()</code> call is pretty obvious. We just read all the blog posts into the stream. Note, however, that <code>gulp.src()</code> doesn't stream text, per se - it streams <a href="https://github.com/gulpjs/vinyl">Vinyl</a> file objects. This will become important later.</p>
<p>Now, the first piece of custom Stratic code that we use is the <code>stratic-parse-header</code> module. This module takes a Markdown file with a standard Stratic header (see <a href="https://strugee.net/blog/2014/11/new-blog-new-site">my original announcement</a> for details), parses the header, strips it out, then returns the new, headerless Markdown. However, the new Vinyl file object has a couple of new properties from the parsing phase - specifically, <code>file.title</code>, <code>file.author</code>, <code>file.time</code>, and <code>file.categories</code> now exist. This is why the fact that Vinyl is used is important - now <em>any</em> Gulp plugin downstream from where <code>parse()</code> is run can use all of these values in whatever way it wants. (See <a href="https://github.com/strugee/stratic-parse-header/blob/master/README.md">the README</a> for more details.)</p>
<p>Now our Vinyl file object is <em>only</em> the content of the post, and it has additional Stratic metadata attached to it. Awesome! The next thing that we do is render the Markdown, just using a standard Gulp plugin for this. Easy breezy. After that, we pipe to the <code>stratic-date-in-path</code> module, which adds the year and month to paths. For example, without <code>stratic-date-in-path</code>, this blog post would be at <code>https://strugee.net/blog/stratic-part-one</code>. However, since I <em>do</em> use <code>stratic-date-in-path</code>, the post lives at <code>https://strugee.net/blog/2016/05/stratic-part-one</code> instead. Nice, right? Eventually I'll write code to generate pretty indexes for each year and month - that's what Stratic part 2 is for.</p>
<p>The next thing we do is pipe to the <code>stratic-post-to-json-data</code> module. This module is specifically designed to work with the <code>gulp-jade-template</code> module, which expects the file contents to be some JSON that will be given as data to a <a href="http://jade-lang.com/">Jade</a> template, whose rendered HTML becomes the new file contents. What sets up that JSON? You guessed it - <code>stratic-post-to-json-data</code>. That's all it does. It just creates an object that contains the metadata and the actual post text, runs it through <code>JSON.stringify()</code>, and sets the file contents equal to the result. Just how <code>gulp-jade-template</code> likes it.</p>
<p>And with that, we've successfully rendered a blog post. Whooooooooooo! I'm so pumped about this software. The call to <code>rename()</code> is just a little housekeeping, and then we write the whole thing back to disk with <code>gulp.dest()</code>. Awesome.</p>
<p>It's worth noting that the real beauty in this code isn't what the code actually does, but the extreme modularity of the whole thing. Unlike projects like <a href="https://jekyllrb.com/">Jekyll</a> or even <a href="http://wintersmith.io/">Wintersmith</a>, this isn't a giant, monolithic framework. It's all standard Node and Gulp. Note how (for example) we didn't need a custom plugin for Markdown - we just used the standard <code>gulp-markdown</code>. Don't like Markdown? No problem. Write something to extract post metadata from your preferred format, replace <code>parse()</code> with that and <code>markdown()</code> with a different renderer, and you're golden. All the rest will continue to work the <em>exact</em> same - adding dates to paths, rendering the template, etc. - because everything's decoupled from everything else. Each component can be trivially swapped out and replaced with something new and better, and the rest of the system continues to work. Gorgeous.</p>
<p>I've got to go now, but I'm not done blogging. I'll be back soon to talk about the work going on in <a href="http://pump.io/">pump.io</a>, and I'll be back (much?) later to talk about Stratic part two (aka, pretty indexes).</p>
<p>Whooooooooooooooooooooo!</p>
]]></description><link>https://strugee.net/blog/2016/05/stratic-part-one</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/stratic-part-one</guid><category><![CDATA[development]]></category><category><![CDATA[stratic]]></category><pubDate>Sat, 28 May 2016 22:09:38 GMT</pubDate></item><item><title><![CDATA[Re: Bitcoin, Magical Thinking, and Political Ideology]]></title><description><![CDATA[<p><em>Editorial note: I published this almost three years ago on my Tumblr, which I keep semi-private and so don't want to link to. This is a verbatim repost from there, despite the fact that I disagree with some portions of this text nowadays.</em></p>
<h2><a href="https://al3x.net/2013/12/18/bitcoin.html">Bitcoin, Magical Thinking, and Political Ideology</a></h2>
<p><a href="http://edwardspoonhands.com/post/71550289177/bitcoin-magical-thinking-and-political-ideology">edwardspoonhands</a>:</p>
<blockquote>
<p>I get asked all the time what I think of BitConâ¦this guy says it better than I could.</p>
</blockquote>
<p>+1 for linking to something by Alex Payne. I love him.</p>
<p>About the actual content, at one point Alex says this:</p>
<blockquote>
<p>Weâre told that Bitcoin âfixes serious problems with existing payment systems that depend on centralized services to verify the validity of transactions.â If by âfixesâ you mean âignoresâ, then yes: a Bitcoin transaction, like cash, comes with the certainty that a definite quantity of a store of value has changed hands, and little else. How this verifies any âvalidityâ or cuts down on fraud Iâm not sure; stolen Bitcoins are spent as easily as stolen cash, which is why <a href="http://www.cnbc.com/2013/11/20/more-bitcoins-more-problems-how-hackers-are-targeting-bitcoins.html">theft of Bitcoins has been rampant</a>.</p>
</blockquote>
<p>I think the concern isnât with fraud or validity. The problem that Bitcoin solves is with the centralized banking model. The fundamental idea behind Bitcoin is that it cannot be centrally controlled or taken down, like the internet. It is impossible to flip a switch and âturn offâ the Bitcoin network. It <em>is</em> possible to do that with a centralized bank: in that case, âflipping the switchâ ends up being âshut down the bankâ. Or, âdrive the bank out of businessâ.</p>
<pre><code>If Bitcoinâs strength comes from decentralization, why pour millions into a single company? Ah, because Coinbase provides an âaccessible interface to the Bitcoin protocolâ, weâre told. We must centralize to decentralize, you see; such is the perverse logic of capital co-opting power. In order for Bitcoin to grow a thriving ecosystem, it apparently needs a US-based, VC-backed company that has âworked closely with banks and regulators to ensure that the service is safe and compliantâ.
</code></pre>
<p>Maybe the problem isnât with Bitcoin itself, but with what Coinbase is doing with the Bitcoin protocol. Now, to be clear, I think the Bitcoin to USD bridge aspect of Coinbase is OK. But I think that this paragraph is very, very true: it is <em>perverse</em> that we have centralized a decentralized protocol. Decentralized protocols tend to be very dangerous, IMHO, because of the tendency of users to just go with the most popular provider because itâs the easiest solution, and then effectively centralizing the network in the process.</p>
<p>Anyone remember XMPP? XMPP was supposed to be great. It was supposed to be the future of communications on the internet. But in practice, XMPP servers are unreliable. Itâs hard to find one that works well. I donât actually use XMPP a lot myself, but there are a lot of problems with connections, chat requests being undone (so you have to add a contact for a second time), etc. So what happened because of these problems (and the fact that everyone uses Gmail)? The most-used XMPP server is talk.google.com. At least it was, until Google replaced Google Talk with Google Hangouts, which uses a proprietary protocol with no XMPP bridge - and so the network got screwed over, because suddenly, a lot of people upgraded to Hangouts and cut themselves off from the XMPP network. The sad truth, though, is that it almost doesnât matter. Take a survey of any random Google Talk user. I will bet you $100 that less than 1 out of 50 people who you talk to wonât know that Google Talk is based on XMPP, much less what XMPP is. And thereâs almost zero chance that they understand why XMPP matters, or why federated protocols and networks matter.</p>
<p>Iâm getting off track, though. So back to Bitcoin and Coinbase. I think what Coinbase is doing by hosting peopleâs Bitcoin wallets and transactions is fundamentally <em>wrong</em>, because I truly believe that it damages the Bitcoin ecosystem. The centralization in Coinbase is, IMHO, a major problem.</p>
<p>I wonder if this will be solved with a project like <a href="https://arkos.io/">arkOS</a>. I mean, maybe the solutionv that will ultimately happen is for people to spin up their own instances of a Coinbase-like Bitcoin wallet. I think itâs pretty clear that people, in general, like cloud apps better than desktop apps. Access from any computer is a really nice feature to have. Maybe projects like arkOS will help decentralized protocols like Bitcoin remain decentralized in practice.</p>
<p>Or maybe Bitcoin will effectively die, just like XMPP did. I mean, sure, XMPP is still a network. But no one really uses it consciously. Almost everyone who uses XMPP nowadays does so accidentally, through a service that just happens to have an XMPP bridge. Google Talk was a prime example of this, but itâs dead. Now, Iâll bet money that the most-used XMPP provider is Facebook. Never knew that Facebook Chat had an XMPP bridge? Thatâs because Facebook doesnât advertise it; the only time itâs mentioned is in the developer docs. The mainstream does not care about the XMPP protocol, because we centralized it. What the mainstream <em>does</em> care about is the services that we centralized it on: Google and Facebook. And thatâs a real problem.</p>
]]></description><link>https://strugee.net/blog/2016/05/re-bitcoin</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/re-bitcoin</guid><category><![CDATA[musings]]></category><pubDate>Wed, 11 May 2016 18:18:00 GMT</pubDate></item><item><title><![CDATA[Programming as an art form]]></title><description><![CDATA[<p>The other day I described programming to someone. I pointed out that it's actually pretty easy to teach yourself programming languages, especially since after a while you start to carry over concepts from other languages. But what surprised me most about <em>my own explanation</em>(!) was when I compared programming to art: it's the kind of thing where you can just try stuff out and see what works and what doesn't, with no real consequences.</p>
<p>Since I said that, I've actually been thinking about it quite a bit. Programming is traditionally described as an activity closely related to mathematics, and to a certain extent, this makes a lot of sense, because of the logical skills that go into programming. You have to be able to reason your way through situations in order to effectively debug a program, which means logically eliminating possible points of failure. This is where math skills become very important.</p>
<p>But coding isn't just about logic. At <a href="http://opensourcebridge.org/">OSBRIDGE</a> this year, I attended a session about the beauty of code - it's hard to describe to someone who doesn't live and breathe code, but we all know it when we see it. We as a community value elegance in code; clever algorithms; thinking outside the box, and as I said in my <a href="https://strugee.net/presentation-just-do-it/#19">Just Do It slides</a>, the mere existance of Ruby proves this. So when I described programming as being like art, part of where I was getting that is the analogy I actually said (being able to easily mess around), but part of it was coming from my appreciation of the beauty of code. Part of it was coming from my sense of the aesthetic properties of programming.</p>
<p>I want us, as a community, in both our regular coding but also our educational outreach, to stop pretending that programming is so logical that it <em>is</em> math. Yes, there are elements of mathematics in coding. Lots of it, even. But to treat programming as a branch of mathematics is doing a disservice to the practice. So in addition to treating programming as a form of math, I want us to start treating programming as a form of art. There <em>is</em> such a thing as ugly code. The entire concept of refactoring would barely exist if that wasn't true. So let's start truly appreciating the aesthetic beauty of code, and let's start teaching that. To be honest, I'm not sure how you would teach that. But it couldn't hurt to try.</p>
<p>But even if we can and should treat it as both of those things, that doesn't mean that we should make that the be-all-end-all of how we describe programming. I truly believe that programming is not a branch of mathematics. And it's not an art form, either. Programming is neither of those things and both of those things; it is something entirely new, and we should treat it as such. If this isn't true, why do people swear by certain software? Why do people (including myself) aggressively sticker their laptops to showcase what software they use? And if this isn't true, how is it possible that people <em>love</em> their code?</p>
]]></description><link>https://strugee.net/blog/2015/11/programming-as-an-art-form</link><guid isPermaLink="true">https://strugee.net/blog/2015/11/programming-as-an-art-form</guid><category><![CDATA[development]]></category><category><![CDATA[musings]]></category><pubDate>Mon, 09 Nov 2015 04:17:38 GMT</pubDate></item><item><title><![CDATA[Revisiting my Tor relay]]></title><description><![CDATA[<p>(Okay, so I <em>miserably</em> failed my blog-every-day thing. Shut up. Maybe next time I'll try every week or something... anyway.)</p>
<p>A couple of days ago I logged into the <a href="https://atlas.torproject.org/#details/710E9E3A0A443E3FD33D2801298042783CAD2EAE">Tor relay I run</a> to show someone the ARM graphs. I had a fair amount of traffic, so the graphs were fairly impressive, but I'm also in the habit of running <code>apt-get update; apt-get upgrade</code> every time I log into a server, so I did that too. To my surprise, I got a message telling me that there was a dependency problem with my kernel! So like the great sysadmin I am, I looked at such a fundamental system problem, shrugged my shoulders, and said, "oh, I should probably fix that". And then logged out.</p>
<p>Well, I did end up fixing it today. And boy, was it an adventure. My first step was to ignore the APT problems and edit my <code>torrc</code>, to reflect a) the fact that I'm not eligible for the AWS Free Tier anymore (so I needed to throttle bandwidth), b) my new email, and c) my new GPG key. With that being done, I knew that I could easily have the system fix dependency problems by doing a simple <code>apt-get install -f</code>. Easy!</p>
<p>Well, no. That tried to install some Linux kernel headers, which seemed all well and good, until I got this:</p>
<pre><code>Unpacking linux-headers-3.2.0-90 (from .../linux-headers-3.2.0-90_3.2.0-90.128_all.deb) ...
dpkg: error processing /var/cache/apt/archives/linux-headers-3.2.0-90_3.2.0-90.128_all.deb (--unpack):
unable to create `/usr/src/linux-headers-3.2.0-90/arch/arm/plat-pxa/include/plat/dma.h.dpkg-new' (while processing `./usr/src/linux-headers-3.2.0-90/arch/arm/plat-pxa/include/plat/dma.h'): No space left on device
No apport report written because the error message indicates a disk full error
dpkg-deb: error: subprocess paste was killed by signal (Broken pipe)
</code></pre>
<p>Um, what? How am I out of free space? Okay, whatever. I knew that there were probably a lot of packages cached in <code>/var/cache/apt/</code>, including old, vulnerable packages that had been replaced by the unattended upgrades system. I did an <code>ls</code>, and found only about five <code>.deb</code> files - something must have been automatically cleaning that directory. I was getting a little worried now, but I nuked the files anyway and reran <code>apt-get install -f</code>. <em>Same thing</em>. Well, okay, maybe I didn't get rid of enough stuff? How much did I need?</p>
<pre><code>$ df -h /
Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      4.0G  2.2G  1.6G  59% /
</code></pre>
<p>At this point I'm in full-on "something-is-seriously-wrong-and-I-<em>need</em>-to-recover" mode. How was it possible that I had only used 59% of the filesystem, but <code>dpkg</code> was saying my disk was full? A little searching the internet later, I found the culprit:</p>
<pre><code>$ df -i
Filesystem     Inodes  IUsed IFree IUse% Mounted on
/dev/xvda1     262144 257479  4665   99% /
udev            74758    377 74381    1% /dev
tmpfs           76179    259 75920    1% /run
none            76179      3 76176    1% /run/lock
none            76179      1 76178    1% /run/shm
</code></pre>
<p>I hadn't run out of disk space. But I <em>had</em> run out of inodes. (Isn't this supposed to happen to <em>other</em> people?)</p>
<p>I tried removing some stuff via APT, but that refused to do anything due to the dependency problems. My next thought was that there were probably a bunch of old processes running that were essentially holding a bunch of inodes hostage. I couldn't install <code>debian-goodies</code>, so I couldn't use <code>checkrestart</code>, but I improvised by looping over all running services in a for loop, and restarting them.</p>
<p>Still nothing.</p>
<p>I'm not proud of what I did next. But I was backed into a corner, so I did something only <code>dpkg</code> is supposed to do. I ran <code>rm -r</code> on a couple directories in <code>/usr/src</code>. And boy, it was like magic. Suddenly <code>apt-get install -f</code> worked like a charm. It started to upgrade a couple packages, rebuilding some GRUB configuration files... and then came to a screeching halt.</p>
<pre><code>Setting up linux-headers-3.2.0-90-virtual (3.2.0-90.128) ...
dpkg: dependency problems prevent configuration of linux-headers-virtual:
linux-headers-virtual depends on linux-headers-3.2.0-68-virtual; however:
Package linux-headers-3.2.0-68-virtual is not installed.
dpkg: error processing linux-headers-virtual (--configure):
dependency problems - leaving unconfigured
No apport report written because the error message indicates its a followup error from a previous failure.
dpkg: dependency problems prevent configuration of linux-virtual:
linux-virtual depends on linux-headers-virtual (= 3.2.0.68.81); however:
Package linux-headers-virtual is not configured yet.
dpkg: error processing linux-virtual (--configure):
dependency problems - leaving unconfigured
No apport report written because the error message indicates its a followup error from a previous failure.
Errors were encountered while processing:
linux-headers-virtual
linux-virtual
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>
<p>Are you kidding?? <em>More</em> errors?</p>
<p>Turns out that APT is essentially the only thing on this system that makes large changes to the filesystem. So the probability that APT would be the program to trigger the inode limit was pretty high. It started an upgrade run, then got interrupted in the middle by the "no space left on device" error, leaving the dependency tree in a state that we in the tech community call "100% totally screwed". (This is the technical term.)</p>
<p>I'll spare you the gory details, but I ended up trying to chase down packages in the Ubuntu archive, running <code>ubuntu-support-status</code> beacuse I was wondering if the packages I was looking for actually <em>weren't in</em> the archive, because they were unsupported, using <code>aptitude</code> instead of <code>apt-get</code> (because <code>aptitude</code>'s dependency resolver tends to be better), etc. Finally the solution turned out to be doing <code>dpkg --install</code> on the exact right <code>.deb</code>s in the exact right order, which finally satisfied APT's dependency woes, allowed <code>apt-get install -f</code> to fix the configuration problems, and allowed the hundreds of packages which had been waiting for an upgrade to <em>finally</em> install. Whew!</p>
<p>Anyway, I need to upgrade the version of Ubuntu the system is on (currently it's 12.04.5 LTS), because Tor is out of date (among other reasons). However, since that will involve taking the system down for a reboot, I wanted to memorialize the following:</p>
<pre><code>$ uptime
00:01:47 up 392 days, 17:15,  1 user,  load average: 0.05, 0.04, 0.05
</code></pre>
<p>Holy moly. This system is bordering on 400 days of uptime. That's over a year of continuous run time! Astonishing.</p>
<p>Wish me luck with this upgrade...</p>
<p><strong>tl;dr</strong>: inode limits are <em>killer</em>.</p>
]]></description><link>https://strugee.net/blog/2015/09/revisiting-my-tor-relay</link><guid isPermaLink="true">https://strugee.net/blog/2015/09/revisiting-my-tor-relay</guid><category><![CDATA[sysadmin]]></category><pubDate>Sat, 05 Sep 2015 00:34:29 GMT</pubDate></item><item><title><![CDATA[2 lbs of stickers]]></title><description><![CDATA[<h2>First things first</h2>
<p>This year I am again attempting to blog every day of summer. I've done this sporadically in the past (and never very well), but I'm trying again this year. Maybe this time will be different. (This is actually my fourth day of summer, but I wanted some time off. Whatever.)</p>
<h2>2 lbs of stickers??</h2>
<p>So recently (i.e. within the past year) I've become more active within the local Seattle community. I'm now on the organizing committee for the <a href="https://wiki.openitp.org/events:techno-activism_3rd_mondays:seattle">Seattle chapter of TA3M</a> (Techno Activism, 3rd Mondays), and am actually running another <a href="https://cryptoparty.in/">CryptoParty</a> this coming Monday. Now, within the wider Seattle activism/tech scene, there's this bag of stickers. It used to be owned by a friend of mine named Elcaset, who apparently just took home some leftovers one day and then kept receiving more and more, because people associated him with stickers. Sadly, Elcaset had to move away from the Seattle area. And since we wanted to keep the stickers, someone needed to keep the bag. And so I ended up with a giant, giant bag of stickers.</p>
<p>Me being me, I decided to sort them and separate them, so that they were easier to lay out on a table. Then I separated them by category. And then, just for fun (and since there were so many of them), I decided to weigh them.</p>
<p>The heavyweight champ by far is the <a href="https://fsf.org/">Free Software Foundation</a> bag, with a whopping 8.25 oz of stickers. Yeah, when I said "heavy" "weight", I meant it. Next we have local usergroups (FreeGeek Seattle, TA3M Seattle, Seattle Privacy and one other whose logo I know is local, but I don't recognize) tied with distributions, both at 5.225 oz. Next up is advocacy groups, namely the <a href="https://eff.org/">EFF</a> and the <a href="https://aclu-wa.org/">ACLU of Washington</a>. I'll admit to cheating on this one, since the EFF has some assorted trinkets that aren't actually stickers, but whatever. This bag was 4.5 oz. After advocacy groups is the miscellaneous bag, which has software projects not associated with anything else, activism films, conferences (aka <a href="https://linuxfestnorthwest.org/">LinuxFest Northwest</a>) and political parties (aka the <a href="https://uspirates.org/">Pirate Party</a>). Finally, as we approach the bottom,  the security/anonymity bag had 2.75 oz, followed closely by the <a href="https://duckduckgo.com/">DuckDuckGo</a> bag, which had 2.725. Finally, the LibreOffice/document freedom bag had 2 oz of stickers.</p>
<p>What all this is to say is that I now own a <em>lot</em> of stickers. Specifically, I own an astonishing 2 <em>lbs</em>, 1.625 oz of stickers. Seriously. 2 pounds of what is essentially paper. That's almost unbelievable. (I should point out at this point that I got that number from weighing all of them, not by adding up the above figures, so there may be a slight difference.)</p>
<p>Anyway. I guess I'll have plenty of material to hand out at my CryptoParty.</p>
<h2>Other things</h2>
<p>Other things that have happened recently-ish: I'm going to be in Advanced Photography next year, which I'm super excited about! Also, I joined the SAAS dance program, which should be really fun. At first it was a bit inconvenient, because even though I really wanted to be in dance, with Advanced Photography <em>and</em> Intermediate Dance, I didn't have room in the fall for a Study Hall (which I'm going to need because of college apps). So I ended up deciding to only do robotics on the weekends. Not only that, but the dance show is inevitably the same weekend as LFNW, so I was going to miss Game Night and the Saturday sessions and the afterparty. But things worked out, because apparently they had so many people auditioning this year that they split Intermediate Dance into two sections, and I'm in the one that has class in the winter and spring. That means that not only can I take a study hall in the fall, but our dance show will be at a different time of year, so I can go to LinuxFest Northwest, too. Whoo!</p>
]]></description><link>https://strugee.net/blog/2015/06/2-lbs-of-stickers</link><guid isPermaLink="true">https://strugee.net/blog/2015/06/2-lbs-of-stickers</guid><category><![CDATA[personal]]></category><pubDate>Sun, 14 Jun 2015 09:02:27 GMT</pubDate></item><item><title><![CDATA[New blog, new site!]]></title><description><![CDATA[<p>I'm back! Sort of. Very sort of.</p>
<p>I've known for a while that I'm going to ditch Blogger. That's a large part of why I delayed posting stuff to my blog for so long: I didn't have blog software that I really wanted to use, but I didn't want to just put more data into Blogger. Eventually, though, I realized that it would take me a while to write software that a) built an actual blog from Markdown and b) worked the way I wanted it to, so I decided that I would just start cranking out posts and write the software to build them later. And then of course there was the week or three that I spent procrastinating on writing... oh well. I'm here now.</p>
<p>Anyway, it's <s>two</s> three AM as I write this, so I should go to sleep soon. I have a lot of stuff I want to write about, so I'll be brief.</p>
<h2>Summer</h2>
<p>I haven't written anything publicly since <a href="http://ramblingsfromalex.blogspot.com/2014/06/reset-net.html">Reset the Net</a>, way back in June. So I should probably cover some of the things I've been doing.</p>
<p>First, I ran a <a href="https://www.cryptoparty.in/">CryptoParty</a>! It was hosted at <a href="http://blackcoffeecoop.com/">Black Coffee</a>'s old location on Pine, and it was absolutely fantastic. We had a small group of people but it was really fun, anyway. The slides are <a href="https://github.com/strugee/cryptoparty-seattle">on GitHub</a> - and speaking of which, I've switched to <a href="https://github.com/markdalgleish/bespoke.js">Bespoke.js</a> for all my presentations. Hell yeah HTML5!</p>
<p>Right after the CryptoParty was over, I actually had the opportunity to drive down to Portland for <a href="http://debconf14.debconf.org/">DebConf '14</a>, which was one of the most fantastic experiences of my entire life. I met a lot of really cool people there, I got my new <a href="https://strugee.net/gpg">key</a> (also generated over the summer) signed by a lot of Debian folks, and I played a lot of evening games (not Werewolf - the other one). One of the coolest parts was the fact that I actually got to meet two of my heros - Linus Torvalds came and did a Q&amp;A with us (video of it is available <a href="https://youtu.be/1Mg5_gxNXTo">here</a>) and John Sullivan, Executive Director of the FSF, did a BoF-style talk on how we can get to a point where Debian is on the FSF free distribution list. I got a chance to talk to both of them afterwards, which was undoubtedly one of the coolest things that has ever happened to me thus far.</p>
<h2>Robotics</h2>
<p>Yes, the school year started and I'm a junior now. It's rough.</p>
<p>I'm on 5619 this year at robotics (Gabe, our main mentor, actually called me at DebConf to talk about it). I was a little annoyed to not be on 2856 at first, but it's worked out for the best. We're actually doing really well this year, and I'm so proud of the work we've been doing on the robot. It's difficult - it's much more complicated this year than last year, and there's basically no room on the thing. We had to move <em>wires</em> out of the way to make room for our scissor lift to come down properly. Speaking of which, we have a working scissor lift, which has never been accomplished at SAAS before, at least not during a season! So that's awesome.</p>
<p>We had a rough time our second competition, due to a lot of things - the Field Control System lag was bothering our driver, Wilson, so I wrote up something quick to fix it. I went to test it, and as soon as I ran our scissor lift up, one of the bars - which (of course) we made out of wood - snapped. So we had to rush to fix it before we had to go on the field in three matches or something. And because the bar broke, I didn't get to test the new teleop, and when Wilson tried to drive with it on the field, it broke horribly. Luckily we did pretty well in the first competition, and that gave us a nice buffer to make up for our losses the second time. I can't claim that we're doing well, but we're not doing horribly, either. <a href="https://youtu.be/gJzJUveTyyo">Here's a video</a> showcasing the first competition, and <a href="https://youtu.be/bdcG_WOOLwU">here's a second one</a> of the work the club did beforehand to prepare. Please excuse the weird camera angle of me intensely working on the code because of the time crunch of FTC competition.</p>
<h2>Patching Firefox</h2>
<p>Over Thanksgiving break, I wrote my first Firefox patch! There was a bit of the DevTools that was bugging me, so I fixed it, in true free and open source software fasion. Unfortunately I'm having some trouble writing tests for it, and I haven't had time to track down the information that I need, so the patch hasn't made it into the tree yet. Soon, though! It's on my list of things to do during break. You can see everything over in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1106353">bug 1106353</a>.</p>
<h2>Mail</h2>
<p>I've spent hours of work, spread out over a number of months, working on steevie's mail subsystem. And I'm proud to say that as of a couple weeks ago, I'm finally done. I had to buy a block of static IPs for it, which I felt really cool for doing. There's still a lot of work to do - SPF, outbound DKIM signing, better TLS, Roundcube, ManageSieve, antispam, moving to LDAP from MySQL... the list goes on and on and on, but the system works. And I'm really proud of it. Anyway, I have a new email now: <a href="mailto:alex@strugee.net">alex@strugee.net</a>. I've even set up the customary names to forward to me: you can email <a href="mailto:postmaster@strugee.net">postmaster</a> for email trouble, <a href="mailto:webmaster@strugee.net">webmaster</a> for problems with the web server, and even <a href="mailto:hostmaster@strugee.net">hostmaster</a> for general stuff. Or root, if you're APT or cron or somesuch. It'll all reach me.</p>
<h2>Christmas</h2>
<p>It was Christmas yesterday! Merry Christmas, Internet! I got a bunch of books, including The C Programming Language, Second Edition (yes, this is <em>the</em> book that K&amp;R C is sort of named after), which was <em>very</em> exciting for me. I also got a budget for steevie approved, so now I can buy a bunch of hardware that I need. Hello, RAID 10 array!</p>
<h2>Stratic</h2>
<p>So, finally onto the juicy development part. <a href="https://github.com/strugee/generator-stratic">Stratic</a> is the name of my new pet project. Stratic is the STReaming stATIC site builder. It's like <a href="https://wintersmith.io/">Wintersmith</a>, except that it runs on <a href="http://gulpjs.com">Gulp</a>, which I've fallen in love with over the summer. Because of that, it's a little weird - there'll be some custom components used to support it, but the main body of code is actually... a Yeoman generator.</p>
<p>There hasn't been much activity in the repo because I'm using the <a href="https://github.com/strugee/strugee.github.com">strugee.github.com repository</a>, which still runs strugee.net even though I'm not on GitHub Pages anymore, as a testbed for Stratic. Once I've ironed out all the kinks, then I'll land all my work in the <a href="https://github.com/strugee/generator-stratic">generator-stratic repository</a>.</p>
<p>I'm very tired, and I want to go to bed, but before I do I figure I should explain the format of this post. Yes, this is Stratic format. It's pure Markdown, but with some additional semantics that Stratic will use to build out the blog. I figure that not many people will use &lt;h1&gt;s in their posts, so the Markdown equivalent (#) is used to distinguish the actual post text from what is essentially a header. I did something unusual, though, because even though the header is essentially for Stratic - who authored the post and when, what it's called, etc. - I wanted the Markdown to be at least somewhat readable in source form. Therefore, you're actually allowed to put anything you want in the header section. The values are distinguished by double quotation marks. Stratic will figure out what they mean based on their position. The first set of quotation marks contain the title, the second set contains the date, the third set contains the author, and the fourth set contains a comma-separated list of categories that the blog post should go in. The date looks a little weird - it's seconds since the epoch plus an optional UTC offset. It could be made more human-readable, but then you've got to parse stuff and it just turns into a nightmare. So I opted to sacrifice readability for elegance.</p>
<p>So! This is a blog post without a blog. Soon, I'll finish up Stratic and this will no longer remain solely in source form. I'm excited! I've already rewritten strugee.net in Jade, and used the opportunity to refresh <a href="https://strugee.net/services">the services page</a>. Time to get crackin'.</p>
]]></description><link>https://strugee.net/blog/2014/12/new-blog-new-site</link><guid isPermaLink="true">https://strugee.net/blog/2014/12/new-blog-new-site</guid><category><![CDATA[development]]></category><category><![CDATA[personal]]></category><category><![CDATA[stratic]]></category><pubDate>Sat, 27 Dec 2014 11:44:42 GMT</pubDate></item></channel></rss>