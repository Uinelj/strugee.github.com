<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog - 'blaggregator' category]]></title><description><![CDATA[strugee.net blog - 'blaggregator' category]]></description><link>https://strugee.net/blog/category/blaggregator</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Mon, 20 Mar 2017 22:57:48 GMT</lastBuildDate><atom:link href="https://strugee.net/blog/category/blaggregator/index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[Â© Copyright 2012-2017 Alex Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[Alex Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Express 4.x in pump.io core]]></title><description><![CDATA[<p>So I thought I'd take a moment to announce that the upgrade from Express 2.x to Express 4.x is <a href="https://github.com/pump-io/pump.io/pull/1208">finally complete</a>! I fixed up the last couple test failures last Wednesday, and the branch got merged on Thursday.</p>
<h1>A long time coming</h1>
<p>Believe it or not, the work to do this upgrade started almost an entire <em>year</em> ago. Express 2.x has been outdated and unmaintained for a long time now, so upgrading has been a high priority. However, it wasn't as simple as adjusting a version number - there were a staggering number of changes that needed to be made due to Express deprecating, removing, and changing things around. One of the most significant problems was the fact that the old template system that we used, utml, was not compatible with Express 3.x and above. That meant that we had to rewrite every single template into a modern language - an effort that resulted in <a href="https://github.com/pump-io/pump.io/pull/1170">over a thousand lines changed</a>!</p>
<p>However, the time for Express 4.x has finally arrived. With that and some other trivial version bumps, I'm proud to announce that pump.io is fully up-to-date in terms of dependencies with only three, non-critical exceptions. Whooooo!</p>
<h1>Immediate benefits</h1>
<p>There are a lot of reasons this is immediately awesome:</p>
<ol>
<li>Express 4.x fixes significant performance problems that existed in Express 3.x</li>
<li>Relatedly, Express 4.x fixes some security problems present in 3.x</li>
<li>The fact that our dependencies are <em>finally</em> up-to-date means that we can (and do!) now make use of <a href="https://greenkeeper.io/">Greenkeeper</a> and the <a href="https://nodesecurity.io/orgs/pumpio/projects/32213bb8-f9a6-4dd0-8fc6-5caa8ea5f8fc">Node Security Platform</a> to automatically track dependencies to make sure they're up-to-date and not introducing security vulnerabilities</li>
</ol>
<p>That last one is particularly significant. Greenkeeper and NSP will continuously monitor the project's dependencies and automate away a lot of the pain that's associated with keeping pump.io up-to-date. Everyone will get a more secure and stable codebase because of this setup.</p>
<h1>Looking forward</h1>
<p>The Express 4.x upgrade is a big change, and it's definitely possible that stuff has broken. We want to make sure that breakage doesn't make it into production. This change went into pump.io 4.0, which will go through our normal <a href="https://github.com/pump-io/pump.io/wiki/Release-cycle">release cycle</a>. That means it'll be in beta for a month before being released. As a part of that, <a href="https://jxself.org/">Jason Self</a> - who's kind enough to administer <a href="https://datamost.com/">Datamost</a> - has agreed to have a test day where Datamost upgrades to the beta for a day, then downgrade it again. This test day will give us much wider exposure than we would've gotten otherwise, which will be incredibly valuable feedback in the effort to identify and fix regressions. We haven't set a date yet, but if you'd like to join Jason in helping us find bugs, please get in touch with <a href="https://github.com/pump-io/pump.io/wiki/Community">the community</a>. We'd love your help.</p>
<p>Beyond the immediate release, though, there's still things to look forward to. Express 4.x gives us a better way to structure routing code, and a refactor to use this structure <a href="https://github.com/pump-io/pump.io/issues/1232">is planned</a>. There's a lot of room for improvement. But really, the most important benefit is this: technical debt is a far less pressing issue than before. That means that we can shift focus and spend more time fixing user-facing bugs, adding useful features, and generally improving the experience for our users. I couldn't be more excited.</p>
]]></description><link>https://strugee.net/blog/2017/03/express-4.x-in-pump.io-core</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/express-4.x-in-pump.io-core</guid><pubDate>Mon, 20 Mar 2017 20:22:27 GMT</pubDate></item><item><title><![CDATA[RC week 10]]></title><description><![CDATA[<p>This is week 10 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 35</h2>
<p>Arrived ~13:00, departed ~21:30, total time at RC 8h30m.</p>
<p>Decided (in the morning) to sleep in because honestly, I was just really behind on sleep.</p>
<p>Didn't do a whole lot today. Took care of the monthly pump.io release, but spent most of the day writing <a href="https://strugee.net/blog/2017/03/driftless-at-1000-mph">Driftless at 1,000 mph</a>. In the evening (i.e. after the Iron Blogger meeting) I spent some time fixing ejabberd's configuration to use the new access control syntax (I'd rewritten the config a while back, but hadn't deployed it yet because it broke logins).</p>
<h2>Day 36</h2>
<p>Arrived ~10:40, departed ~23:40, total time at RC 13h0m.</p>
<p>Spent basically all day working on <a href="https://github.com/strugee/realtime.recurse.com">realtime.recurse.com</a>. I (mostly) finished up the bits that watch the filesystem and dispatch events (including the "periodic" submission logic), then started in on an automatic update mechanism. I'm pretty pleased with how it's turning out - I think it's pretty elegant. And, it's secure - updates are required to be cryptographically signed by yours truly. Went out to Black Burger with a <em>bunch</em> of people before going to Fat Cat in the evening. Then came back, worked on the updater a little more, and went home.</p>
<h2>Day 37</h2>
<p>Arrived ~14:40, departed ~23:20, total time at RC 8h40m.</p>
<p>Overslept by accident this morning. Spent a bit of time in the afternoon dealing with email, then focused on realtime.recurse.com - basically I was just working on the autoupater I started yesterday. My Python is <em>definitely</em> improving!</p>
<p>I'm actually really pleased with the updater. It's pretty elegant, I think. Basically whenever the server sees a request coming from the client, it checks the <code>User-Agent</code> header to see if the client's out of date and, if so, sends back an <code>X-Requires-Upgrade</code> header. Upon receiving this header the client will go fetch version information, which it'll use to download and verify an update bundle cryptographically signed by me. Yay for secure updates, and yay for simplicity! (Note that this design basically just reuses the connections the client is already making to the server, so it doesn't have to poll for updates all the time.)</p>
<p>I also spent a couple hours talking with Mikhail, discussing a lot of things - ranging from how Node.js's event loop works to the <code>is</code> keyword in Python to static site generator architecture compared to dynamic site architecture.</p>
<h2>Day 38</h2>
<p>Arrived ~9:50, departed ~23:00, total time at RC 13h10m.</p>
<p>Woke up, completely naturally, around 7 AM despite going to sleep at 3 AM. This was so surprising - and this is a true story - that I thought I had woken up at 7 PM and missed the entire day, including Security Club, Abstract Salad Factory, and Thursday night presentations. I was <em>really</em> mad, honestly. But then I looked at my watch and realized that I was on 24-hour time but it didn't say "19:00" and also my alarms were in the future and my phone was in 24-hour time too and also Anja on Zulip said "?" when I said I'd slept through Security Club. Despite the overwhelming evidence in the end, though, I still had a weird feeling that it was 7 PM. So that's the story of how, for a good 5 or 10 minutes, I genuinely believed I'd slept through the entire day.</p>
<p>Once I got to RC, I spent the morning finally(!) merging in a bunch of upstream <code>ejabberd.yml</code> config changes to steevie's ejabberd configuration, which got me closer to fixing the awful spam problem I have. Then I went to Abstract Salad Factory, followed by Security Club. Then in the afternoon (and after presentations) I started reading <a href="https://www.freebsd.org/">FreeBSD</a> documentation since that's what I'm running my new Tor relay on - as I discovered a couple days ago, my old one apparently got hung during boot and was consuming 100% CPU due to the kernel image being corrupted or something. I chose FreeBSD because a) it's a rock-solid system, b) it's a good opportunity to gain experience with administrating a BSD, and c) it increases the diversity of the Tor network. Also, had a conference call in the afternoon with the <a href="https://www.eff.org/">EFF</a> and Paul from <a href="https://ta3mseattle.org/index.php/Main_Page">TA3M Seattle</a> about TA3M Seattle joining the EFF's <a href="https://www.eff.org/electronic-frontier-alliance">Electronic Frontier Alliance</a>, which was exciting for everyone.</p>
<h2>Friday</h2>
<p>Arrived ~13:00, departed ~22:30, total time at RC 9h30m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Didn't do a whole lot of coding. Spent a while helping <a href="https://jxself.org/">Jason</a> debug <a href="https://datamost.com/">Datamost</a>'s 3.0.0 upgrade (which apparently broke uploads). Attended presentations for the RC Game Jam, then fixed the documentation that caused Jason's problems. Spent a little bit of time polishing the website and README, too.</p>
<p>In the evening, fixed people being banned from ejabberd MUCs, then proceeded to fix my spam problem. Whoooooo! Then I kept working on my Tor relay.</p>
<h2>Executive summary</h2>
<p>Like any week, this had moments where I wasn't very productive. But overall I think it was pretty good - I made a lot of progress on realtime.recurse.com (and improved my Python in the process), and I made a lot of progress on setting up my Tor relay again (and learned a bunch about FreeBSD in the process). Also, I fixed my ejabberd spam problem. I learned nothing from that, but thank <em>god</em> I did it because the spam problem was honestly <em>awful</em>. The one issue was that I just didn't do a very good job getting up and making it to checkins.</p>
<p>Total time at RC 52 hours 50 minutes; cumulative time 464 hours 50 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-10</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-10</guid><pubDate>Wed, 15 Mar 2017 23:42:40 GMT</pubDate></item><item><title><![CDATA[Default-secure systems]]></title><description><![CDATA[<p>So recently I presented on <a href="https://strugee.net/presentation-operational-security/">operational security</a> and then started in on the nightmare that is <a href="https://strugee.net/presentation-https-deployment/">HTTPS deployment</a>. And like I did with <a href="https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers">language-level security</a> (I <em>still</em> need to write part 2 of that post), I thought to myself, this is so difficult. Why isn't there something that will do this for me? That's what my latest project is.</p>
<p>Here's the tl;dr:</p>
<pre><code>type(app)
=> Django/Express.js/etc. app
secure_system(app)
=> Docker image
</code></pre>
<p>Or in other words, you'll be able to take an existing web app that you've written, run it through this system, and it will spit out a complete, reasonably-secure system image.</p>
<p>Let's step back.</p>
<h1>The status quo</h1>
<p>Currently, when a developer wants to run a web app, they can either use something like Heroku, which is fully manged, or a VM from DigitalOcean or Amazon EC2 or something. There are a variety of reasons you might not want to use Heroku, but the only other option is a VM - and with a VM, you get a bare system where you have to set up everything from scratch. Lots of developers just don't have the operational experience to do this properly or securely, but it's not like they can go and get an operations team to do it for them. So they end up with systems that may have active security problems as well as little to no defense-in-depth mitigations for when security inevitably fails. Security is just another operational concern the developer has no time and no expertise to deal with, so it just doesn't happen. The developer spins up a VM, gets it to where it "works" and then moves on. <strong>This is not good enough.</strong></p>
<p>I don't want to create a false dichotomy, though: this is not the developer's fault. Everyone has conflicting priorities and it's unreasonable to expect the developer to spend lots of time learning to administrate systems so that they can then spend even more time, you know, administering systems. The problem is that there just isn't enough options available - we have to provide something better.</p>
<h1>A middle ground</h1>
<p>This is what my project is about: creating a middle ground between fully-managed deployment platforms and barebones, setup-from-scratch VMs.</p>
<p>This project rests on the idea that operational security (at least, in a single-server, single-admin context) flows from consistency, least privilege, and proactive, defense-in-depth security measures. Here are a couple core design goals:</p>
<ol>
<li>Meet developers where they are. Configuration management like Puppet is a great way to enforce consistency, but it adds a level of indirection and is just another thing that people running hobbyist projects don't have time to learn.</li>
<li>Tight integration with apps - this excludes more obscure types of web applications, but gives us a better footing to set up a solid deployment environment. It also may let us integrate more tightly with things like Content Security Policy in the future.</li>
<li>Support virtual hosting. The ability to run multiple apps while paying for a single VM is a compelling reason people go with VMs over e.g. Heroku - we won't be helping anyone if we leave this out.</li>
<li>Upgrades are optional. Any system image created by this project will present a system that is organized and can be maintained and modified by hand without breaking everything.</li>
<li>Upgrades are possible. Tight app framework integration will aid with putting data into well-known places that can be backed up and migrated to a new image generated by a newer version of this system.</li>
<li>Not designed for "real" production environments. Any project that has a dedicated operations person should not be using this; they should be rolling their own custom environments with something like Puppet. Accordingly, there won't be compromises in security in favor of flexibility - it's designed to cover 75% of cases "pretty well", which is still better than the status quo for smaller projects (almost 100% of cases don't have any security at all).</li>
</ol>
<p>I'd also like to highlight one really important decision: the output is complete system images. Probably at first this will mean Docker containers but this could easily be turned into VM images. This is a critical part of the design because it allows us to make broad, sweeping changes - for example, preferring system components written in memory-safe languages, replacing OpenSSL with LibreSSL, or creating systemd unit files that lock down service runtime environments to reduce the impact of a compromise. These improvements aren't possible unless we control the whole system. And because upgrades are optional but possible, the developer can get security improvements by "just" upgrading a component that they use, in the same way that they'd upgrade a library or something, as opposed to security being a continuous process they have to worry about. Again, obviously not perfect - but much better than the status quo.</p>
<p>I hope to have a MVP out Real Soon Nowâ¢. But in the meantime, if you have thoughts, feel free to reach out.</p>
]]></description><link>https://strugee.net/blog/2017/03/default-secure-systems</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/default-secure-systems</guid><pubDate>Mon, 13 Mar 2017 20:59:17 GMT</pubDate></item><item><title><![CDATA[RC week 9]]></title><description><![CDATA[<p>This is week 9 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 31</h2>
<p>Arrived ~10:30, departed ~15:15, arrived ~17:30, departed ~1:30, total time at RC 8h45m.</p>
<p>There were only two people in my checkin group this morning, and one of them was me. We thought about joining another checkin group, but it was confusing so we did it with just us.</p>
<p>Didn't really do a whole lot for the rest of the day. I fixed up a couple minor problems on strugee.net. Also I finally(!) fully caught up on blogging and went out to lunch with a bunch of people, including <a href="https://www.recurse.com/residents#Nelson-Elhage">Nelson</a>, the new resident. He's awesome. We had some seriously interesting discussions about the recent CloudFlare incident, as well as the work he did while at Ksplice.</p>
<p>Left early to do laundry, then came back for Nelson's talk.</p>
<p>Spent a lot of time in the evening cleaning up the <a href="">pump.io homepage</a> - I removed a bunch of duplicated content, reordered the remaining text to put the important stuff first, and imported all the pump.io-related posts on my personal blog into <a href="http://pump.io/blog/">http://pump.io/blog/</a>.</p>
<h2>Day 32</h2>
<p>Arrived ~11:30, departed ~21:40, total time at RC 10h10m.</p>
<p>Missed my checkin by a wide margin because a) after I realized I just couldn't make it by 10:30 I gave up and had a nice relaxed breakfast and b) I looked at checkins.recurse.com and realized that I was the only one in my checkins group.</p>
<p>Went out to Taim for lunch relatively soon after that. Didn't do a whole lot for the rest of the day, honestly - although I did go for a walk to a park with some folks. Also, tested out the Signal videocalling beta with <a href="https://matthewkelsey.com/">Matt</a>, which worked pretty damn well, I gotta say.</p>
<h2>Day 33</h2>
<p>Arrived ~10:40, departed ~1:45, total time at RC 15h5m.</p>
<p>I kinda tried to make it in for checkins this morning, but not really because I still hadn't fixed the "I'm the only one in my checkin group" problem. Didn't really do much today, honestly.</p>
<p>Went out to lunch with <a href="https://github.com/ant6n">Ant6n</a> and <a href="https://github.com/andrewrk">Andrew</a> and had a lot of interesting discussions with them, ranging all the way from <a href="http://ziglang.org/">Zig</a> to x86 hardware - did you know that internally x86 is actually essentially a VM implementation?</p>
<p>Spent a lot of time keeping Eliana company in Hopper late in the evening.</p>
<h2>Day 34</h2>
<p>Arrived ~11:05, departed ~17:55, total time at RC 6h50m.</p>
<p>Went to Nelson's "my first kernel module" talk immediately upon arriving at RC, which was <em>awesome</em>. I had some interesting conversations with him afterward, too, where I confirmed a theory I had about some weird btrfs-related behavior I'd seen a long time ago (where I <code>kill -9</code>'d an obviously hung <code>btrfs</code> process, which refused to die anyway). We also spent some time trying to figure out why <a href="http://unix.stackexchange.com/q/345285/29146">benchmarking loopback network performance</a> gave some weird results, which was quite informative.</p>
<p>Didn't do a whole lot after lunch. Left halfway through presentations to go to a play with Ant6n which unfortunately (due to a water incident with the subway system) I didn't quite make it to.</p>
<h2>Friday</h2>
<p>Arrived ~15:10, departed ~23:10, total time at RC 8h0m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Woke up at a decent time but didn't really bother to get up or do anything, so I arrived relatively late to RC. Spent some time reading TOTP in preparation for the RFC reading group meeting (which ended up not happening) and then went to the RC Game Jam kickoff. Spent most of the rest of the day discussing game design with my team before getting dinner and hanging out in Babbage for Bottle Share Friday, even though there weren't that many of us (particularly since James was doing stuff in Babbage) and we didn't have any bottles to share. Oh well - it was still fun.</p>
<p>Talked with <a href="https://github.com/ebb-tide">Deniz</a> and <a href="http://www.aberke.com/">Alex</a> and some other folks (I've forgotten who, to be honest) before heading home.</p>
<h2>Executive summary</h2>
<p>Most of the "interesting" stuff that happened this week had to do with the resident. Got a little done codewise, but not that much. I'd say this week was 50/50 in terms of productivity.</p>
<p>Total time at RC 48 hours 50 minutes; cumulative time 412 hours 0 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-9</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-9</guid><pubDate>Mon, 06 Mar 2017 23:39:34 GMT</pubDate></item><item><title><![CDATA[Driftless at 1,000 mph]]></title><description><![CDATA[<p>Last week I published <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a>. This post is, in some ways, the antithesis of that, and it will be very emotional and messy. Here be dragons.</p>
<hr>
<p>Throughout my time at RC I've noticed only one thing is consistently difficult for me: focusing on hard things. Intellectually I love the idea of challenging myself. And I find that when I start to work on things that are new and not easy, it feels good and I tend to keep working on those things, because they're interesting. But starting is something that I just don't do frequently enough, and so I find that I haven't progressed as a programmer nearly as much as I would like to have.</p>
<p>What is productivity?</p>
<p>Merriam-Webster defines it like this:</p>
<blockquote>
<ol>
<li>
<p>the quality or state of being productive</p>
</li>
<li>
<p>the rate per unit area or per unit volume at which biomass consumable as food by other organisms is made by producers</p>
</li>
</ol>
</blockquote>
<p>And "productive" is defined like so:</p>
<blockquote>
<ol>
<li>
<p>having the quality or power of producing, especially in abundance</p>
</li>
<li>
<p>effective in bringing about</p>
</li>
<li>
<p>a) yielding results, benefits, or profits; b) yielding or devoted to the satisfaction of wants or the creation of utilities</p>
</li>
<li>
<p>continuing to be used in the formation of new words or constructions</p>
</li>
<li>
<p>raising mucus or sputum (as from the bronchi)</p>
</li>
</ol>
</blockquote>
<p>By definitions 1-3 I certainly seem to have been productive; I've written a lot of code, much of which is useful. But useful to <em>whom</em>, and for what purpose?</p>
<p>I sometimes feel as if I'm just generating more and more code without any guiding process, as though I'm wasting my time even though concretely I'm getting a <em>lot</em> of things done - driftless even though I'm churning out work at an extremely high rate. Is this <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">imposter syndrome</a>? Or are my worries legitimate?</p>
<p>Maybe a better way to frame this question is to split it in two - am I being productive for myself, and am I being productive for the community - the two things that are currently important to me personally.</p>
<p>I think I am failing at being productive for myself, in some really important ways. I'm also succeeding in some - for example, I used to wish I had an engine to run my blog, and now I have <a href="https://github.com/straticjs">such an engine</a>. But in others I am failing.</p>
<p>What is the purpose of RC? Why am I here?</p>
<hr>
<p>recurse.com <a href="https://www.recurse.com/about#who-comes-to-the-recurse-center">says this</a> about people who come to RC:</p>
<blockquote>
<p>The Recurse Center is for people who want to become better programmers. We are not startup school nor are we a bootcamp: Our focus is helping people become better programmers, not building prototypes, and we're not a training program for web developers.</p>
<p>Because there is no certification or grading, the only reason to come to the Recurse Center is to become a better programmer. As such, you will find kindred spirits and tremendous energy. We look for smart, friendly, self-directed, intellectually curious people who enjoy programming and want to get dramatically better.</p>
</blockquote>
<p>More directly, <a href="https://www.recurse.com/manual">the manual</a> has this to say:</p>
<blockquote>
<p>You should be here primarily because you want to become a better programmer and spend the majority of your time here programming and doing things directly related to programming.</p>
<p>Well, we could ask you to be respectful of speakers and keep conversations on-topic in the Recurse Center space during the day (i.e. if you want to take a break and chat about your weekend, go grab a coffee).</p>
</blockquote>
<p>However, as <a href="https://haroldtreen.com">Harold</a> points out, that <a href="https://haroldtreen.com/tech/recurse/2017/01/27/recurse-center-return-statement/">isn't necessarily an accurate picture</a> of what RC is about. I think a lot of what it's really about is the people who are in the space with you. I've sure had a wonderful time with the people. Does that mean I'm "succeeding"?</p>
<p>Then there's the teaching.</p>
<hr>
<p><img src="/images/anja-teaching.jpg" alt="Screenshot of a Zulip message where Anja says &#x22;thank you AJ for teaching us so many things. :)&#x22;"></p>
<p>This is referring to the fact that I teach at Security Club every week, plus my volunteering to run a workshop or two for Beginner's Club and Web Dev 101.</p>
<p>Practically speaking, I get very, very little out of teaching at RC. Sometimes it helps solidify (or just plain remind me of) the concepts I teach, but this is the exception, not the norm. So in that sense by spending time teaching, I'm "failing" at being productive for myself. But it seems clear to me that people get a lot out of the time I spend, so I seem to be very productive for the community.</p>
<p>Equally importantly I <em>love</em> teaching. I qualified the previous paragraph with "practically speaking" because emotionally teaching is something that's very beneficial to me. Does that mean I'm "succeeding"? Does it mean I'm "failing" and "succeeding" at the same time?</p>
<p>I honestly don't know.</p>
]]></description><link>https://strugee.net/blog/2017/03/driftless-at-1000-mph</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/driftless-at-1000-mph</guid><pubDate>Mon, 06 Mar 2017 21:27:20 GMT</pubDate></item><item><title><![CDATA[RC week 8]]></title><description><![CDATA[<p>This is week 8 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 27</h2>
<p>Arrived ~10:35, departed ~0:30, total time at RC 13h55m.</p>
<p>Had a nice discussion about Stratic in my checkin group this morning. After that I went to the Capture The Flag introduction workshop, then spent essentially the entire rest of the day finishing up <a href="">static to Stratic</a> (which included, in a truly horrifying fashion, me rewriting and force-pushing the demo repository's history a good four times or so) so I'd have a post up for the iron bloggers meeting. Also spent some time fixing some bugs in <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> and published the beta 2 release with those fixes. Closed out the evening by digging into a remark problem where <code>&#x3C;script></code> tags would be stripped from posts. Ended up just asking on Gitter.</p>
<h2>Day 28</h2>
<p>Arrived ~10:30, departed ~20:40, total time at RC 10h10m.</p>
<p>Continued to investigate the remark problem based on replies received overnight - turns out it was a bug in remark fixed in a release that had gone out the door literally the same day I asked. After that I spent the day upgrading <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> (which, remember, was originally scaffolded <a href="https://strugee.net/blog/2014/12/new-blog-new-site">years ago</a>) to newer and newer releases of <code>yeoman-generator</code> until it used <code>yeoman-generator@latest</code>. Then I spent time adding some basic tests - they're kind of just smoketests for now (are the correct files generated, does <code>gulp serve</code> work) but I <a href="https://github.com/straticjs/generator-stratic/issues/11">intend</a> to expand them. Also moved over some issues to the new <a href="https://github.com/straticjs/RFCs">straticjs/RFCs</a> repository and attended Casual Presentations.</p>
<h2>Day 29</h2>
<p>Arrived ~10:50, departed ~20:35, total time at RC 9h45m.</p>
<p>Didn't do a whole lot codewise today. However, I did teach Unix fundamentals for Beginner Club, which went pretty well - I just spent the entire time in the commandline, demonstrating different commands. We spent a little time talking about shell scripting, but not much. I forgot to cover conditionals, which was dumb since they're pretty weird in shell scripting. Spent some time in the afternoon starting a draft of <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a></p>
<p>Watched Kiki's Delivery Service in the evening.</p>
<h2>Day 30</h2>
<p>Arrived ~10:35, departed ~00:05, total time at RC 13h30m.</p>
<p>Finished and published <a href="https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions">How I passed 2k GitHub contributions</a>. Presented <a href="https://strugee.net/presentation-cryptography-basics">cryptography basics</a> at Security Club, then spent a lot of time fixing miscellaneous items on steevie. In particular ejabberd was apparently configured to use a standalone certificate bundle (instead of symlinking to something in <code>/etc/letsencrypt/live</code>) - this was because ejabberd requires the private key and the full chain to be in the same file. TLS certificate renewal didn't properly update this bundle, so XMPP client connections weren't working. ZNC was broken in the same way, so I fixed both of those. I also spent some time setting up a system to publish everything custom in <code>/usr/local</code> <a href="https://github.com/strugee/steevie-usr-local">on GitHub</a> so that it's public and version-controlled. So that's nice.</p>
<h2>Friday</h2>
<p>Arrived ~15:50, departed ~1:00, total time at RC 9h10m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Came in super late (though I woke up earlier). Almost immediately after that I attended an initial meeting about starting an RFC reading group (an idea I floated on Zulip a couple days ago). Spent most of the day poking at IETF things as well as responding to <a href="https://github.com/hubot-scripts/hubot-seen">hubot-seen</a> PR comments. I just got write access! \o/</p>
<p>Closed out the evening by attending Bottle Share Friday, where I had a long discussion with <a href="http://www.aberke.com/">Alex</a> about running my own email server (which spun off into a discussion of how completely terrible and busted email is), followed by a long discussion about whether Apple's release schedule for Safari and attitude towards new web features and third-party iOS rendering engines is justifiable.</p>
<h2>Saturday</h2>
<p>Arrived ~11:15, departed ~23:30, total time at RC 12h15m. Saturday doesn't count as a day because RC is not in session.</p>
<p>Marathoned Lord of the Rings today. The showing was small and people drifted in and out but most of the time there were a couple people watching, which was fun. The original plan was to watch the director's cut versions, watching The Return of the King on Sunday, but we ended up watching the regular versions because you can't rent the director's cuts off Amazon, and I wasn't about to pay $30 for movies that I <em>already own</em> on DVD back home. We probably would've still watched on Sunday, except that I went out to get pizza for dinnr and found out that it was pouring rain (with thunder/lightning and everything). So I decided we'd watch The Return of the King and wait for the rain to let up, which worked beautifully.</p>
<p><a href="https://github.com/Husseinfarah93">Hussein</a> came in just as I was about to leave and stated that he almost had a heart attack because he sprinted literally from his apartment to Duane Reade, which truthfully was absolutely <em>hilarious</em>. We had some fun wandering around Duane Reade trying to find soap (which I needed to buy) before we both headed home.</p>
<p>(As a side note, my favorite brand of mac 'n' cheese by far is Annie's, which my local supermarket does not carry. But apparently Duane Reade does!? Wat???)</p>
<h2>Executive summary</h2>
<p>This week was weirdly divided - some parts were hyper-productive and some parts were pretty terrible. I certainly got a lot of work done on Stratic, and I taught a lot. But I didn't really do a good job of working on stuff that pushed my programming abilities forward.</p>
<p>Total time at RC 68 hours 45 minutes; cumulative time 363 hours 10 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/03/rc-week-8</link><guid isPermaLink="true">https://strugee.net/blog/2017/03/rc-week-8</guid><pubDate>Wed, 01 Mar 2017 19:11:19 GMT</pubDate></item><item><title><![CDATA[RC week 7]]></title><description><![CDATA[<p>This is week 7 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 23</h2>
<p>Arrived ~10:00, departed ~21:45, total time at RC 11h45m.</p>
<p>Didn't get a whole lot done today, mostly because we were all welcoming the Spring 1s - I went out to lunch with some of them and participated in Code Dojo in the afternoon (<a href="https://github.com/adityavkk">Aditya</a> and I solved the challenge in <code>bash</code>, which was pretty interesting an also hilarious[1]). However, I did do some maintenance on <a href="https://gplenforced.org">gplenforced.org</a>. I did, however, start a project to display activity in 455 Broadway in realtime which I'm pretty exited about.</p>
<p> [1]: Aditya asked me "so can you just cast a string to an integer in <code>bash</code> or...?" and when I said no he looked at me and asked how in the world we could complete this task - not realizing that the correct question is, of course, "does <code>bash</code> have a type system?" The answer to which is no, no it does not.</p>
<h2>Day 24</h2>
<p>Arrived ~14:30, departed ~1:10, total time at RC 10h40m.</p>
<p>Spent most of today working on realtime.recurse.com - I got the basic API working, so you can POST to the server and it'll handle expiry properly. Also spent a lot of time blogging for the Iron Blogger meeting (in which I got sentenced to use <code>vim</code> for the week instead of Emacs for not writing a post a couple weeks ago).</p>
<h2>Day 25</h2>
<p>Arrived ~10:30, departed ~19:10, total time at RC 8h40m.</p>
<p>Spent the day catching up on various things, notably putting out a new pump.io beta that backported some regression fixes. In the evening I spent most of my time finishing up a mid-year college application form before videocalling with a friend in college.</p>
<h2>Day 26</h2>
<p>Arrived ~10:35, departed ~1:05, total time at RC 14h30m.</p>
<p>Spent some time working on server stuff today. Other than that though I didn't do much of anything.</p>
<h2>Friday</h2>
<p>Arrived ~16:20, departed ~1:45, total time at RC 9h25m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Worked on <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> today. I fixed some bugs and disabled some functionality that wasn't complete (and was non-trivial to complete). Published a beta 0 in the evening.</p>
<h2>Executive summary</h2>
<p>This week was... <em>okay</em> in terms of productivity. It started off relatively good, slipped a fair amount in the middle, and then somewhat came back at the end of the week. I did, however, check off some semi-longstanding issues on my todo list. So that's nice.</p>
<p>Total time at RC 55 hours 0 minutes; cumulative time 294 hours 25 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-7</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-7</guid><pubDate>Mon, 27 Feb 2017 20:14:03 GMT</pubDate></item><item><title><![CDATA[How I passed 2k GitHub contributions]]></title><description><![CDATA[<p>So the other day I logged into GitHub and saw something crazy:</p>
<p><img src="/images/github-2k-contributions.jpg" alt="Screenshot of my GitHub contribution graph showing 2,054 contributions over the past year"></p>
<p>How in the hell did I end up with that many contributions? Well, I think I know why - it happened because of a couple related, small habits I have. I thought I'd share them with everyone else as a sort of trivia - maybe you can adopt these habits too! (Although hopefully because you think they're good ideas, not because you just want to make yourself look cool on GitHub.)</p>
<h2>Fix typos</h2>
<p>If projects are freedom-respecting, that means that anyone is welcome to contribute if they're able to offer something valuable. How many times have you seen a typo in some docs? GitHub makes it super, super easy to fix these (just click the pencil icon in the upper-right of GitHub file views), and they're a fantastic way to contribute a little back to projects. Even if you aren't reading docs on GitHub, it often doesn't take that much time to find where they're hosted (which is frequently GitHub anyway). Really good docs will even have a link to their source right on the generated page.</p>
<p>So whenever I see a typo, I send a Pull Request. It's become an automatic response to seeing something that needs fixing, and is pretty routine for me nowadays.</p>
<p>Oftentimes there are changes that aren't as easy as a typo, but are still super easy to fix. Take <a href="https://github.com/Homebrew/brew/pull/1634">this Homebrew PR</a> - I authored it on a tablet and it took me under 3 minutes to make the suggested change[1]. That's not a lot of effort, and it'll help lots of people looking for the Homebrew change log. The next time you find yourself thinking "it kinda sucks that..." ask yourself - can I fix this myself? And if you can, go for it! Even if you screw up, I promise most projects will want to help you out instead of making fun of you[2] - as someone who runs several freedom-respecting projects, I know that getting new contributors is very, very valuable and because of that I'll do a lot to make contributing a good experience. I would encourage everyone to, as Mike McQuaid puts it in that Homebrew PR, "be the change you want to see in the world."</p>
<p> [1]: of course, that's partly because I'm pretty good at git and grok things like <code>rebase -i</code>. But even if that's not you and it would take you longer, it sounds like a great opportunity to improve your git skills to me!</p>
<p> [2]: I feel obligated to point out that not every project is like this - there are some projects that have a terrible culture (*coughcough*Linuxkernel*cough*). Screw them. They're not that common in my experience and it's their loss, anyway. Don't let them deter you from trying to improve things outside of their bubble of suck.</p>
<h2>File issues</h2>
<p>I just talked about making small changes whenever you see something you can improve with a couple minutes' time. But what if you're in a hurry, or it would take longer?</p>
<p>Filing issues is a super easy way to solve this. Get into the habit of filing issues for everything that irks you[3] - you're not allowed to say "such-and-such a project sucks because it's buggy!" when you haven't told the developers about the bug you're experiencing!</p>
<p>Filing issues also takes very little time and is super helpful to the developer. Probably a lot of the people who read this blog are software developers, so I'm betting you can understand how great it is to receive an issue that gives you lots of details that you can then use to fix a bug or a design problem. So why not give the gift of issues? Just make sure to search for duplicates! (This accounts for a significant amount of those 2,000 contributions on my GitHub profile. Over the course of my time on GitHub, I've filed 619 issues, 438 of which were on other people's projects. Of course, that's just on GitHub - I also do this frequently <em>outside</em> of GitHub.)</p>
<p>Again, every time you find yourself saying, "why doesn't it..." or "I wish it..." or "it's so annoying when...", let the developer know! You'll help them make their project better.</p>
<p>  [3]: this is not to suggest that you file ridiculous issues that don't really say anything or just complain. But a focused bug report describing something concrete that's problematic is awesome.</p>
<h2>Publish by default</h2>
<p>This is the last and biggest habit I have that I think led to those 2k contributions: I publish everything by default, no matter what. It doesn't matter how bad or hacky or ugly I think a software project is, I just publish it. Because honestly, why not?</p>
<p>Keeping projects public doesn't get in anyone's way. It's not like someone will look at your GitHub and be <em>annoyed</em> that you give so much software to the world. And there's even a chance that your hacky script may actually be <em>useful</em> to someone. Even if I think a project is "bad" I'll still publish it because the reality is that no one is going to go around GitHub specifically trying to find people to make fun of.</p>
<p>Publishing projects also gives me incentive to clean them up - write a README, write tests, and keep a change log (if relevant). My standards are higher because I know all my work is all in the open - not because I'm afraid of other people telling me I'm doing it wrong, but because I want to create high quality code that has a better chance of being useful to the wider community.</p>
<h2>In summary</h2>
<p>All of these habits are related. The tl;dr is this: engage by default. Get used to being involved instead of shrugging off a problem and moving on. Put your work out there for other people to see. The open source/freedom-respcting software community belongs to everyone - and that means we can all contribute to improving it. We just have to start.</p>
]]></description><link>https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/how-i-passed-2k-github-contributions</guid><pubDate>Thu, 23 Feb 2017 17:46:19 GMT</pubDate></item><item><title><![CDATA[From static to Stratic - part 1]]></title><description><![CDATA[<p>So a couple days ago I published <code>generator-stratic@1.0.0-beta.1</code> to npm. Since Stratic is now officially in beta, I thought I'd write up a guide to converting a regular, static site to a Stratic-powered blog.</p>
<p>Each step in this blog post (part 1 of 2[?]) will take you closer to having a fully-functional blog, but because of Stratic's decoupled design, you can work through them at your own pace. Each step will leave you with a functional environment (i.e. nothing will be "broken" such that you can't work on your website anymore).</p>
<p>You can see the steps in this post in action at <a href="https://github.com/straticjs/static-to-stratic">straticjs/static-to-stratic</a>. Each commit corresponds to a step in this post.</p>
<p>Let's get started!</p>
<h2>Initial setup</h2>
<p>The site we'll be converting is currently pretty simple. It has an <code>index.html</code> and a <code>projects.html</code>. Each of these includes <code>/css/main.css</code> and <code>/js/main.js</code>. Also, they both have a navigation section and a footer that are duplicated across each page. Each time Alyssa P. Hacker - the website's owner - makes a change to these (for example to fix the copyright year in the footer), she has to change both HTML files. The best way for her to add a new page will be to copy an existing HTML file and then change it. This is a little unideal.</p>
<p>Alyssa tracks her website on GitHub (in the example repository mentioned above). Here are links for the <a href="https://github.com/straticjs/static-to-stratic/blob/18a7a7da03a2f84f525f0b699a43005067428199/index.html"><code>index.html</code></a> and the <a href="https://github.com/straticjs/static-to-stratic/blob/18a7a7da03a2f84f525f0b699a43005067428199/projects.html"><code>projects.html</code></a> we'll be working with.</p>
<p>Here's a visual of the project layout:</p>
<pre><code>% tree .
.
âââ css
âÂ Â  âââ main.css
âââ index.html
âââ js
âÂ Â  âââ main.js
âââ projects.html

2 directories, 4 files
</code></pre>
<p>When Alyssa needs to preview her website, she manually runs <code>http-server .</code>.</p>
<p>Since Alyssa uses GitHub she publishes her website on GitHub Pages, so her website is in the <code>master</code> branch of her git repository. (Here we're assuming that the repository is called <code>aphacker.github.io</code> or something, instead of <code>static-to-stratic</code>.)</p>
<p>In addition to adding blog support, we'll improve Alyssa's website by reducing duplication while still allowing her to publish to GitHub Pages.</p>
<h2>Step 1 - adding gulp</h2>
<p>Before we do anything else, we need to add a build system. Stratic is designed to work with <a href="">gulpjs</a>, so that's the one we'll be using.</p>
<p>Adding gulp is super easy. First, we need to create a <code>package.json</code>, so we do <code>npm init</code>:</p>
<pre><code>% npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &#x3C;pkg> --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (static-to-stratic)
version: (1.0.0)
description: Personal website of Alyssa P. Hacker
entry point: (index.js)
test command:
git repository: (https://github.com/straticjs/static-to-stratic.git)
keywords:
author: Alyssa P. Hacker &#x3C;alyssaphacker@example.net>
license: (ISC) AGPL-3.0+
About to write to /Users/alex/Development/static-to-stratic/package.json:

{
  "name": "static-to-stratic",
  "version": "1.0.0",
  "description": "Personal website of Alyssa P. Hacker",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &#x26;&#x26; exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/straticjs/static-to-stratic.git"
  },
  "author": "Alyssa P. Hacker &#x3C;alyssaphacker@example.net>",
  "license": "AGPL-3.0+",
  "bugs": {
    "url": "https://github.com/straticjs/static-to-stratic/issues"
  },
  "homepage": "https://github.com/straticjs/static-to-stratic#readme"
}


Is this ok? (yes) yes
</code></pre>
<p>A couple things to note here: in general, the defaults are fine to accept. We've provided a description and an author, but these are optional since this isn't actually going to be published on the npm registry. They're just kind of nice to have.</p>
<p>The same goes for the license, which in this case is the <a href="https://www.gnu.org/licenses/agpl-3.0.en.html">Affero GPL 3.0 or above</a> - however, as the copyright holder you are of course free to <a href="https://choosealicense.com/">choose whatever license</a> you want. (Or no license, although I'd discourage you from doing that.)</p>
<p>Once we have a <code>package.json</code>, we can go ahead and install gulp and another module we'll need, <code>ecstatic</code>:</p>
<pre><code>% npm install --save-dev gulp ecstatic
</code></pre>
<p>If you haven't used gulp previously, you'll also need to install <code>gulp-cli</code>:</p>
<pre><code>% npm install -g gulp-cli
</code></pre>
<p>At this point, we'll need to move some files around. Now that we have a build system, we can organize our repository however we want instead of putting stuff exactly where we want it in production.</p>
<p>You can do this however you want. The organization that you'll find most projects using, though, is to put stuff in a <code>src</code> directory. Let's make that right now.</p>
<pre><code>% mkdir src
% git mv *.html src
% git mv css src/styles
% git mv js src/scripts
</code></pre>
<p>Finally, create a file named <code>gulpfile.js</code> and put the following in it:</p>
<pre><code>var gulp = require('gulp'),
    http = require('http'),
    ecstatic = require('ecstatic');

gulp.task('build:html', function() {
    gulp.src('src/*.html')
        .pipe(gulp.dest('dist'));
});

gulp.task('build:css', function() {
    gulp.src('src/styles/*')
        .pipe(gulp.dest('dist/css'));
});

gulp.task('build:js', function() {
    gulp.src('src/scripts/*')
        .pipe(gulp.dest('dist/js'));
});

gulp.task('watch', ['build'], function() {
    gulp.watch('src/*.html', ['build:html']);
    gulp.watch('src/styles/*', ['build:css']);
    gulp.watch('src/scripts/*', ['build:js']);
});

gulp.task('serve', ['watch'], function() {
        http.createServer(
                ecstatic({ root: __dirname + '/dist' })
        ).listen(8080);
});

gulp.task('build', ['build:html', 'build:css', 'build:js']);

gulp.task('default', ['serve']);
</code></pre>
<p>This gives us a pretty good starting point. This gulpfile defines a couple tasks that simply copy source files into <code>dist</code>. The <code>watch</code> task watches for changes and rebuilds when they occur, and the <code>serve</code> task starts up a server, replacing Alyssa's usage of <code>http-server</code>. This provides exactly the same workflow as before: Alyssa runs one command and then she can look at her site on <code>localhost:8080</code>. You can use different task names if you want (for example, <code>html</code> instead of <code>build:html</code>, etc.), but these are what <code>generator-stratic</code> gives you.</p>
<p>However, there's one problem: Alyssa can't deploy her site anymore. If she pushed like this, visitors would have to visit e.g. <code>https://aphacker.github.io/src/projects</code> instead of <code>https://aphacker.github.io/projects</code>! That's no good.</p>
<p>In order to rectify this, we'll create a new git branch, <code>src</code>. <code>src</code> will contain the source files, and we'll put the final, built site in <code>master</code>, which is what's served by GitHub Pages. So:</p>
<pre><code>% git checkout -b src
% git push --set-upstream origin src
</code></pre>
<p>Great. Now, we need to add something to put the built files (i.e. the contents of <code>dist</code>) in <code>master</code>. We'll use the <code>gh-pages</code> module for this. First install it and a dependency we'll need:</p>
<pre><code>% npm install --save-dev gh-pages gulp-util
</code></pre>
<p>Next, make it available in the gulpfile by adding a line at the end of <code>require()</code> statements:</p>
<pre><code>var gulp = require('gulp'),
    http = require('http'),
    ecstatic = require('ecstatic');
</code></pre>
<p>And finally, add a <code>deploy</code> task somewhere in the gulpfile:</p>
<pre><code>gulp.task('deploy', ['build'], function(done) {
    ghpages.publish(path.join(__dirname, 'dist'), { logger: gutil.log, branch: 'master' }, done);
});
</code></pre>
<p>Now whenever Alyssa wants to deploy a new version of her website, she just runs <code>gulp deploy</code> and it'll be taken care of for her. (ProTipâ¢: change the default branch to <code>src</code> on GitHub. That way visitors and new clones see the source files, not the build files generated by a program.)</p>
<p>The very last thing we need to do is add a <code>.gitignore</code> file since we're installing Node modules and have a build directory now. We'll just use GitHub's, adding a line for <code>dist/</code> at the end:</p>
<pre><code>% curl https://raw.githubusercontent.com/github/gitignore/master/Node.gitignore > .gitignore
% echo "\ndist/\n" >> .gitignore
</code></pre>
<p>Now we've got a functionally equivalent development setup based on gulp. Success!</p>
<h2>Step 2: converting HTML to Jade</h2>
<p>The next step is to convert the HTML to <a href="https://pugjs.org">Pug</a>. Pug (formerly known as Jade) is a language that compiles to HTML. It lets you do useful things like inherit from a common layout as well as looping over JavaScript variables. If you're not familiar with Pug, you should go take a look at its syntax now.</p>
<p>The easiest way to do this conversion is to get a program to do it for you. <a href="http://html2jade.aaron-powell.com/">Here's the one I used</a> way back when; you may be able to find a better one. The generated Pug will be valid but not the prettiest - you may want to wait to clean it up since we're going to do some work to reduce the duplication soon.</p>
<p>Once you've got the converted Pug, you should rename the relevant HTML file to have a <code>.pug</code> extention, then replace the contents with the Pug. Do this for each HTML file.</p>
<p>The last step here is to make gulp build the Pug. Install <code>gulp-pug</code>:</p>
<pre><code>% npm install --save-dev gulp-pug
</code></pre>
<p>Then add <code>pug = require('gulp-pug')</code> to the end of the <code>var</code> declaration at the top of your gulpfile. Finally, change your <code>html</code> task to look like this:</p>
<pre><code>gulp.task('build:html', function() {
    gulp.src('src/*.pug')
        .pipe(pug({pretty: true}))
        .pipe(gulp.dest('dist'));
});
</code></pre>
<p>We'll also need to fix the <code>watch</code> task so it has:</p>
<pre><code>gulp.watch('src/*.pug', ['build:html']);
</code></pre>
<p>which will watch Pug files instead of HTML files.</p>
<p>That's it! Alyssa's site is now building with Pug instead of HTML.</p>
<h2>Step 3: splitting out the layout</h2>
<p>Pug's looping and flow control constructs will be very useful to us later on, but we can get some immediate productivity wins by splitting out the site layout so it's not duplicated across every Pug file.</p>
<p>There's one tricky thing about this: the navigation is mostly the same between pages, but not quite - the page the user is currently on shouldn't be a link. We'll solve this by using a <code>block</code> directivefor each link. That way, we can override just what needs to be changed, while introducing no duplication.</p>
<p>You'll have to figure out exactly what parts of your personal layout make sense to be split out. In Alyssa's case, there are three main things that are mostly or fully duplicated across pages:</p>
<ol>
<li>The navigation bar</li>
<li>The footer</li>
<li>Invisible metadata and script/style includes</li>
</ol>
<p>These are what we'll split out. First, we'll make a copy of <code>index.pug</code> and put it in <code>src/includes/layout.pug</code>. (Again, you can organize your files however you want - but in projects generated by <code>generator-stratic</code>, utility Pug files go in <code>src/includes</code>.) Next, edit out the page-specific content and replace them with <code>block</code> directives. Finally, edit each navigation bar item so it has its own <code>block</code> directive, leaving the old code as the default for the <code>block</code> directive.</p>
<p>Here's what this looks like when we do this to Alyssa's site:</p>
<pre><code>doctype html
html
  head
    meta(charset='UTF-8')
    link(href='/css/main.css', rel='stylesheet', type='text/css')
    block head
  body
    block heading
    nav
      ul
        block nav-homepage
          li
            a(href='/') Homepage
        block nav-projects
          li
            a(href='/projects') Projects

    block body

    footer
      p &#x26;copy; Copyright 2016 Alyssa P. Hacker.
    script(src='/js/main.js', type='text/javascript')
</code></pre>
<p>Note how I've replaced the <code>h1</code> element (the contents of which vary per-page) with <code>block heading</code>, I've added a <code>block head</code> directive so we can specify the title per-page, I've made a <code>block</code> for each navigation link so we can override them if we want to individually (otherwise they'll have the default of being a link), and I've added <code>block body</code> for the main content. I've also cleaned out a bunch of the cruft the automatic converter put in there.</p>
<p>Now, we can edit <code>index.pug</code> so that it inherits from <code>layout.pug</code> - we'll use the <code>extends</code> keyword for this. Then we just fill in the content we want using block. Here's what this looks like after we're finished with Alyssa's site:</p>
<pre><code>extends includes/layout.pug

block head
  title Alyssa P. Hacker's homepage

block heading
  h1 Alyssa P. Hacker's homepage

block nav-homepage
  li Homepage

block body
  p This is the homepage of Alyssa P. Hacker. You can check out the projects I've worked on #[a(href='/projects') here].
</code></pre>
<p>You'll note that I've cleaned out some cruft here, too. We have one last thing to fix: if we change the layout, nothing will get rebuilt. We can fix this by changing the <code>watch</code> task again so that the line for watching Pug files reads:</p>
<pre><code>gulp.watch(['src/*.pug', 'src/includes/*.pug'], ['build:html']);
</code></pre>
<p>Sweet! <code>index.pug</code> is way shorter than what we had before and includes <em>just</em> the content now. We can do the same thing to <code>projects.pug</code>. Then Alyssa can, for example, correct the copyright year in <code>layout.pug</code> - i.e., once - and that change will go into both <code>index.html</code> <em>and</em> <code>projects.html</code>. I've gone ahead and made the change for her.</p>
<p>To give a high-level overview, here's what Alyssa's site looks like now:</p>
<pre><code>% tree -I node_modules .
.
âââ dist
âÂ Â  âââ css
âÂ Â  âÂ Â  âââ main.css
âÂ Â  âââ index.html
âÂ Â  âââ js
âÂ Â  âÂ Â  âââ main.js
âÂ Â  âââ projects.html
âââ gulpfile.js
âââ package.json
âââ src
    âââ includes
    âÂ Â  âââ layout.pug
    âââ index.pug
    âââ projects.pug
    âââ scripts
    âÂ Â  âââ main.js
    âââ styles
        âââ main.css

7 directories, 11 files
</code></pre>
<h2>Next time...</h2>
<p>This post is long enough already, so I'll stop here. We've converted Alyssa's site to have a really solid base, so next time we'll build on top of this work to add superpowered blog features, powered by Stratic.</p>
<p>Now go apply this to your own site!</p>
]]></description><link>https://strugee.net/blog/2017/02/from-static-to-stratic-part-1</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/from-static-to-stratic-part-1</guid><pubDate>Mon, 20 Feb 2017 19:58:53 GMT</pubDate></item><item><title><![CDATA[RC week 6]]></title><description><![CDATA[<p>This is week 6 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<p>(I feel obligated to point out that this is being published a week later than it's supposed to be because I got behind. I am, however, very confident that the following is accurate. I used GitHub history and location data to help me remember the parts that were fuzzy.)</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 19</h2>
<p>Not at RC. Total time at RC 0h0m.</p>
<p>Traveled back from <a href="https://fosdem.org/2017/">FOSDEM</a>.</p>
<h2>Day 20</h2>
<p>Arrived ~16:45, departed ~22:10, total time at RC 5h25m.</p>
<p>Somewhat unproductive day. Spent most of it just trawling the web. I was completely exhausted since I got back to my apartment from the airport at 3 in the morning. (My flight got in late, I waited at the airport for a while to see my sister, and at 12:30 I got on my train away from the AirTrain station except that it was in the wrong direction. Also, fun fact, subways and trains run <em>really</em> infrequently at 1 AM. Who knew!?)</p>
<p>I did, however, write the slides for the next day's Security Club presentation on the basics of cryptography. Started them pretty late, though, and mostly finished them at home, which was unfortunate since I was up real late again.</p>
<h2>Day 21</h2>
<p>Arrived ~13:00, departed ~22:00, total time at RC 9h0m.</p>
<p>Arrived with a little time to spare before teaching Cryptography Basics for Security Club. Didn't do much in the afternoon before leaving to walk down to the waterfront with 15 people or so, which took an hour and was really, really lovely, honestly. Especially since the Winter 1 batch is ending so soon.</p>
<h2>Day 22</h2>
<p>Arrived ~12:00, departed ~5:00, total time at RC 17h00m.</p>
<p>Spent the morning and early afternoon pairing with <a href="https://github.com/Jmeggesto">Jackie</a> on <a href="https://github.com/strugee/icalc">icalc</a>. We fixed a maddeningly weird bug where, when the user input an incorrect value, the operation type prompt would be displayed twice. You can see the fix <a href="https://github.com/strugee/icalc/commit/fb20487c5385cb0ae6192cd6540c98fbd82ff2d0#diff-2045016cb90d1e65d71c2407a2570927">here</a> - the problem was that <code>getchar()</code> was retrieving the newline used to "submit" the operation type when the function was called again (recursively). In other words, the stdin stream had <em>two</em> characters on it - the incorrect character, and the newline. The solution was to just use a different function from libc that did this correctly. The entire process was pretty educational, since it required delving into C strings, the libc manpages, etc. After fixing that, Jackie and I paired on <a href="https://github.com/Jmeggesto/bank-prettify">a JavaScript project</a> that will display Bank of America account balances on the commandline (a non-trivial problem, since Bank of America requires JavaScript).</p>
<p>In the late afternoon, switched gears a bit to review a PRISM Break PR.</p>
<p>In the evening, I gave a presentation at Thursday night presentations entitled "Mercurial for Git folks". I put zero effort into slides and instead simply opened up a bunch of tabs and terminal windows with content I wanted to point to while I was talking. Then I got up there and just... talked about why Mercurial is neat. At the beginning I asked who used Git (most hands, including mine, went up) and who hated Git (a fair number of hands, including mine, went up). So that was pretty amusing. I talked about how the design was pretty similar to Git, how Mercurial has extensions (because it's written in Python), how that plays into its "disable confusing/dangerous stuff like the staging area and rebase by default" philosophy, and how I've been learning it by just using <a href="https://hg-git.github.io/">hg-git</a> with GitHub. I thought it went pretty badly, because I didn't feel like it was very coherent. But the people I asked about it said it was actually pretty good, so that feels nice.</p>
<p>After that, we had the end-of-batch/goodbye Rose party. :'(</p>
<p>I spent a lot of time discussing politics and education with <a href="https://github.com/steph-rage">Stephanie</a>, which was lovely, and had some other long and interesting conversations that I wish I remember but don't, truthfully. Spent quite a bit of time with <a href="https://github.com/inytar">Pieter</a>, <a href="https://github.com/heatherbooker">Heather</a>, and David L messing around on top of the desk chairs, which completely filled Hopper. Eventually ended up sitting in Babbage with Rose, James, Heather, and some other folks (can't remember, honestly) just hanging out. We jacked the space heater way up so it felt like a sauna (aka reeeeeeal nice) and just talked about stuff. Around the 2-3 AM mark Heather and I got bundled up and went out to go to the pharmacy (which turned out to actually be literally right next door) and buy chocolate and nail polish. And then I spent somewhere between 1.5 to 2 hours painting my nails a fabulously sparkly red color called "Devil's Stare" from a brand called "Sinful Colors" - a combination which strikes me as being nothing short of <em>wild</em>.</p>
<p>At around 5 AM, everyone decided to go to sleep. I was the only person to go home, and honestly the only reason I did so was because I knew I'd want a shower in the morning. So I spent about 15 minutes trying to find the stupid switch to turn off the kitchen lights, finally gave up and went home, and fell asleep a short while after the sun rose.</p>
<h2>Friday</h2>
<p>Arrived ~18:00, departed ~1:15, total time at RC 7h15m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Arrived exceedingly late since I woke up around, you know, 5. Got to RC and did very little before noticing a very large party leaving for dinner, which I joined and ate with (despite saying before I left that I'd had breakfast recently, so I "wasn't going to get anything"). We went out to get Chinese food, then went to a place that served Asian dessert of some kind (I've forgotten). It was beyond lovely, honestly.</p>
<p>(I also mentioned at dinner that I'd missed a week of blogging, so during a discussion with <a href="https://github.com/chirs">Chris</a> about it I posted to a Zulip topic named "shame AJ" soliciting ideas for a punishment as well as moving the regular Iron Blogger meeting to Tuesday due to the Spring 1 introduction day.)</p>
<h2>Executive summary</h2>
<p>This week was particularly unproductive. I only did a little bit of work on icalc, my C project, and other than that the only really RC-related project I did was my security club presentation on cryptography basics. This was mostly because my sleep schedule was super messed up from Brussels, and then got messed up again (just as it was getting back to normal) on Thursday.</p>
<p>This week was also very emotional, since it was the Winter 1s' last week. To all my Winter 1 friends: you made my time at RC amazing and welcoming and exciting and wonderful and I loved being around you all. And I will miss you for a very long time. &#x3C;3</p>
<p>(*<em>starts crying a lil bit</em>*)</p>
<p>Total time at RC 38 hours 40 minutes; cumulative time 239 hours 25 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-6</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-6</guid><pubDate>Sun, 19 Feb 2017 07:42:52 GMT</pubDate></item><item><title><![CDATA[Gender representation at RC]]></title><description><![CDATA[<p>So I want to talk (real quick) about gender representation in tech. Specifically, the fact that it's abysmal. Women[1] usually account for, at most, <a href="https://www.cnet.com/news/women-in-tech-the-numbers-dont-add-up/">30% of the employees in a company</a> and that number is often much lower. Even at the companies where it's 30%, that number is misleading because it doesn't adress management positions which are often much lower. (For reference, women accounted for about 59% of the overall workforce as of 2015, when the article I pulled those numbers from was published.) <a href="http://fortune.com/2014/10/02/women-leave-tech-culture/">Here's an article</a> that says that on average, women leave the industry within 7 years of being in it. Let me repeat that, because I didn't say they leave their jobs, or take a break. They completely leave the <em>entire technology industry</em>. And unfortunately it makes sense, since incidents of sexism in tech are <a href="">rampant</a>.</p>
<p>Unlike (most of) the rest of the tech world, the <a href="https://recurse.com">Recurse Center</a> is mostly (completely?) gender-balanced. I want to point out that while for years I've believed in diversity, it didn't become clear to me how much <a href="https://www.opensocietyfoundations.org/voices/implicit-bias-and-social-justice">implicit bias</a> I held until I joined RC. I find that, having previously spent significant amounts of time in environments that were predominantly white, cis and male, <strong>I find myself needing to self-correct discriminatory and gender-based unconscious assumptions significantly less frequently at RC</strong>. In other words, my subconscious is making less incorrect, gender-based suggestions about what people are like that I then have to consciously reject. I would attribute this almost 100% to the fact that at RC I'm surrounded by lots of people who are a) super talented and know their shit and b) aren't male.</p>
<p>If I have a point to this blog post (and I'm not sure that I do), it'd be to underscore what many have said before me: representation and role models are important. Advocating for gender equality is good and important, but in the end what really matters is what's actually in people's heads. That's mostly influenced by what they see in their immediate lives, and that's why representation is so important - believing in equality is great, but presenting actual evidence to your subconscious that its biases are incorrect is a much more powerful way to improve the way you perceive the world.</p>
<p>If folks have any comments or different perspectives, I'd love to hear them <a href="/contact">privately</a> or via <a href="https://webmention.net/">WebMention</a>.</p>
<p> [1]: I'm focusing on women here because I'm not aware of any statistics about non-binary people in tech. But it's worth noting that it's a huge problem for them, too.</p>
<p><strong>Update February 22nd:</strong> the lovely <a href="https://twitter.com/rhonorv">Rachel Vincent</a> from RC faculty says this about RC's gender-balancing:</p>
<blockquote>
<p>Of the folks who are currently in-batch (Winter 2's and Spring 1's), ~36% identify as women. It's roughly the same for the community as a whole (~33%), though we don't have super accurate numbers because we don't update information on folks' gender. The most gender balanced batches were a little over 40% women. We're always pushing for 50/50, though. ð Our overall strategy is to try to get an applicant pool that is as gender balanced as possible, and we don't do any kind of balancing during the admissions process itself.</p>
</blockquote>
]]></description><link>https://strugee.net/blog/2017/02/gender-representation-at-rc</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/gender-representation-at-rc</guid><pubDate>Tue, 14 Feb 2017 22:01:19 GMT</pubDate></item><item><title><![CDATA[RC week 5]]></title><description><![CDATA[<p>This is week 5 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 15</h2>
<p>Arrived ~10:20, departed ~16:30, arrived ~20:00, departed ~23:30, total time at RC 9h40m.</p>
<p>Somehow managed to get up early and arrive at my checkin early, despite being dead-tired (I couldn't get to sleep so I was running on ~5 hours of sleep). Spent most of today working on my HTTPS presentation, but took 30 minutes to an hour or so off to make a couple small improvements to my website - mostly just trimming the projects page and adding information to the contact page about how to communicate securely with me. Left for a while to have dinner with a friend and returned via the subway[1] to work on my HTTPS presentation some more.</p>
<p>(Note 1/31: I felt quite productive today, but in hindsight really didn't get a whole lot done since I was just so tired.)</p>
<p> [1]: which truthfully made me feel unreasonably accomplished since my phone died right as I looked up directions, but I got on the right subway and figured out I could transfer and take a closer line halfway through and eventually made it back anyway</p>
<h2>Day 16</h2>
<p>Arrived ~10:20, departed ~23:10, total time at RC 12h50m.</p>
<p>Spent - no joke - basically all of today working on my HTTPS presentation, which in addition to actually writing the content entailed reminding myself of how things like e.g. TLS False Start actually work. Reminding and/or properly learning (for False Start in particular I had a vague idea of how it worked before, but didn't really understand it).</p>
<p>Took about an hour off in the evening to help repaint a large stretch of wall in the space as part of the cleaning party. Then went back to HTTPS. Highly productive day.</p>
<h2>Day 17</h2>
<p>Arrived ~11:30, departed ~17:40, total time at RC 6h10m.</p>
<p>Caught up with some GitHub stuff in the morning before teaching HTTPS. We went for an hour and a half and <em>still</em> skipped the entire section on TLS performance because HTTPS is complicated and hacky and also <em>really</em> terrible. (As <a href="https://github.com/eeclaire">Claire</a> put it, "I'm now terrified of browsing the web." Me too, Claire. Me too.) I think it went really well, even though it was a little overwhelming for everyone at times.</p>
<p>Spent a bit of time watching YouTube videos on how Diffie-Hellmann works and how Elliptic-Curve Diffie-Hellman (ECDHE) works - we'd touched on both of these during the presentation and I needed to put them in Zulip. The one on plain Diffie-Hellmann was just a refresher, but the one on ECDHE was something I'd previously tried to watch <em>several</em> times and had always been too confused. But, this time I got it! Whooo! So that felt awesome.</p>
<p>Left early to go home and sqeeze in some laundry before closing out the evening by going to an RC-organized talk on <a href="https://crystal-lang.org/">Crystal</a>.</p>
<h2>Day 18</h2>
<p>Arrived ~10:30, departed ~14:30, total time at RC 4h0m.</p>
<p>Did just a smidge of work on pump.io before going to Abstract Salad Factory, then heading home to catch my flight to Brussels.</p>
<h2>Friday</h2>
<p>Not at RC. Total time at RC 0h0m.</p>
<p>In Brussels for <a href="https://fosdem.org/2017/">FOSDEM</a>.</p>
<h2>Executive summary</h2>
<p>This week had its ups and downs. I was really productive on the HTTPS stuff, but other than that I didn't reeeally get a lot done.</p>
<p>Total time at RC 32 hours 40 minutes; cumulative time 230 hours 45 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/02/rc-week-5</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/rc-week-5</guid><pubDate>Mon, 13 Feb 2017 07:23:28 GMT</pubDate></item><item><title><![CDATA[RC week 4]]></title><description><![CDATA[<p>This is week 4 of being at the <a href="https://recurse.com">Recurse Center</a>.</p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 11</h2>
<p>Arrived ~10:50, departed ~23:20, total time at RC 12h30m.</p>
<p>Arrived 20 minutes late for my checkin, but checked in with <a href="https://stanzheng.com/">Stanley</a> and <a href="https://github.com/heatherbooker">Heather</a> anyway. Started <a href="https://pump.strugee.net/alex/note/q1vco7XwRk6JsYteqTQqPA">an experiment</a> where I turned on <a href="https://www.eff.org/https-everywhere">HTTPS Everywhere</a>'s "block all unencrypted requests" option, which has been, uh, <em>interesting</em> so far. Spent most of the day working on blog-related things - finishing up and publishing <a href="https://strugee.net/blog/2017/01/rc-week-3">RC week 3</a> (which I just straight up forgot to publish on Saturday) along with <a href="https://strugee.net/blog/2017/01/surveillance-priorities">Surveillance priorities</a> which I finished exactly two minutes before[1] the start of this week's Iron Blogger challenge meeting. Other than that, poked a little at implementing <a href="https://github.com/processone/ejabberd/issues/1364">OCSP stapling support</a> in <a href="https://www.ejabberd.im/">ejabberd</a>, which is something I want to do for a number of reasons:</p>
<ol>
<li>It'll give me a chance to look at some Erlang, which will be a really interesting experience</li>
<li>It'll give me a chance to try doing something with the OpenSSL API, which is a complete horror show but nonetheless something I would like (some) experience in</li>
<li>I run ejabberd in production and, you know, really want stapling support</li>
</ol>
<p>Ended the night by going to Fat Cat.</p>
<p> [1]: I actually already had a longer post mostly written, but I realized as I was going to finish it that the experiment that I was proposing had a) been done before and b) mostly failed. So I ended up writing "Surveillance priorities" from scratch in a hurry instead.</p>
<h2>Day 12</h2>
<p>Arrived ~10:50, departed ~17:50, total time at RC 7h0m.</p>
<p>Arrived late again, despite leaving a good <em>15 to 20 minutes earlier</em>. Freaking subway. ANYWAY. Checked in on Zulip instead of in person. The day was semi-productive - I worked a little on my operational security presentation for tomorrow, but a lot of my time was spent talking with Rose, discussing the programming language I'm planning to work on/invent. Left early to do laundry at home and then closed out the evening by finishing my presentation as well as finding and reporting a (common and uninteresting) security vulnerability in a web application[2] - unnamed for obvious reasons.</p>
<p>As a side note, as Stanley put it, <a href="https://www.recurse.com/blog/112-how-rc-uses-zulip">I'm RC famous</a>! Kind of, I guess. \o/</p>
<p> [2]: I actually thought I found the same problem in another project, except it turned out that I totally missed something and so instead of being cool I ended up embarrassing myself on GitHub instead. Sadface :(</p>
<h2>Day 13</h2>
<p>Arrived ~10:35, departed ~00:10, total time at RC 13h35m.</p>
<p>Arrived in the middle of my checkin. Spent the morning taking care of some general maintenance tasks, including getting ready to present on operational security, which I did in the afternoon. Spent most of the rest of the day thinking about the design of my programming language and putting it together into a blog post. In the evening, started trying to fix <a href="https://github.com/sandstorm-io/sandcats/issues/153">a bug in Sandstorm</a> which was breaking my production install. Also, had my Princeton interview via Skype, which I think went extremely well. Yay! My interviewer was awesome and we had a really interesting conversation.</p>
<p>As a side note, I got to wear my new libuv shirt today, and it is seriously <a href="https://pump.strugee.net/alex/image/zAFejrr9RY6pLFHpSlXBbQ">the coolest shirt I've ever seen</a>.</p>
<h2>Day 14</h2>
<p>Arrived ~10:35, departed ~1:40, total time at RC 15h5m.</p>
<p>Arrived in the middle of my checkin again (still better than earlier in the week, though). It wasn't anything groundbreaking, but it did give me the opportunity to get more hands-on Mercurial experience (and learn a lot about Mercurial's different branching styles). Working in an unfamiliar codebase was also a good experience, as was dealing with Sandstorm's custom UDP protocol. It wasn't really what I meant to do with the day, but also not a total wash.</p>
<p>Attended Thursday presentations followed by Game Night in the evening which was <em>very</em> fun - I played some poker, then lost at chess a bunch of times to Hussein (even when we played Blitz Chess, which he said he was bad at). Then we switched to Go for a while. Finished out the evening by just hanging out with <a href="http://another.workingagenda.com">Fenimore</a>, <a href="https://github.com/Husseinfarah93">Hussein</a>, and <a href="http://kacyjam.es/">James</a>, which was a lot of fun.</p>
<h2>Friday</h2>
<p>Arrived ~15:10, departed ~23:50, total time at RC 8h40m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Slept in pretty late today. Attended the monthly pump.io meeting immediately upon arrival (sadly Evan wasn't there). Spent the rest of the day responding to PRs - which took a lot of time but didn't actually result in a lot of code - then authoring a Huginn PR to <a href="">add titles</a> to all pages.</p>
<h2>Executive summary</h2>
<p>In a shocking turn of events, this week was relatively productive, but could've been better. I challenged myself a little bit, but I think I can and should do more.</p>
<p>Checkins really helped. Even when I missed the checkin it provided motivation to get up and get moving. 10:30 may be a little too early for me though, so I'm not sure if I'll continue doing it next week.</p>
<p>Total time at RC 56 hours 50 minutes; cumulative time 198 hours 5 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-4</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-4</guid><pubDate>Mon, 30 Jan 2017 18:16:31 GMT</pubDate></item><item><title><![CDATA[New programming language part I: Handlers]]></title><description><![CDATA[<p>So my latest project at the <a href="https://recurse.com">Recurse Center</a> is a new programming language, as yet unnamed. Basically this was inspired by my <a href="https://strugee.net/presentation-security-design">security design</a> presentation in which I laid out a couple ways you can improve programs' security designs, like process separation. And it occurred to me: why is this so difficult? Something should be doing this for me. Enter... whatever the hell I end up calling my language.</p>
<p>One of the most important building blocks of the language is something that I'm currently calling a "Handler". A Handler is basically a segregated piece of application code that handles some task or problem domain. For example, a Handler for outgoing DNS requests (syntax subject to change, obviously):</p>
<pre><code>Handler DNS {
    function getAddressFromHostname(hostname) {
        // Very much pseudocode - all function calls here are example OS calls

        sendDnsQuery(hostname);
        while (!haveDnsResult()) {
            sleep(1);
        }
        
        return getDnsResult();
    }
}
</code></pre>
<p>This Handler has one simple method, <code>getAddressFromHostname()</code>. It sends a DNS query, blocks until it has a result, and then returns the result.</p>
<p>What's cool about this Handler is that it will be run in its own process - in other words, each Handler is automatically transformed into a privilege-separated process. However, <code>getAddressFromHostname()</code> can still be called from other, high-level Handlers! The language will do all the data marshalling for you, so from a language perspective it looks like a regular function call even though in practice it's going cross-process.</p>
<p>Now, let's improve our Handler a little bit. It's pretty unfortunate that we can only make one DNS request at a time (since it's blocking), so let's use an event loop.</p>
<pre><code>Handler DNS is eventLoop {
    function getAddressFromHostname(hostname) {
        // Still pseudocode

        return sendDnsQuery(hostname, function(address) {
            return address;
        });
    }
}
</code></pre>
<p>We specified that the <code>DNS</code> Handler is an event loop, so the language automatically set up a Node-style event loop - we never actually called anything to enter an event loop, it just sort of happened as a construct of the language. Note also the nice async-aware return syntax - the result of <code>sendDnsQuery()</code> is returned to <code>getAddressFromHostname()</code>'s caller, and the result of <code>sendDnsQuery()</code> is specified by the return value of the anonymous function callback.</p>
<p>We can improve correctness even more by specifying that the Handler is not allowed to make syncronous I/O calls at all:</p>
<pre><code>Handler DNS is eventLoop, async {
    // ...
}
</code></pre>
<p>Handlers let you pick and choose different elements and design choices for different parts of your application. For example, if you had a Handler responsible for processing data, it might make sense to restrict it to being entirely functional:</p>
<pre><code>Handler incomingData is functional {
    // ...
}
</code></pre>
<p>In such a Handler, any functions with side effects wouldn't be callable, enforced at compile-time (possibly parse-time, depending on whether I can make it compiled or not given the type system). Perhaps you want to spawn a new sandbox process for each piece of incoming data (OpenSSH does this, for example, when first receiving authentication data from untrusted users):</p>
<pre><code>// The `ephemeral` keyword will probably be something better, but for now...
Handler incomingData is functional, ephemeral {
    // ...
}
</code></pre>
<p>If your application requires root - for example, if you were writing an NTP daemon that needed to call <code>setTimeOfDay()</code> - that's also specified at the Handler level:</p>
<pre><code>Handler incomingData is root {
    // ...
}
</code></pre>
<p>This should give you some idea of why Handlers are really interesting, even beyond the process separation concept that underlies them. (It's also worth noting that while I've focused mostly on daemons, this can also be used to securely implement e.g. <code>file</code>.) I'm really excited to get these ideas out there so I'll stop for now, but pretty soon I'll write another blog post talking about the type system.</p>
]]></description><link>https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/new-programming-language-part-i-handlers</guid><pubDate>Thu, 26 Jan 2017 15:59:20 GMT</pubDate></item><item><title><![CDATA[RC week 3]]></title><description><![CDATA[<p>This is week 3 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Monday</h2>
<p>Arrived ~12:50, departed ~00:10, total time at RC 11h20m. Not Day 8 because Martin Luther King Day was today, so RC was not technically in session.</p>
<p>Lazy day today. Participated in an interesting discussion in the <a href="https://conversations.im">Conversations</a> MUC about <a href="https://wiki.xmpp.org/web/Easy_Onboarding">Easy XMPP</a> which led to me spending a couple hours working on <a href="https://github.com/ge0rg/easy-xmpp-invitation">this onboarding webpage project</a> (live version <a href="https://yax.im/i/#alex@strugee.net">here</a>). Spent about 5 minutes deploying OCSP Must Staple to <a href="https://nodecompat.com">nodecompat.com</a> and <a href="https://isthefieldcontrolsystemdown.com">isthefieldcontrolsystemdown.com</a> and then about 30 discussing exactly what OCSP Must Staple is with <a href="https://jessewalling.com/">Jesse</a>. Also, submitted a talk on <a href="https://github.com/straticjs/generator-stratic">Stratic</a> to <a href="https://www.linuxfestnorthwest.org/">LinuxFest Northwest</a>.</p>
<p>Truthfully I spent a fair amount of my time in #pump.io on Freenode and in particular, got confirmation that <a href="https://e14n.com/evan">Evan</a> will be able to attend this month's pump.io meeting, which is fantastic. Closed out the evening by finishing my last college app and then spending several hours (i.e. waaay longer than I meant to) looking into parts for building an <a href="https://xkcd.com/413/">xkcd-style robot</a> for the space.</p>
<h2>Day 8</h2>
<p>Arrived ~13:10, departed ~23:00, total time at RC 9h50m.</p>
<p>Truthfully, not really sure where today's time went. The biggest real thing I did was fixing a pretty serious <a href="https://github.com/pump-io/pump.io/issues/1266">regression</a> in pump.io (introduced during the Express 3.x migration) that caused realtime functionality not to work. Plus I wrote the above text (under "Monday") because I didn't have time the previous night. *sigh*</p>
<p>However, I <em>did</em> spend a lot of the evening starting and then finishing my presentation on <a href="https://strugee.net/presentation-webapp-security">webapp security</a> for tomorrow. So that's something.</p>
<h2>Day 9</h2>
<p>Arrived ~13:40, departed ~21:30, total time at RC 7h50m.</p>
<p>Arrived only just in time for my presentation on <a href="https://strugee.net/presentation-webapp-security">webapp security</a> due to a series of unfortunate (mostly subway-related) mishaps. It went really, really well - although we did run for 30 minutes longer than I'd planned, which I was surprised at since last week we only ran a couple minutes over but I had twice as many slides. Covered (mostly SQL) injections, cross-site scripting, password handling, and Cross Site Request Forgery. After that, had an extensive discussion with <a href="https://github.com/ebb-tide">Deniz</a> and <a href="https://github.com/heatherbooker">Heather</a> about security and related subjects (email, selfhosting, the law, and how I think about security systems, mostly) before heading out to Walgreen's to buy some Airbourne, since I think I may be on the verge of getting a bit sick. :(</p>
<p>(Heather and Deniz also suggested I use the word "obviously" less, although it seems like other than that people really like my teaching style. So that feels good.)</p>
<p>The rest of the day was pretty boring: did a <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#211---2017-01-18">patch release</a> for pump.io so that the regression fix that landed yesterday would go out to users. Took care of some system administration maintenance, then did some pump.io issue triaging and some minor fixups in the GitHub repository (notably improvements to the wiki homepage and fixing the Releases page, which was kinda borked).</p>
<p>Finally, since I've been doing a bad (read: <em>terrible</em>) job trying Mercurial so far, I've decided to force myself to use it:</p>
<pre><code>$ cd Development
$ rm -rf icalc
$ # Muck around for a bit because I thought the following would work out-of-the-box, but it didn't
$ hg clone git+ssh://github.com:strugee/icalc.git
</code></pre>
<p>I'll end up using it tomorrow since I'm committing to work on icalc for the entire day. I've been really bad about working on it.</p>
<h2>Day 10</h2>
<p>Arrived ~13:10, departed ~17:45, total time at RC 4h35m.</p>
<p>Arrived riiiight as Abstract Salad Factory was starting. Had a delicious salad and came up with an excellent idea for an RC activity[1] before attending Beginner's Club, which was on testing (and also conveniently in the same room). Spent a little time taking care of business (emails, etc.) before digging into Mercurial by looking at the "Migration from Git" wiki page and just reading links. Feel like I'm on a good track there.</p>
<p>Attended Thursday presentations; came up with a really awesome web standards idea during that that I was <em>extremely</em> excited to propose to the standards community. Looked it up while the jobs fair was getting started - turns out it's <a href="https://w3c.github.io/webappsec-mixed-content/#strict-opt-in">already a thing</a>. So that was disappointing. Left for home pretty soon after that.</p>
<p> [1]: one weekend where we take over the main space and marathon through all three extended director's cut Lord of the Rings movies</p>
<h2>Friday</h2>
<p>Arrived ~1:00, departed ~00:50, total time at RC 11h50m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Spent a lot of time today pairing with <a href="https://github.com/heatherbooker">Heather</a> on improving the <a href="https://github.com/asinghamgoodwin/AbstractSaladFactory">Abstract Salad Factory webapp</a> before devolving into silly shell-related projects like installing <a href="https://github.com/nvbn/thefuck">thefuck</a> and perusing <a href="https://github.com/ayust/underhanded">underhanded</a>, which we actually learned a lot from (because we kept looking up the options and commands the aliases used). Also found out that the version of <a href="">sl</a> packaged in Debian is weirdly old. Like 10 years old.</p>
<p>In the evening, went to Bottle Share Friday which really ended up being "have lots of food and play a game of Codenames but mostly just talk" Friday. Very fun.</p>
<p>Wrapped up the evening with a little bit of Just Dance followed by some <a href="https://github.com/pump-io/pump.io/pull/1272">pump.io work</a> and more pairing on the Abstract Salad Factory app, which ended with me and Heather wondering if the  version deployed to Heroku didn't actually match the version on GitHub.</p>
<p>Also, signed up for checkins for next week as an accountability tool.</p>
<h2>Executive summary</h2>
<p>Week started out similar to the past week or two - I wasn't terribly good about sticking to RC stuff. However, I brought it back in the end! So I think I'm back on track.</p>
<p>Total time at RC 45 hours 25 minutes; cumulative time 141 hours 15 minutes.</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-3</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-3</guid><pubDate>Mon, 23 Jan 2017 19:38:24 GMT</pubDate></item><item><title><![CDATA[RC week 2]]></title><description><![CDATA[<p>This is week 2 of being at the <a href="https://recurse.com">Recurse Center</a>. </p>
<script async defer src="https://www.recurse-scout.com/loader.js?t=3d49e64361d4b897ffd2fd56dcd93ca4"></script>
<h2>Day 4</h2>
<p>Arrived ~12:30; departed ~23:45; total time at RC 11h15m.</p>
<p>Today is day four because last week only had three days - Monday was off because of New Years.</p>
<p>Spent most of today working on Stratic. Paired with <a href="https://github.com/atungare">Ajay</a> to fix a really nasty bug in stratic-paginate-indexes caused by some <a href="https://github.com/gulpjs/vinyl/issues/125">incorrect Vinyl documentation</a>, during which he showed me how <code>Array.prototype.map</code> is a nice taste of functional programming available in JS, as well as <a href="https://github.com/s-a/iron-node">Iron Node</a> - I had only previously used the built-in <code>node debug</code>. (Spent <em>hours</em> on this bug at home but solved it in ~30 minutes while pairing.) Spent most of the rest of the day getting pagination to function properly on strugee.net, which was surprisingly hard due to there just being a lot of edge cases to handle. (That, plus the fact that it took a while for me to settle on a design I liked.) Spent some more time polishing or updating other parts of strugee.net.</p>
<p>In the evening, spent some time pairing with <a href="https://github.com/Jmeggesto">Jacqueline</a>, teaching them to set up a cronjob using a DigitalOcean VPS.</p>
<h2>Day 5</h2>
<p>Arrived ~10:30; departed ~23:00; total time at RC 12h30m.</p>
<p>Worked on Stratic almost non-stop for literally the entirety of today (again). Started and (almost) finished <a href="https://github.com/strugee/stratic-indexes-to-rss">stratic-indexes-to-rss</a> and used the new feeds available on strugee.net to add myself to <a href="https://blaggregator.recurse.com">Blaggregator</a>. Took a quick poll on Zulip asking what the threshold was for there being so many repositories in a project that it warranted its own GitHub repo; instead of getting any replies, talked to <a href="https://stanzheng.com/">Stanley</a> in person who convinced me when he said, "what are the cons?" and I said, "good question! I dunno." Hence, founded the <a href="https://github.com/straticjs">straticjs</a> GitHub org. From there, did a huge push towards a <a href="https://github.com/straticjs/generator-stratic">generator-stratic</a> 1.0.0 release. It's very close - the core is done, but there are a lot of additional options that need to be added. I also can't release it before I fix up some TODOs currently in stratic-indexes-to-rss.</p>
<p>Additionally, took about a half hour break midday to give some ideas to <a href="https://github.com/heatherbooker">Heather</a>, who is teaching a workshop on Git tomorrow, and took another half-hour or so to watch non-technical lighning talks around 17:30(?).</p>
<h2>Day 6</h2>
<p>Arrived ~11:00; departed ~21:50; total time at RC 10h50m.</p>
<p>Spent a significant portion of the morning thinking about Zulip[1] design before and while filing <a href="https://github.com/zulip/zulip/issues/3235">this long bug</a> proposing some improvements to the way unread counts and notifications work. Also reviewed a couple <a href="https://prism-break.org/">PRISM Break</a> Pull Requests - I realize now I should've written about this on here (since it was <em>extrmemely</em> exciting to me!) but I'm now a comaintainer of PRISM Break. Thanks, <a href="https://github.com/nylira">@nylira</a>!</p>
<p>Spent a little time polishing my <a href="https://strugee.net/presentation-security-design">security presentation</a> for tomorrow. At first I spent a lot of time trying to find a style I liked on my own, but eventually I just threw in the towel and used <a href="https://github.com/bespokejs/bespoke-theme-cube">bespoke-theme-cube</a> which is what I had always previously used (since it's what <a href="https://github.com/bespokejs/generator-bespoke">generator-bespoke</a> generates).</p>
<p>Finally, spent some time working on pump.io. Filed a couple bugs on future improvements, notably one proposing that we add code to <a href="https://github.com/pump-io/pump.io/issues/1259">automagically manage Let's Encrypt certificates</a>, which I'm very excited about for several reasons. I also implemented <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">HTTP Strict Transport Security</a> which is a huge win for the network's security. The absence of HSTS was also the last remaining issue preventing me from gaining an A+ on SSL Labs for <code>pump.strugee.net</code> since I stopped using a reverse proxy setup, so that feels good.</p>
<p>Overall, I would say that this day was of average or slightly below average productivity. Also, while I got some useful stuff done, none of it was really related to RC (with the exception of the security presentation, thought that didn't take that much time).</p>
<p> [1]: for non-Recursers, <a href="https://zulip.org/">Zulip</a> is a really excellent realtime chat tool that RC uses for communication.</p>
<h2>Day 7</h2>
<p>Arrived ~12:20, departed ~22:30, total time at RC 10h10m.</p>
<p>Fixed a couple minor issues with my <a href="https://strugee.net/presentation-security-design">security presentation</a> before deploying it to strugee.net in preparation for my presentation. The talk itself went really well; my audience seemed to follow most of what I was presenting and I got some really good questions. As I stated at the beginning of the presentation, security is a <strong>huge</strong> topic, so really I looked at the list of subtopics and basically just picked one that I thought was interesting. There's a huge amount that I didn't cover so (partly) prompted by <a href="https://github.com/heatherbooker">Heather</a>, I'm now planning on doing weekly security presentations. Next week's will be on web application security and is already on the RC calendar.</p>
<p>Presented <a href="https://github.com/straticjs/generator-stratic">Stratic</a> during the weekly Thursday 5-minute presentations. I got up and said, "I'm super nervous about this talk because it's literally <em>all live demos</em>" and the audience laughed. And sure enough, I'd forgotten to add a dependency, so my <code>gulp serve</code> demonstration failed. That was okay though, because I still got to show the really interesting bits, which is the Unixy design in the gulpfile.</p>
<p>Finally, spent a lot of the evening with <a href="https://github.com/heatherbooker">Heather</a> working on this sickass "made at Recurse Center" GitHub README badge:</p>
<!-- TODO: fix this to use the real URL when it's up somewhere -->
<p><img src="https://people.strugee.net/~alex/made_at_RC.svg" alt="&#x22;made at Recurse Center&#x22; GitHub-style badge"></p>
<p>Whoohoo! \o/</p>
<h2>Friday</h2>
<p>Arrived ~13:15, departed ~22:20, total time at RC 9h5m. As always, Friday doesn't count as a day because RC is technically not in session.</p>
<p>Had a very nice time walking to RC this morning which took about an hour because I kept stopping to take pictures - that felt really really good; it's been <em>way</em> too long since I've taken any and I missed it far more than I realized. Spent some time having a very nice discussion (both on Zulip and in real life) about different approaches to managing dotfiles in version control. Also spent some time discussing the design of git (particularly history rewriting, which I've <a href="/blog/2016/10/github-squash-and-merge-default-considered-harmful">previously written about</a>) and resolved that something I should work on at RC is getting experience with <a href="https://www.mercurial-scm.org/">Mercurial</a>. In between both of those I spent some time looking into where to put the badge that <a href="https://github.com/heatherbooker">Heather</a> and I made. Seems like the answer is <a href="https://swag.recurse.com/">swag.recurse.com</a> so I started looking at the project setup and plan to send some more PRs in the future.</p>
<p>Throughout the day I also reported a couple minor <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331117">Zulip</a> <a href="https://github.com/zulip/zulip/issues/3300">issues</a> as well as two Firefox bugs, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331117">one of which</a> got marked as a duplicate and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1331121">one of which</a> is still UNCONFIRMED.</p>
<h2>Executive summary</h2>
<p>Pretty productive week but could've been better. In particular I didn't do a good job of working on "RC projects" and instead spent too much time on existing personal projects, primarily Stratic and pump.io.</p>
<p>Total time at RC 53 hours 50 minutes; cumulative time 95 hours 50 minutes (first week estimated).</p>
]]></description><link>https://strugee.net/blog/2017/01/rc-week-2</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rc-week-2</guid><pubDate>Sat, 14 Jan 2017 21:39:16 GMT</pubDate></item><item><title><![CDATA[RSS and pagination on strugee.net]]></title><description><![CDATA[<p>RSS and pagination are now enabled on strugee.net's blog, thanks to <a href="https://github.com/strugee/stratic-indexes-to-rss">stratic-indexes-to-rss</a> and <a href="https://github.com/strugee/stratic-paginate-indexes">stratic-paginate-indexes</a> respectively.</p>
<p>The pagination code is already pretty solid although there's always room for <a href="https://github.com/strugee/stratic-paginate-indexes/issues">improvement</a> - thanks to <a href="https://github.com/atungare">Ajay Tungare</a> for pairing with me at the <a href="https://recurse.com">Recurse Center</a> and helping me catch the bug! However, I'm not particularly confident in the RSS code, since RSS is actually somewhat tricky to properly handle. Because of that, I would seriously appreciate it if people tried adding the RSS feeds to their readers and seeing if anything breaks. If so, <a href="https://github.com/strugee/stratic-indexes-to-rss/issues/new">let me know</a>!</p>
<p>Cheers!</p>
]]></description><link>https://strugee.net/blog/2017/01/rss-and-pagination-on-strugee.net</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/rss-and-pagination-on-strugee.net</guid><pubDate>Tue, 10 Jan 2017 18:48:01 GMT</pubDate></item><item><title><![CDATA[New project! thanksmaintainer.com]]></title><description><![CDATA[<p>So I've been thinking about a new project recently. It's called thanksmaintainer.com, and it helps you say, "thanks, maintainer!"</p>
<p>Basically this idea came about from <a href="https://github.com/gulpjs/gulp/issues/1806">this GitHub thread</a> where some user comes and disparages the Gulp project for being "not actively developed" and complains that it's taking a long time to release despite the fact that a) Gulp 4 <em>is</em> being actively developed and b) the Gulp maintainers owe this ungrateful, presumptive person <em>nothing</em>. As @contra <a href="https://github.com/gulpjs/gulp/issues/1806#issuecomment-247416856">says</a>:</p>
<blockquote>
<p>@rbatllet 4.0 is being worked - if you took more than five seconds to look you'd see it in other repos (for example: #1604). This repo has almost no code in it, it's a wrapper around the other modules so the contribution graph should be completely flat except for doc updates and major releases. We've responded to these tickets so many times - we have lives too.</p>
<p>I've had to move across the country 3 times since the tweet you linked - had my business unexpectedly fail (startups!), had relationships fail, deaths, travel, poverty, etc. - where the fuck am I supposed to find time to work on this while I'm trying to pay rent and put food in my stomach? The attitude people have towards open source authors is disgusting - I don't owe you anything, nobody does. Unless you've done something for the open source community (hint: you haven't!) then you aren't entitled to shit. If you want something to happen then help make it happen, otherwise log off.</p>
</blockquote>
<p>I read this comment and thought, <em>that freaking <strong>sucks</strong></em>. I feel like there's a problem in the open source and freedom-respecting software community where consumers demand stuff from project maintainers like the maintainers <em>owe</em> them something or they <em>deserve</em> some feature/bugfix/etc. This is obviously complete and utter bullshit - most maintainers work on their projects in their spare time - and it can start to feel like maintaining a project is a waste of time because all you get from it is a drove of angry entitled haters.</p>
<p>thanksmaintainer.com is designed to solve this problem. Here's how you use it; it's very simple:</p>
<ol>
<li>You visit thanksmaintainer.com</li>
<li>You sign in with GitHub</li>
<li>You find projects that you use and are grateful for</li>
<li>You click the "thanks, maintainer!" button</li>
</ol>
<p>thanksmaintainer.com will keep track of all the good vibes people are sending towards projects. When it reaches a certain threshold, the website will (probably) find a way to contact the maintainers and let them know how many people's lives they've made better. Not sure how this last bit will work yet, or if it'll even work like that at all. But the core idea is there - hopefully it'll be an easy way to give some love back to maintainers who may really need it.</p>
<p>Some design notes: it'll only work with GitHub to begin with, but eventually I hope to expand support to e.g. GitLab. Also, the fact that it's focused on projects and not maintainers is intentional - being thankful for a person instead of a project isn't as meaningful because you're not specifying why you're thankful. In contrast, the project-centric design lets you say, "these <em>particular</em> lines of code impacted my life in a meaningful way." Plus, a lot of projects have more than one maintainer, and it seems foolish to only thank <em>some</em> of the project maintainers, and not others.</p>
<p>I would love to hear feedback on this idea. So, if you have any thoughts, <a href="/contact">get in touch</a> with me and let me know.</p>
<p>Stay happy &#x3C;3</p>
]]></description><link>https://strugee.net/blog/2017/01/new-project-thanksmaintainer.com</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/new-project-thanksmaintainer.com</guid><pubDate>Tue, 10 Jan 2017 00:55:54 GMT</pubDate></item></channel></rss>